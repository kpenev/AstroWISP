"""A wrapper class for working with PSF/PRF maps from the C/C++ library."""

from superphot.piecewise_bicubic_psf import PiecewiseBicubicPSF
from superphot.smooth_dependence import SmoothDependence
from superphot._initialize_library import get_superphot_library

class PiecewiseBicubicPSFMap:
    """Provide convenient python interface to shape fitting results."""

    def __init__(self, star_shape_map_tree):
        """
        Prepare to query the map generated by a star shape fit.

        Args:
            star_shape_map_tree(SuperPhotIOTree):    The result returned by
                calling FitStarShape.fit().

        Returns:
            None
        """

        self._superphot_library = get_superphot_library()
        self._library_map = (
            self._superphot_library.create_piecewise_bicubic_psf_map(
                star_shape_map_tree.library_tree
            )
        )
        self._map_terms = SmoothDependence.expand_expression(
            star_shape_map_tree.get('psffit.terms', str)
        )

    def __call__(self, **map_variables):
        """
        Evaluate the map for a given set of values of the map variables.

        Args:
            map_variables:    Should define values for all variables on which
                the map depends.

        Returns:
            PSF:
                The PSF/PRF the map predicts for the given arguments.
        """

        term_values = SmoothDependence.evaluate_terms(self._map_terms,
                                                      **map_variables)
        assert term_values.shape[0] == 1
        term_values = term_values.flatten()
        return PiecewiseBicubicPSF(
            self._superphot_library.evaluate_piecewise_bicubic_psf_map(
                self._library_map,
                term_values
            )
        )

    def __del__(self):
        """Delete any objects allocated by the library."""

        self._superphot_library.destroy_piecewise_bicubic_psf_map(
            self._library_map
        )
