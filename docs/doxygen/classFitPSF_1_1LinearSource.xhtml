<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>My Project: FitPSF::LinearSource Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "ams.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.jsdelivr.net/npm/mathjax@2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">My Project
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classFitPSF_1_1LinearSource.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pri-types">Private Types</a> &#124;
<a href="#pri-methods">Private Member Functions</a> &#124;
<a href="#pri-attribs">Private Attributes</a> &#124;
<a href="classFitPSF_1_1LinearSource-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">FitPSF::LinearSource Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A class for PSF fitting sources whose flux distribution depends linearly on the PSF paramaters (for a fixed amplitude).  
 <a href="classFitPSF_1_1LinearSource.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="LinearSource_8h_source.xhtml">LinearSource.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for FitPSF::LinearSource:</div>
<div class="dyncontent">
<div class="center"><img src="classFitPSF_1_1LinearSource__inherit__graph.png" border="0" usemap="#aFitPSF_1_1LinearSource_inherit__map" alt="Inheritance graph"/></div>
<map name="aFitPSF_1_1LinearSource_inherit__map" id="aFitPSF_1_1LinearSource_inherit__map">
<area shape="rect" title="A class for PSF fitting sources whose flux distribution depends linearly on the PSF paramaters (for a..." alt="" coords="5,6436,333,8151"/>
<area shape="rect" href="classFitPSF_1_1OverlapSource.xhtml" title=" " alt="" coords="10,4741,329,6387"/>
<area shape="rect" href="classFitPSF_1_1Source.xhtml" title="An abstract base class for sources which participate in PSF fitting." alt="" coords="24,1787,304,2912"/>
<area shape="rect" href="classFitPSF_1_1OverlapSource.xhtml" title="PSF fitting source which handles overlaps with other sources." alt="" coords="185,2961,495,4659"/>
<area shape="rect" href="classPSF_1_1MapSource.xhtml" title="Class for evaluating a collection of smooth dependencies for a collection of sources." alt="" coords="43,1479,285,1737"/>
<area shape="rect" href="classCore_1_1Source.xhtml" title="A base class for all sources in AstroWISP." alt="" coords="35,824,293,1429"/>
<area shape="rect" href="classCore_1_1SourceLocation.xhtml" title="The minimum requirements for objects specifying where a source is." alt="" coords="63,516,265,775"/>
<area shape="rect" href="classCore_1_1Point.xhtml" title=" " alt="" coords="75,277,253,467"/>
<area shape="rect" href="classCore_1_1Point.xhtml" title="Representing a 2D point with real valued cartesian coordinates." alt="" coords="59,5,269,212"/>
</map>
</div>
<div class="dynheader">
Collaboration diagram for FitPSF::LinearSource:</div>
<div class="dyncontent">
<div class="center"><img src="classFitPSF_1_1LinearSource__coll__graph.png" border="0" usemap="#aFitPSF_1_1LinearSource_coll__map" alt="Collaboration graph"/></div>
<map name="aFitPSF_1_1LinearSource_coll__map" id="aFitPSF_1_1LinearSource_coll__map">
<area shape="rect" title="A class for PSF fitting sources whose flux distribution depends linearly on the PSF paramaters (for a..." alt="" coords="91,9655,419,11335"/>
<area shape="rect" href="classFitPSF_1_1OverlapSource.xhtml" title=" " alt="" coords="235,7960,554,9605"/>
<area shape="rect" href="classFitPSF_1_1Source.xhtml" title="An abstract base class for sources which participate in PSF fitting." alt="" coords="445,5057,725,6131"/>
<area shape="rect" href="classFitPSF_1_1OverlapSource.xhtml" title="PSF fitting source which handles overlaps with other sources." alt="" coords="431,6180,740,7877"/>
<area shape="rect" href="classPSF_1_1MapSource.xhtml" title="Class for evaluating a collection of smooth dependencies for a collection of sources." alt="" coords="728,4258,971,4517"/>
<area shape="rect" href="classCore_1_1Source.xhtml" title="A base class for all sources in AstroWISP." alt="" coords="639,2667,897,3221"/>
<area shape="rect" href="classCore_1_1SourceLocation.xhtml" title="The minimum requirements for objects specifying where a source is." alt="" coords="831,1243,1033,1501"/>
<area shape="rect" href="classCore_1_1Point.xhtml" title=" " alt="" coords="675,494,853,683"/>
<area shape="rect" href="classCore_1_1Point.xhtml" title="Representing a 2D point with real valued cartesian coordinates." alt="" coords="659,5,869,212"/>
<area shape="rect" href="classCore_1_1SourceID.xhtml" title="The two components of the HAT i.d. (primary filed and source number)" alt="" coords="877,277,1128,900"/>
<area shape="rect" href="classPSF_1_1PSF.xhtml" title="An abstract parent class for all PSF models." alt="" coords="265,965,525,1779"/>
<area shape="rect" href="classPSF_1_1Piecewise.xhtml" title="A PSF model consisting of a grid of rectangles each with a separate intensity function." alt="" coords="181,1844,534,4044"/>
<area shape="rect" href="classBackground_1_1Source.xhtml" title="The base class for the backgnound under a source." alt="" coords="556,1191,807,1553"/>
<area shape="rect" href="classCore_1_1Flux.xhtml" title="A class representing the flux measurement for a source, including an error estimate and a flag." alt="" coords="238,4223,442,4551"/>
<area shape="rect" href="classCore_1_1SubPixelMap.xhtml" title="The base class for all sub&#45;pixel maps." alt="" coords="467,4093,704,4681"/>
<area shape="rect" href="classPSF_1_1PiecewiseBicubic.xhtml" title="A Piecewise defined as a bicubic interpolation over a grid, where at each grid point the value,..." alt="" coords="5,4705,389,5033"/>
</map>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ae438256b8949f3e16f26e0a4fc7f0c74"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1LinearSource.xhtml#ae438256b8949f3e16f26e0a4fc7f0c74">LinearSource</a> (const <a class="el" href="classPSF_1_1PiecewiseBicubic.xhtml">PSF::PiecewiseBicubic</a> &amp;<a class="el" href="classCore_1_1Source.xhtml#a22e92fbfaecfd0ccc0baf1e7297a1ae5">psf</a>, const <a class="el" href="classCore_1_1SourceID.xhtml">Core::SourceID</a> &amp;<a class="el" href="classCore_1_1SourceLocation.xhtml#af3effdc0f9853600380b2deb02415223">id</a>, double x0, double y0, const <a class="el" href="classBackground_1_1Source.xhtml">Background::Source</a> &amp;<a class="el" href="classCore_1_1Source.xhtml#af4ab8cc438b35fa0eb8b2e6943cff993">background</a>, <a class="el" href="classFitPSF_1_1Image.xhtml">Image</a>&lt; <a class="el" href="classFitPSF_1_1LinearSource.xhtml">LinearSource</a> &gt; &amp;psffit_image, double alpha, int <a class="el" href="classFitPSF_1_1Source.xhtml#afc2a8d2b714c3f8d3976f8481d53c426">source_assignment_id</a>, const <a class="el" href="classCore_1_1SubPixelMap.xhtml">Core::SubPixelMap</a> *<a class="el" href="classFitPSF_1_1Source.xhtml#a0661658d593824f0bcd4d19cf3eccb80">subpix_map</a>, double max_circular_aperture, const std::string &amp;output_fname)</td></tr>
<tr class="memdesc:ae438256b8949f3e16f26e0a4fc7f0c74"><td class="mdescLeft">&#160;</td><td class="mdescRight">See <a class="el" href="classFitPSF_1_1Source.xhtml" title="An abstract base class for sources which participate in PSF fitting.">Source</a> constructor with matching arguments (except the first two).  <a href="classFitPSF_1_1LinearSource.xhtml#ae438256b8949f3e16f26e0a4fc7f0c74">More...</a><br /></td></tr>
<tr class="separator:ae438256b8949f3e16f26e0a4fc7f0c74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4a64d29bd02cbb476f061daec550818"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1LinearSource.xhtml#ab4a64d29bd02cbb476f061daec550818">LinearSource</a> (const <a class="el" href="classPSF_1_1PiecewiseBicubic.xhtml">PSF::PiecewiseBicubic</a> &amp;<a class="el" href="classCore_1_1Source.xhtml#a22e92fbfaecfd0ccc0baf1e7297a1ae5">psf</a>, const <a class="el" href="classCore_1_1SourceID.xhtml">Core::SourceID</a> &amp;<a class="el" href="classCore_1_1SourceLocation.xhtml#af3effdc0f9853600380b2deb02415223">id</a>, double x0, double y0, const <a class="el" href="classBackground_1_1Source.xhtml">Background::Source</a> &amp;<a class="el" href="classCore_1_1Source.xhtml#af4ab8cc438b35fa0eb8b2e6943cff993">background</a>, <a class="el" href="classFitPSF_1_1Image.xhtml">Image</a>&lt; <a class="el" href="classFitPSF_1_1LinearSource.xhtml">LinearSource</a> &gt; &amp;psffit_image, int <a class="el" href="classFitPSF_1_1Source.xhtml#afc2a8d2b714c3f8d3976f8481d53c426">source_assignment_id</a>, const <a class="el" href="classCore_1_1SubPixelMap.xhtml">Core::SubPixelMap</a> *<a class="el" href="classFitPSF_1_1Source.xhtml#a0661658d593824f0bcd4d19cf3eccb80">subpix_map</a>, double left, double right, double bottom, double top, const std::string &amp;output_fname)</td></tr>
<tr class="memdesc:ab4a64d29bd02cbb476f061daec550818"><td class="mdescLeft">&#160;</td><td class="mdescRight">See <a class="el" href="classFitPSF_1_1Source.xhtml" title="An abstract base class for sources which participate in PSF fitting.">Source</a> constructor with matching arguments (except the first one).  <a href="classFitPSF_1_1LinearSource.xhtml#ab4a64d29bd02cbb476f061daec550818">More...</a><br /></td></tr>
<tr class="separator:ab4a64d29bd02cbb476f061daec550818"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab36d0b0b3027c659c90ac78906b01d85"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1LinearSource.xhtml#ab36d0b0b3027c659c90ac78906b01d85">prepare_for_fitting</a> (const std::vector&lt; std::valarray&lt; double &gt; &gt; &amp;basis_parameter_sets, Eigen::Block&lt; Eigen::MatrixXd &gt; shape_fit_integral_matrix, Eigen::VectorBlock&lt; Eigen::VectorXd &gt; shape_fit_offset, Eigen::VectorBlock&lt; Eigen::VectorXd &gt; shape_fit_background_excess)</td></tr>
<tr class="memdesc:ab36d0b0b3027c659c90ac78906b01d85"><td class="mdescLeft">&#160;</td><td class="mdescRight">A post-processing step to prepare the source for fitting, which must be called after all sources are constructed.  <a href="classFitPSF_1_1LinearSource.xhtml#ab36d0b0b3027c659c90ac78906b01d85">More...</a><br /></td></tr>
<tr class="separator:ab36d0b0b3027c659c90ac78906b01d85"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c8553d077d159cef0d0fe344bbef80a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1LinearSource.xhtml#a6c8553d077d159cef0d0fe344bbef80a">ready_to_fit</a> () const</td></tr>
<tr class="memdesc:a6c8553d077d159cef0d0fe344bbef80a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Is this source ready for PSF fitting?  <a href="classFitPSF_1_1LinearSource.xhtml#a6c8553d077d159cef0d0fe344bbef80a">More...</a><br /></td></tr>
<tr class="separator:a6c8553d077d159cef0d0fe344bbef80a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb738df71a81cd99f455691a90d66058"><td class="memTemplParams" colspan="2">template&lt;class SHAPE_FIT_OUTPUT_TYPE , class FLUX_FIT_OUTPUT_TYPE &gt; </td></tr>
<tr class="memitem:aeb738df71a81cd99f455691a90d66058"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1LinearSource.xhtml#aeb738df71a81cd99f455691a90d66058">fill_fluxfit_column</a> (const Eigen::VectorXd &amp;psf_expansion_coef, SHAPE_FIT_OUTPUT_TYPE shape_fit_output, FLUX_FIT_OUTPUT_TYPE flux_fit_output, bool sequential_shape_fit_pixels=true, bool sequential_flux_fit_pixels=true)</td></tr>
<tr class="memdesc:aeb738df71a81cd99f455691a90d66058"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the entries in the flux fitting matrix corresponding to this source.  <a href="classFitPSF_1_1LinearSource.xhtml#aeb738df71a81cd99f455691a90d66058">More...</a><br /></td></tr>
<tr class="separator:aeb738df71a81cd99f455691a90d66058"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acec66428ec0cfeaef9e608e7b551e9fd"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1LinearSource.xhtml#acec66428ec0cfeaef9e608e7b551e9fd">pixel_psf</a> (<a class="el" href="EllipticalGaussianIntegralByOrder_8h.xhtml#a9779b56088bafa3895c2f587f5e39a7f">PSF::SDKDerivative</a>=PSF::NO_DERIV) const</td></tr>
<tr class="memdesc:acec66428ec0cfeaef9e608e7b551e9fd"><td class="mdescLeft">&#160;</td><td class="mdescRight">The integral of the normalized PSF over the current pixel and its derivatives.  <a href="classFitPSF_1_1LinearSource.xhtml#acec66428ec0cfeaef9e608e7b551e9fd">More...</a><br /></td></tr>
<tr class="separator:acec66428ec0cfeaef9e608e7b551e9fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77c85b9c3c8ad1e3a723b9bba3401254"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1LinearSource.xhtml#a77c85b9c3c8ad1e3a723b9bba3401254">fit_flux</a> (const Eigen::VectorXd &amp;psf_expansion_coef)</td></tr>
<tr class="memdesc:a77c85b9c3c8ad1e3a723b9bba3401254"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fit for the flux of the source assuming the given PSF shape parameters and return the change from its previous value.  <a href="classFitPSF_1_1LinearSource.xhtml#a77c85b9c3c8ad1e3a723b9bba3401254">More...</a><br /></td></tr>
<tr class="separator:a77c85b9c3c8ad1e3a723b9bba3401254"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47d1ab85b725db040b85452e14c1c276"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1LinearSource.xhtml#a47d1ab85b725db040b85452e14c1c276">signal_to_noise</a> () const</td></tr>
<tr class="memdesc:a47d1ab85b725db040b85452e14c1c276"><td class="mdescLeft">&#160;</td><td class="mdescRight">The signal to noise ratio.  <a href="classFitPSF_1_1LinearSource.xhtml#a47d1ab85b725db040b85452e14c1c276">More...</a><br /></td></tr>
<tr class="separator:a47d1ab85b725db040b85452e14c1c276"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f6d9fdab329c23bbd9b97046004e040"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1LinearSource.xhtml#a0f6d9fdab329c23bbd9b97046004e040">~LinearSource</a> ()</td></tr>
<tr class="memdesc:a0f6d9fdab329c23bbd9b97046004e040"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clean-up allocated fitting matrices.  <a href="classFitPSF_1_1LinearSource.xhtml#a0f6d9fdab329c23bbd9b97046004e040">More...</a><br /></td></tr>
<tr class="separator:a0f6d9fdab329c23bbd9b97046004e040"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classFitPSF_1_1OverlapSource"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classFitPSF_1_1OverlapSource')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classFitPSF_1_1OverlapSource.xhtml">FitPSF::OverlapSource&lt; LinearSource, PSF::PiecewiseBicubic &gt;</a></td></tr>
<tr class="memitem:a1aea1fe935b269943de61d223e6bcc93 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a1aea1fe935b269943de61d223e6bcc93">OverlapSource</a> (const <a class="el" href="classCore_1_1SourceID.xhtml">Core::SourceID</a> &amp;<a class="el" href="classCore_1_1SourceLocation.xhtml#af3effdc0f9853600380b2deb02415223">id</a>, double x0, double y0, const <a class="el" href="classBackground_1_1Source.xhtml">Background::Source</a> &amp;<a class="el" href="classCore_1_1Source.xhtml#af4ab8cc438b35fa0eb8b2e6943cff993">background</a>, <a class="el" href="classFitPSF_1_1Image.xhtml">Image</a>&lt; <a class="el" href="classFitPSF_1_1LinearSource.xhtml">LinearSource</a> &gt; &amp;psffit_image, double alpha, int <a class="el" href="classFitPSF_1_1Source.xhtml#afc2a8d2b714c3f8d3976f8481d53c426">source_assignment_id</a>, const <a class="el" href="classCore_1_1SubPixelMap.xhtml">Core::SubPixelMap</a> *<a class="el" href="classFitPSF_1_1Source.xhtml#a0661658d593824f0bcd4d19cf3eccb80">subpix_map</a>, double max_circular_aperture, const std::string &amp;output_fname)</td></tr>
<tr class="memdesc:a1aea1fe935b269943de61d223e6bcc93 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a PSF fitting source by detecting bright pixels.  <a href="classFitPSF_1_1OverlapSource.xhtml#a1aea1fe935b269943de61d223e6bcc93">More...</a><br /></td></tr>
<tr class="separator:a1aea1fe935b269943de61d223e6bcc93 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bff3aee89ddbdcb752cf9f0abfd3718 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a1bff3aee89ddbdcb752cf9f0abfd3718">OverlapSource</a> (const <a class="el" href="classCore_1_1SourceID.xhtml">Core::SourceID</a> &amp;<a class="el" href="classCore_1_1SourceLocation.xhtml#af3effdc0f9853600380b2deb02415223">id</a>, double x0, double y0, const <a class="el" href="classBackground_1_1Source.xhtml">Background::Source</a> &amp;<a class="el" href="classCore_1_1Source.xhtml#af4ab8cc438b35fa0eb8b2e6943cff993">background</a>, <a class="el" href="classFitPSF_1_1Image.xhtml">Image</a>&lt; <a class="el" href="classFitPSF_1_1LinearSource.xhtml">LinearSource</a> &gt; &amp;psffit_image, int <a class="el" href="classFitPSF_1_1Source.xhtml#afc2a8d2b714c3f8d3976f8481d53c426">source_assignment_id</a>, const <a class="el" href="classCore_1_1SubPixelMap.xhtml">Core::SubPixelMap</a> *<a class="el" href="classFitPSF_1_1Source.xhtml#a0661658d593824f0bcd4d19cf3eccb80">subpix_map</a>, double left, double right, double bottom, double top, const std::string &amp;output_fname)</td></tr>
<tr class="memdesc:a1bff3aee89ddbdcb752cf9f0abfd3718 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">Expose Source constructor (see for argument details).  <a href="classFitPSF_1_1OverlapSource.xhtml#a1bff3aee89ddbdcb752cf9f0abfd3718">More...</a><br /></td></tr>
<tr class="separator:a1bff3aee89ddbdcb752cf9f0abfd3718 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a999ec9a2a440a5ddfb9fcbb285943b14 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a999ec9a2a440a5ddfb9fcbb285943b14">finalize_pixels</a> ()</td></tr>
<tr class="memdesc:a999ec9a2a440a5ddfb9fcbb285943b14 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">A post-processing step to be called after constructing all sources in the same image.  <a href="classFitPSF_1_1OverlapSource.xhtml#a999ec9a2a440a5ddfb9fcbb285943b14">More...</a><br /></td></tr>
<tr class="separator:a999ec9a2a440a5ddfb9fcbb285943b14 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e8b8d88c00f4b103c92d77f896bf2b8 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a3e8b8d88c00f4b103c92d77f896bf2b8">ready_to_fit</a> () const</td></tr>
<tr class="memdesc:a3e8b8d88c00f4b103c92d77f896bf2b8 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">See Source::ready_to_fit()  <a href="classFitPSF_1_1OverlapSource.xhtml#a3e8b8d88c00f4b103c92d77f896bf2b8">More...</a><br /></td></tr>
<tr class="separator:a3e8b8d88c00f4b103c92d77f896bf2b8 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8224438b7b2815e822e89b31a80b4bdb inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a8224438b7b2815e822e89b31a80b4bdb">add_overlaps</a> (const <a class="el" href="classFitPSF_1_1OverlapSource.xhtml#ac274c3d49c73a3f3dc1ef69a03a3ba7c">SourceSet</a> &amp;extra_overlaps)</td></tr>
<tr class="memdesc:a8224438b7b2815e822e89b31a80b4bdb inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds the given set of overlaps to this sources overlaps, skipping this source if found.  <a href="classFitPSF_1_1OverlapSource.xhtml#a8224438b7b2815e822e89b31a80b4bdb">More...</a><br /></td></tr>
<tr class="separator:a8224438b7b2815e822e89b31a80b4bdb inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd1667cabe3f0f53c6fa96ad2558e3b5 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classFitPSF_1_1OverlapSource.xhtml#ac274c3d49c73a3f3dc1ef69a03a3ba7c">SourceSet</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#abd1667cabe3f0f53c6fa96ad2558e3b5">overlaps</a> () const</td></tr>
<tr class="memdesc:abd1667cabe3f0f53c6fa96ad2558e3b5 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">A set of the sources which this source overlaps with on the observed image.  <a href="classFitPSF_1_1OverlapSource.xhtml#abd1667cabe3f0f53c6fa96ad2558e3b5">More...</a><br /></td></tr>
<tr class="separator:abd1667cabe3f0f53c6fa96ad2558e3b5 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe85d7a7c754ff5d3f6b6a2f40fae71e inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#abe85d7a7c754ff5d3f6b6a2f40fae71e">fill_fluxfit_column</a> (const <a class="el" href="classPSF_1_1PSF.xhtml">PSF::PSF</a> &amp;<a class="el" href="classCore_1_1Source.xhtml#a22e92fbfaecfd0ccc0baf1e7297a1ae5">psf</a>, SHAPE_FIT_OUTPUT_TYPE shape_fit_output, FLUX_FIT_OUTPUT_TYPE flux_fit_output, bool sequential_shape_fit_pixels=true, bool sequential_flux_fit_pixels=true)</td></tr>
<tr class="memdesc:abe85d7a7c754ff5d3f6b6a2f40fae71e inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the entries in the flux fitting matrix corresponding to this source.  <a href="classFitPSF_1_1OverlapSource.xhtml#abe85d7a7c754ff5d3f6b6a2f40fae71e">More...</a><br /></td></tr>
<tr class="separator:abe85d7a7c754ff5d3f6b6a2f40fae71e inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5829e894ad4e06bed1817baa8378c9e5 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a5829e894ad4e06bed1817baa8378c9e5">fill_fluxfit_column</a> (const <a class="el" href="classPSF_1_1Map.xhtml">PSF::Map</a> &amp;psf_map, SHAPE_FIT_OUTPUT_TYPE shape_fit_output, FLUX_FIT_OUTPUT_TYPE flux_fit_output, bool sequential_shape_fit_pixels=true, bool sequential_flux_fit_pixels=true)</td></tr>
<tr class="memdesc:a5829e894ad4e06bed1817baa8378c9e5 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the entries in the flux fitting matrix corresponding to this source assuming the given PSF map.  <a href="classFitPSF_1_1OverlapSource.xhtml#a5829e894ad4e06bed1817baa8378c9e5">More...</a><br /></td></tr>
<tr class="separator:a5829e894ad4e06bed1817baa8378c9e5 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a687b642c3202827f0b370bdf8e29ab41 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a687b642c3202827f0b370bdf8e29ab41">fit_flux</a> (const <a class="el" href="classPSF_1_1PSF.xhtml">PSF::PSF</a> &amp;<a class="el" href="classCore_1_1Source.xhtml#a22e92fbfaecfd0ccc0baf1e7297a1ae5">psf</a>)</td></tr>
<tr class="memdesc:a687b642c3202827f0b370bdf8e29ab41 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the flux of the source to its PSF fitted value returning the change.  <a href="classFitPSF_1_1OverlapSource.xhtml#a687b642c3202827f0b370bdf8e29ab41">More...</a><br /></td></tr>
<tr class="separator:a687b642c3202827f0b370bdf8e29ab41 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abfe9a564dfd3256356b9fc65f97fccbf inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top">virtual double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#abfe9a564dfd3256356b9fc65f97fccbf">pixel_psf</a> (const <a class="el" href="classFitPSF_1_1Pixel.xhtml">Pixel</a>&lt; <a class="el" href="classFitPSF_1_1LinearSource.xhtml">LinearSource</a> &gt; *pixel, const <a class="el" href="classPSF_1_1PSF.xhtml">PSF::PSF</a> &amp;<a class="el" href="classCore_1_1Source.xhtml#a22e92fbfaecfd0ccc0baf1e7297a1ae5">psf</a>) const</td></tr>
<tr class="memdesc:abfe9a564dfd3256356b9fc65f97fccbf inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the integral of the PSF times sub-pixel map over the given pixel.  <a href="classFitPSF_1_1OverlapSource.xhtml#abfe9a564dfd3256356b9fc65f97fccbf">More...</a><br /></td></tr>
<tr class="separator:abfe9a564dfd3256356b9fc65f97fccbf inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae46361629d2741bf99d0e76c54b6094 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#aae46361629d2741bf99d0e76c54b6094">pixel_psf</a> (const <a class="el" href="classPSF_1_1PSF.xhtml">PSF::PSF</a> &amp;<a class="el" href="classCore_1_1Source.xhtml#a22e92fbfaecfd0ccc0baf1e7297a1ae5">psf</a>, <a class="el" href="EllipticalGaussianIntegralByOrder_8h.xhtml#a9779b56088bafa3895c2f587f5e39a7f">PSF::SDKDerivative</a> deriv=PSF::NO_DERIV) const</td></tr>
<tr class="memdesc:aae46361629d2741bf99d0e76c54b6094 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">The integral of the normalized PSF over the current pixel and its derivatives.  <a href="classFitPSF_1_1OverlapSource.xhtml#aae46361629d2741bf99d0e76c54b6094">More...</a><br /></td></tr>
<tr class="separator:aae46361629d2741bf99d0e76c54b6094 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6bc119ab7e48b44c95d37816bd0e7bbc inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a74395e6620642d3d5c0384c4352f39d6">PixelList</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a6bc119ab7e48b44c95d37816bd0e7bbc">pixels</a> () const</td></tr>
<tr class="memdesc:a6bc119ab7e48b44c95d37816bd0e7bbc inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a const reference to the list of image pixels assigned to this source.  <a href="classFitPSF_1_1OverlapSource.xhtml#a6bc119ab7e48b44c95d37816bd0e7bbc">More...</a><br /></td></tr>
<tr class="separator:a6bc119ab7e48b44c95d37816bd0e7bbc inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7037c3fca7f8f5fdcb7dc2d71a4396a4 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#ab81e200d21fe3cf94e5763aa6a5aac6d">PixelIter</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a7037c3fca7f8f5fdcb7dc2d71a4396a4">shape_fit_pixels_begin</a> ()</td></tr>
<tr class="memdesc:a7037c3fca7f8f5fdcb7dc2d71a4396a4 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterator over only shape fitting pixels, pointing to the first pixel included in shape fitting.  <a href="classFitPSF_1_1OverlapSource.xhtml#a7037c3fca7f8f5fdcb7dc2d71a4396a4">More...</a><br /></td></tr>
<tr class="separator:a7037c3fca7f8f5fdcb7dc2d71a4396a4 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf6d810dd7cc73459ce3072e95849126 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#ab38010e63b52c195c965c42e3d34d957">ConstPixelIter</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#aaf6d810dd7cc73459ce3072e95849126">shape_fit_pixels_begin</a> () const</td></tr>
<tr class="memdesc:aaf6d810dd7cc73459ce3072e95849126 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constant version of <a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a7037c3fca7f8f5fdcb7dc2d71a4396a4" title="Iterator over only shape fitting pixels, pointing to the first pixel included in shape fitting.">shape_fit_pixels_begin()</a>.  <a href="classFitPSF_1_1OverlapSource.xhtml#aaf6d810dd7cc73459ce3072e95849126">More...</a><br /></td></tr>
<tr class="separator:aaf6d810dd7cc73459ce3072e95849126 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0288b1685c5f20e634975bfa312e145e inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#ab81e200d21fe3cf94e5763aa6a5aac6d">PixelIter</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a0288b1685c5f20e634975bfa312e145e">shape_fit_pixels_end</a> ()</td></tr>
<tr class="memdesc:a0288b1685c5f20e634975bfa312e145e inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterator over only shape fitting pixels, pointing to one past the last pixel included in shape fitting.  <a href="classFitPSF_1_1OverlapSource.xhtml#a0288b1685c5f20e634975bfa312e145e">More...</a><br /></td></tr>
<tr class="separator:a0288b1685c5f20e634975bfa312e145e inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6eb0578c39393df0df60ea2717ac53d6 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#ab38010e63b52c195c965c42e3d34d957">ConstPixelIter</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a6eb0578c39393df0df60ea2717ac53d6">shape_fit_pixels_end</a> () const</td></tr>
<tr class="memdesc:a6eb0578c39393df0df60ea2717ac53d6 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constant version of <a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a0288b1685c5f20e634975bfa312e145e" title="Iterator over only shape fitting pixels, pointing to one past the last pixel included in shape fittin...">shape_fit_pixels_end()</a>.  <a href="classFitPSF_1_1OverlapSource.xhtml#a6eb0578c39393df0df60ea2717ac53d6">More...</a><br /></td></tr>
<tr class="separator:a6eb0578c39393df0df60ea2717ac53d6 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ab8fd282647b69d38c4bac5b963321a inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#ab81e200d21fe3cf94e5763aa6a5aac6d">PixelIter</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a6ab8fd282647b69d38c4bac5b963321a">flux_fit_pixels_begin</a> ()</td></tr>
<tr class="memdesc:a6ab8fd282647b69d38c4bac5b963321a inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterator over flux but not shape fitting pixels, pointing to the first pixel included in flux but not shape fitting.  <a href="classFitPSF_1_1OverlapSource.xhtml#a6ab8fd282647b69d38c4bac5b963321a">More...</a><br /></td></tr>
<tr class="separator:a6ab8fd282647b69d38c4bac5b963321a inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af458f3983dc35d1182c7bbd0913d2fc9 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#ab38010e63b52c195c965c42e3d34d957">ConstPixelIter</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#af458f3983dc35d1182c7bbd0913d2fc9">flux_fit_pixels_begin</a> () const</td></tr>
<tr class="memdesc:af458f3983dc35d1182c7bbd0913d2fc9 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constant version of <a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a6ab8fd282647b69d38c4bac5b963321a" title="Iterator over flux but not shape fitting pixels, pointing to the first pixel included in flux but not...">flux_fit_pixels_begin()</a>.  <a href="classFitPSF_1_1OverlapSource.xhtml#af458f3983dc35d1182c7bbd0913d2fc9">More...</a><br /></td></tr>
<tr class="separator:af458f3983dc35d1182c7bbd0913d2fc9 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37e5e0e2ef1261cebeb2491f6518e8ac inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#ab81e200d21fe3cf94e5763aa6a5aac6d">PixelIter</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a37e5e0e2ef1261cebeb2491f6518e8ac">flux_fit_pixels_end</a> ()</td></tr>
<tr class="memdesc:a37e5e0e2ef1261cebeb2491f6518e8ac inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterator over flux but not shape fitting pixels, pointing to one past the last pixel included in flux but not shape fitting.  <a href="classFitPSF_1_1OverlapSource.xhtml#a37e5e0e2ef1261cebeb2491f6518e8ac">More...</a><br /></td></tr>
<tr class="separator:a37e5e0e2ef1261cebeb2491f6518e8ac inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35c92724957f92eab376133480905480 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#ab38010e63b52c195c965c42e3d34d957">ConstPixelIter</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a35c92724957f92eab376133480905480">flux_fit_pixels_end</a> () const</td></tr>
<tr class="memdesc:a35c92724957f92eab376133480905480 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constant version of <a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a37e5e0e2ef1261cebeb2491f6518e8ac" title="Iterator over flux but not shape fitting pixels, pointing to one past the last pixel included in flux...">flux_fit_pixels_end()</a>.  <a href="classFitPSF_1_1OverlapSource.xhtml#a35c92724957f92eab376133480905480">More...</a><br /></td></tr>
<tr class="separator:a35c92724957f92eab376133480905480 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2f413110b394f613ce49b274a2173b2 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#ad2f413110b394f613ce49b274a2173b2">pixel_count</a> () const</td></tr>
<tr class="memdesc:ad2f413110b394f613ce49b274a2173b2 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">The number of pixels assigned to this source.  <a href="classFitPSF_1_1OverlapSource.xhtml#ad2f413110b394f613ce49b274a2173b2">More...</a><br /></td></tr>
<tr class="separator:ad2f413110b394f613ce49b274a2173b2 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad73ba67ec756710d6fd8c7f7d489e3a8 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top">unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#ad73ba67ec756710d6fd8c7f7d489e3a8">saturated_pixel_count</a> () const</td></tr>
<tr class="memdesc:ad73ba67ec756710d6fd8c7f7d489e3a8 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">See Source::saturated_pixel_count()  <a href="classFitPSF_1_1OverlapSource.xhtml#ad73ba67ec756710d6fd8c7f7d489e3a8">More...</a><br /></td></tr>
<tr class="separator:ad73ba67ec756710d6fd8c7f7d489e3a8 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a114dc6c243fa5b59769eb39dd897d045 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a114dc6c243fa5b59769eb39dd897d045">restart_pixel_iteration</a> ()</td></tr>
<tr class="memdesc:a114dc6c243fa5b59769eb39dd897d045 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">Restarts the iteration over pixels from the beginning.  <a href="classFitPSF_1_1OverlapSource.xhtml#a114dc6c243fa5b59769eb39dd897d045">More...</a><br /></td></tr>
<tr class="separator:a114dc6c243fa5b59769eb39dd897d045 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af635dcf216c6ebf84a6e0ba76fc46eec inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#af635dcf216c6ebf84a6e0ba76fc46eec">next_pixel</a> ()</td></tr>
<tr class="memdesc:af635dcf216c6ebf84a6e0ba76fc46eec inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">Advance to the next pixel of the source returning true if it is not past the last pixel.  <a href="classFitPSF_1_1OverlapSource.xhtml#af635dcf216c6ebf84a6e0ba76fc46eec">More...</a><br /></td></tr>
<tr class="separator:af635dcf216c6ebf84a6e0ba76fc46eec inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af63006072ad04aae4ec7229e62b64c32 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#af63006072ad04aae4ec7229e62b64c32">shape_fit_pixel_count</a> () const</td></tr>
<tr class="memdesc:af63006072ad04aae4ec7229e62b64c32 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">The number of pixels belonging to this source suitable for PSF shape fitting.  <a href="classFitPSF_1_1OverlapSource.xhtml#af63006072ad04aae4ec7229e62b64c32">More...</a><br /></td></tr>
<tr class="separator:af63006072ad04aae4ec7229e62b64c32 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adac24e7839764ab9d109fef9aa12ca9a inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#adac24e7839764ab9d109fef9aa12ca9a">flux_fit_pixel_count</a> () const</td></tr>
<tr class="memdesc:adac24e7839764ab9d109fef9aa12ca9a inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">The number of pixels belonging to this source suitable for PSF flux fitting.  <a href="classFitPSF_1_1OverlapSource.xhtml#adac24e7839764ab9d109fef9aa12ca9a">More...</a><br /></td></tr>
<tr class="separator:adac24e7839764ab9d109fef9aa12ca9a inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1c3bd744a12307ee75fe5227a4047c0 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#ae1c3bd744a12307ee75fe5227a4047c0">pixel_was_excluded</a> (const <a class="el" href="classFitPSF_1_1Pixel.xhtml">Pixel</a>&lt; <a class="el" href="classFitPSF_1_1LinearSource.xhtml">LinearSource</a> &gt; *pixel, bool from_shape_fit, bool from_flux_fit)</td></tr>
<tr class="memdesc:ae1c3bd744a12307ee75fe5227a4047c0 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">Update the source to note that one of its pixels is now excluded from the fit.  <a href="classFitPSF_1_1OverlapSource.xhtml#ae1c3bd744a12307ee75fe5227a4047c0">More...</a><br /></td></tr>
<tr class="separator:ae1c3bd744a12307ee75fe5227a4047c0 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2772a1942f82279cf4f8e78f3ea4be0e inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a2772a1942f82279cf4f8e78f3ea4be0e">exclude_from_shape_fit</a> ()</td></tr>
<tr class="memdesc:a2772a1942f82279cf4f8e78f3ea4be0e inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">Let the source know it was discarded from shape fitting.  <a href="classFitPSF_1_1OverlapSource.xhtml#a2772a1942f82279cf4f8e78f3ea4be0e">More...</a><br /></td></tr>
<tr class="separator:a2772a1942f82279cf4f8e78f3ea4be0e inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a032cb8c73a48ce1aaef159c45afa2160 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a032cb8c73a48ce1aaef159c45afa2160">exclude_from_flux_fit</a> ()</td></tr>
<tr class="memdesc:a032cb8c73a48ce1aaef159c45afa2160 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">Let the source know it was discarded from flux fitting.  <a href="classFitPSF_1_1OverlapSource.xhtml#a032cb8c73a48ce1aaef159c45afa2160">More...</a><br /></td></tr>
<tr class="separator:a032cb8c73a48ce1aaef159c45afa2160 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa1be8727bb6c3cbaeadb63de7ce248d9 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#aa1be8727bb6c3cbaeadb63de7ce248d9">replace_pixels</a> (ITERATOR_TYPE first, ITERATOR_TYPE past_last)</td></tr>
<tr class="memdesc:aa1be8727bb6c3cbaeadb63de7ce248d9 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replace the source pixels.  <a href="classFitPSF_1_1OverlapSource.xhtml#aa1be8727bb6c3cbaeadb63de7ce248d9">More...</a><br /></td></tr>
<tr class="separator:aa1be8727bb6c3cbaeadb63de7ce248d9 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61a72584ab54459a2f4aefa7281a5898 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top"><a class="el" href="Core_2Typedefs_8h.xhtml#a0284392b810d69336f74bd704daa5de8">Core::PhotometryFlag</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a61a72584ab54459a2f4aefa7281a5898">current_pixel_flag</a> () const</td></tr>
<tr class="memdesc:a61a72584ab54459a2f4aefa7281a5898 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">The quality flag for the current pixel.  <a href="classFitPSF_1_1OverlapSource.xhtml#a61a72584ab54459a2f4aefa7281a5898">More...</a><br /></td></tr>
<tr class="separator:a61a72584ab54459a2f4aefa7281a5898 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23c165b70ffc265dbb63397faab7fc83 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classFitPSF_1_1Pixel.xhtml">Pixel</a>&lt; <a class="el" href="classFitPSF_1_1LinearSource.xhtml">LinearSource</a> &gt; *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a23c165b70ffc265dbb63397faab7fc83">current_pixel</a> ()</td></tr>
<tr class="memdesc:a23c165b70ffc265dbb63397faab7fc83 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">The current pixel.  <a href="classFitPSF_1_1OverlapSource.xhtml#a23c165b70ffc265dbb63397faab7fc83">More...</a><br /></td></tr>
<tr class="separator:a23c165b70ffc265dbb63397faab7fc83 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd09e4afe10877ea7d409bd58c16e3ce inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classCore_1_1Flux.xhtml">Core::Flux</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#acd09e4afe10877ea7d409bd58c16e3ce">calculate_mask_flux</a> (const <a class="el" href="classPSF_1_1PSF.xhtml">PSF::PSF</a> &amp;<a class="el" href="classCore_1_1Source.xhtml#a22e92fbfaecfd0ccc0baf1e7297a1ae5">psf</a>)</td></tr>
<tr class="memdesc:acd09e4afe10877ea7d409bd58c16e3ce inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">See Source::calculate_mask_flux()  <a href="classFitPSF_1_1OverlapSource.xhtml#acd09e4afe10877ea7d409bd58c16e3ce">More...</a><br /></td></tr>
<tr class="separator:acd09e4afe10877ea7d409bd58c16e3ce inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fe3355bdd764dd25a2403162b8c3d40 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a2fe3355bdd764dd25a2403162b8c3d40">merit</a> () const</td></tr>
<tr class="memdesc:a2fe3355bdd764dd25a2403162b8c3d40 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">See Source::merit()  <a href="classFitPSF_1_1OverlapSource.xhtml#a2fe3355bdd764dd25a2403162b8c3d40">More...</a><br /></td></tr>
<tr class="separator:a2fe3355bdd764dd25a2403162b8c3d40 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61bad2a4d0056add37ac3c9db0819725 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top"><a class="el" href="Core_2Typedefs_8h.xhtml#a0284392b810d69336f74bd704daa5de8">Core::PhotometryFlag</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a61bad2a4d0056add37ac3c9db0819725">quality_flag</a> () const</td></tr>
<tr class="memdesc:a61bad2a4d0056add37ac3c9db0819725 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">The worst quality flag for any pixel assigned to the source.  <a href="classFitPSF_1_1OverlapSource.xhtml#a61bad2a4d0056add37ac3c9db0819725">More...</a><br /></td></tr>
<tr class="separator:a61bad2a4d0056add37ac3c9db0819725 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6881b7053dc1e866a806f35cc8201a63 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a6881b7053dc1e866a806f35cc8201a63">aperture</a> () const</td></tr>
<tr class="memdesc:a6881b7053dc1e866a806f35cc8201a63 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">The smallest circular aperture size that if centered on the source position contains all pixels assigned to the source.  <a href="classFitPSF_1_1OverlapSource.xhtml#a6881b7053dc1e866a806f35cc8201a63">More...</a><br /></td></tr>
<tr class="separator:a6881b7053dc1e866a806f35cc8201a63 inherit pub_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classFitPSF_1_1Source"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classFitPSF_1_1Source')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classFitPSF_1_1Source.xhtml">FitPSF::Source&lt; PSF_TYPE &gt;</a></td></tr>
<tr class="memitem:ad81ba34ce1bb26a76a78750cc70dc7a7 inherit pub_methods_classFitPSF_1_1Source"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1Source.xhtml#ad81ba34ce1bb26a76a78750cc70dc7a7">Source</a> (const <a class="el" href="classCore_1_1SourceID.xhtml">Core::SourceID</a> &amp;<a class="el" href="classCore_1_1SourceLocation.xhtml#af3effdc0f9853600380b2deb02415223">id</a>, double x0, double y0, double gain, const <a class="el" href="classBackground_1_1Source.xhtml">Background::Source</a> &amp;<a class="el" href="classCore_1_1Source.xhtml#af4ab8cc438b35fa0eb8b2e6943cff993">background</a>, int <a class="el" href="classFitPSF_1_1Source.xhtml#afc2a8d2b714c3f8d3976f8481d53c426">source_assignment_id</a>, const <a class="el" href="classCore_1_1SubPixelMap.xhtml">Core::SubPixelMap</a> *<a class="el" href="classFitPSF_1_1Source.xhtml#a0661658d593824f0bcd4d19cf3eccb80">subpix_map</a>, unsigned <a class="el" href="classFitPSF_1_1Source.xhtml#a3d0d0eb927dc51fe88c1aa4381a6e2e1">image_id</a>, const std::string &amp;output_fname)</td></tr>
<tr class="memdesc:ad81ba34ce1bb26a76a78750cc70dc7a7 inherit pub_methods_classFitPSF_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a PSF fitting source.  <a href="classFitPSF_1_1Source.xhtml#ad81ba34ce1bb26a76a78750cc70dc7a7">More...</a><br /></td></tr>
<tr class="separator:ad81ba34ce1bb26a76a78750cc70dc7a7 inherit pub_methods_classFitPSF_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a094f74d4ca1872d25d0b81ea06cb05 inherit pub_methods_classFitPSF_1_1Source"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1Source.xhtml#a3a094f74d4ca1872d25d0b81ea06cb05">background_electrons</a> () const</td></tr>
<tr class="memdesc:a3a094f74d4ca1872d25d0b81ea06cb05 inherit pub_methods_classFitPSF_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">The background under the source in electrons.  <a href="classFitPSF_1_1Source.xhtml#a3a094f74d4ca1872d25d0b81ea06cb05">More...</a><br /></td></tr>
<tr class="separator:a3a094f74d4ca1872d25d0b81ea06cb05 inherit pub_methods_classFitPSF_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33653767e3a9ac908dcfcfbb505e3b2a inherit pub_methods_classFitPSF_1_1Source"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1Source.xhtml#a33653767e3a9ac908dcfcfbb505e3b2a">set_background_electrons</a> (double value)</td></tr>
<tr class="memdesc:a33653767e3a9ac908dcfcfbb505e3b2a inherit pub_methods_classFitPSF_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the background under the source in electrons.  <a href="classFitPSF_1_1Source.xhtml#a33653767e3a9ac908dcfcfbb505e3b2a">More...</a><br /></td></tr>
<tr class="separator:a33653767e3a9ac908dcfcfbb505e3b2a inherit pub_methods_classFitPSF_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6632290150c17bc71077fa3dde5923d0 inherit pub_methods_classFitPSF_1_1Source"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1Source.xhtml#a6632290150c17bc71077fa3dde5923d0">background_electrons_variance</a> () const</td></tr>
<tr class="memdesc:a6632290150c17bc71077fa3dde5923d0 inherit pub_methods_classFitPSF_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">The variance of the background under the source in electrons squared.  <a href="classFitPSF_1_1Source.xhtml#a6632290150c17bc71077fa3dde5923d0">More...</a><br /></td></tr>
<tr class="separator:a6632290150c17bc71077fa3dde5923d0 inherit pub_methods_classFitPSF_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99ae6e12f5f92f528b22eae9b4e8714b inherit pub_methods_classFitPSF_1_1Source"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1Source.xhtml#a99ae6e12f5f92f528b22eae9b4e8714b">set_background_electrons_variance</a> (double value)</td></tr>
<tr class="memdesc:a99ae6e12f5f92f528b22eae9b4e8714b inherit pub_methods_classFitPSF_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">A reference to the variance of the background under the source in electrons squared.  <a href="classFitPSF_1_1Source.xhtml#a99ae6e12f5f92f528b22eae9b4e8714b">More...</a><br /></td></tr>
<tr class="separator:a99ae6e12f5f92f528b22eae9b4e8714b inherit pub_methods_classFitPSF_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2b39a7b53cbb6de512aadc1513f076a inherit pub_methods_classFitPSF_1_1Source"><td class="memItemLeft" align="right" valign="top">unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1Source.xhtml#ad2b39a7b53cbb6de512aadc1513f076a">background_pixels</a> () const</td></tr>
<tr class="memdesc:ad2b39a7b53cbb6de512aadc1513f076a inherit pub_methods_classFitPSF_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">The number of pixels used when measuring the source background.  <a href="classFitPSF_1_1Source.xhtml#ad2b39a7b53cbb6de512aadc1513f076a">More...</a><br /></td></tr>
<tr class="separator:ad2b39a7b53cbb6de512aadc1513f076a inherit pub_methods_classFitPSF_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a897f5db8b602546167bb308aaf9c5fb7 inherit pub_methods_classFitPSF_1_1Source"><td class="memItemLeft" align="right" valign="top">unsigned &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1Source.xhtml#a897f5db8b602546167bb308aaf9c5fb7">background_pixels</a> ()</td></tr>
<tr class="memdesc:a897f5db8b602546167bb308aaf9c5fb7 inherit pub_methods_classFitPSF_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">A reference to the number of pixels used when measuring the source background.  <a href="classFitPSF_1_1Source.xhtml#a897f5db8b602546167bb308aaf9c5fb7">More...</a><br /></td></tr>
<tr class="separator:a897f5db8b602546167bb308aaf9c5fb7 inherit pub_methods_classFitPSF_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c2341ee016cd137ae662261704465b2 inherit pub_methods_classFitPSF_1_1Source"><td class="memItemLeft" align="right" valign="top">virtual const <a class="el" href="classCore_1_1Flux.xhtml">Core::Flux</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1Source.xhtml#a6c2341ee016cd137ae662261704465b2">mask_flux</a> () const</td></tr>
<tr class="memdesc:a6c2341ee016cd137ae662261704465b2 inherit pub_methods_classFitPSF_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">See __mask_flux (filled in while fitting).  <a href="classFitPSF_1_1Source.xhtml#a6c2341ee016cd137ae662261704465b2">More...</a><br /></td></tr>
<tr class="separator:a6c2341ee016cd137ae662261704465b2 inherit pub_methods_classFitPSF_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1698dcf0ab31a7549f6e123706611df inherit pub_methods_classFitPSF_1_1Source"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classCore_1_1Flux.xhtml">Core::Flux</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1Source.xhtml#ab1698dcf0ab31a7549f6e123706611df">mask_flux</a> ()</td></tr>
<tr class="memdesc:ab1698dcf0ab31a7549f6e123706611df inherit pub_methods_classFitPSF_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">See __mask_flux (filled in while fitting).  <a href="classFitPSF_1_1Source.xhtml#ab1698dcf0ab31a7549f6e123706611df">More...</a><br /></td></tr>
<tr class="separator:ab1698dcf0ab31a7549f6e123706611df inherit pub_methods_classFitPSF_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a408773f2626607a233caa4fc4cda7942 inherit pub_methods_classFitPSF_1_1Source"><td class="memItemLeft" align="right" valign="top">virtual double &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1Source.xhtml#a408773f2626607a233caa4fc4cda7942">chi2</a> ()</td></tr>
<tr class="memdesc:a408773f2626607a233caa4fc4cda7942 inherit pub_methods_classFitPSF_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">The \(\chi^2\) of the last scaling fit.  <a href="classFitPSF_1_1Source.xhtml#a408773f2626607a233caa4fc4cda7942">More...</a><br /></td></tr>
<tr class="separator:a408773f2626607a233caa4fc4cda7942 inherit pub_methods_classFitPSF_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a5509962948ad343b0413026bc97450 inherit pub_methods_classFitPSF_1_1Source"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1Source.xhtml#a6a5509962948ad343b0413026bc97450">reduced_chi2</a> () const</td></tr>
<tr class="memdesc:a6a5509962948ad343b0413026bc97450 inherit pub_methods_classFitPSF_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">The reduced \(\chi^2\) of the last scaling fit.  <a href="classFitPSF_1_1Source.xhtml#a6a5509962948ad343b0413026bc97450">More...</a><br /></td></tr>
<tr class="separator:a6a5509962948ad343b0413026bc97450 inherit pub_methods_classFitPSF_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3beb820f4009632390aab590166fecd0 inherit pub_methods_classFitPSF_1_1Source"><td class="memItemLeft" align="right" valign="top">virtual double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1Source.xhtml#a3beb820f4009632390aab590166fecd0">chi2</a> () const</td></tr>
<tr class="memdesc:a3beb820f4009632390aab590166fecd0 inherit pub_methods_classFitPSF_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read-only \(\chi^2\) of the last scaling fit.  <a href="classFitPSF_1_1Source.xhtml#a3beb820f4009632390aab590166fecd0">More...</a><br /></td></tr>
<tr class="separator:a3beb820f4009632390aab590166fecd0 inherit pub_methods_classFitPSF_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc2a8d2b714c3f8d3976f8481d53c426 inherit pub_methods_classFitPSF_1_1Source"><td class="memItemLeft" align="right" valign="top">unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1Source.xhtml#afc2a8d2b714c3f8d3976f8481d53c426">source_assignment_id</a> () const</td></tr>
<tr class="memdesc:afc2a8d2b714c3f8d3976f8481d53c426 inherit pub_methods_classFitPSF_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">The id the source was assigned in the source_assignment array.  <a href="classFitPSF_1_1Source.xhtml#afc2a8d2b714c3f8d3976f8481d53c426">More...</a><br /></td></tr>
<tr class="separator:afc2a8d2b714c3f8d3976f8481d53c426 inherit pub_methods_classFitPSF_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0661658d593824f0bcd4d19cf3eccb80 inherit pub_methods_classFitPSF_1_1Source"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classCore_1_1SubPixelMap.xhtml">Core::SubPixelMap</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1Source.xhtml#a0661658d593824f0bcd4d19cf3eccb80">subpix_map</a> () const</td></tr>
<tr class="memdesc:a0661658d593824f0bcd4d19cf3eccb80 inherit pub_methods_classFitPSF_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">Teh sub-pixel map supplied on input.  <a href="classFitPSF_1_1Source.xhtml#a0661658d593824f0bcd4d19cf3eccb80">More...</a><br /></td></tr>
<tr class="separator:a0661658d593824f0bcd4d19cf3eccb80 inherit pub_methods_classFitPSF_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a126796ab71dffb5f62d62b4d1c45d913 inherit pub_methods_classFitPSF_1_1Source"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1Source.xhtml#a126796ab71dffb5f62d62b4d1c45d913">set_nonpoint</a> ()</td></tr>
<tr class="memdesc:a126796ab71dffb5f62d62b4d1c45d913 inherit pub_methods_classFitPSF_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reject the source as non-point.  <a href="classFitPSF_1_1Source.xhtml#a126796ab71dffb5f62d62b4d1c45d913">More...</a><br /></td></tr>
<tr class="separator:a126796ab71dffb5f62d62b4d1c45d913 inherit pub_methods_classFitPSF_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aadaf6a2a4f759c3e1f513be29ec8f5af inherit pub_methods_classFitPSF_1_1Source"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1Source.xhtml#aadaf6a2a4f759c3e1f513be29ec8f5af">is_nonpoint</a> () const</td></tr>
<tr class="memdesc:aadaf6a2a4f759c3e1f513be29ec8f5af inherit pub_methods_classFitPSF_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">Was the source previously rejected as non-point.  <a href="classFitPSF_1_1Source.xhtml#aadaf6a2a4f759c3e1f513be29ec8f5af">More...</a><br /></td></tr>
<tr class="separator:aadaf6a2a4f759c3e1f513be29ec8f5af inherit pub_methods_classFitPSF_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec7e039e6520031684b724dea4f9e7de inherit pub_methods_classFitPSF_1_1Source"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__FitPSF.xhtml#gaf322f512b63bfe334b817be88e6c7820">SourceDropReason</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1Source.xhtml#aec7e039e6520031684b724dea4f9e7de">drop_reason</a> () const</td></tr>
<tr class="memdesc:aec7e039e6520031684b724dea4f9e7de inherit pub_methods_classFitPSF_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">The reason the source was dropped, if it was.  <a href="classFitPSF_1_1Source.xhtml#aec7e039e6520031684b724dea4f9e7de">More...</a><br /></td></tr>
<tr class="separator:aec7e039e6520031684b724dea4f9e7de inherit pub_methods_classFitPSF_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e3d2abe12b66a4e6b60a29c1e898885 inherit pub_methods_classFitPSF_1_1Source"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1Source.xhtml#a9e3d2abe12b66a4e6b60a29c1e898885">drop</a> (<a class="el" href="group__FitPSF.xhtml#gaf322f512b63bfe334b817be88e6c7820">SourceDropReason</a> reason)</td></tr>
<tr class="memdesc:a9e3d2abe12b66a4e6b60a29c1e898885 inherit pub_methods_classFitPSF_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">Drop this source for the given reason.  <a href="classFitPSF_1_1Source.xhtml#a9e3d2abe12b66a4e6b60a29c1e898885">More...</a><br /></td></tr>
<tr class="separator:a9e3d2abe12b66a4e6b60a29c1e898885 inherit pub_methods_classFitPSF_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d0d0eb927dc51fe88c1aa4381a6e2e1 inherit pub_methods_classFitPSF_1_1Source"><td class="memItemLeft" align="right" valign="top">unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1Source.xhtml#a3d0d0eb927dc51fe88c1aa4381a6e2e1">image_id</a> () const</td></tr>
<tr class="memdesc:a3d0d0eb927dc51fe88c1aa4381a6e2e1 inherit pub_methods_classFitPSF_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">The filename of the image from which this source was extracted.  <a href="classFitPSF_1_1Source.xhtml#a3d0d0eb927dc51fe88c1aa4381a6e2e1">More...</a><br /></td></tr>
<tr class="separator:a3d0d0eb927dc51fe88c1aa4381a6e2e1 inherit pub_methods_classFitPSF_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74033213df3938dfa2964cfef4d3dd5d inherit pub_methods_classFitPSF_1_1Source"><td class="memItemLeft" align="right" valign="top">const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1Source.xhtml#a74033213df3938dfa2964cfef4d3dd5d">output_filename</a> () const</td></tr>
<tr class="memdesc:a74033213df3938dfa2964cfef4d3dd5d inherit pub_methods_classFitPSF_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">The output filename where this source should be saved.  <a href="classFitPSF_1_1Source.xhtml#a74033213df3938dfa2964cfef4d3dd5d">More...</a><br /></td></tr>
<tr class="separator:a74033213df3938dfa2964cfef4d3dd5d inherit pub_methods_classFitPSF_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2501d97ddcd0de6a52e2b65764e879a1 inherit pub_methods_classFitPSF_1_1Source"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1Source.xhtml#a2501d97ddcd0de6a52e2b65764e879a1">psf_amplitude</a> () const</td></tr>
<tr class="memdesc:a2501d97ddcd0de6a52e2b65764e879a1 inherit pub_methods_classFitPSF_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">The amplitude of the PSF.  <a href="classFitPSF_1_1Source.xhtml#a2501d97ddcd0de6a52e2b65764e879a1">More...</a><br /></td></tr>
<tr class="separator:a2501d97ddcd0de6a52e2b65764e879a1 inherit pub_methods_classFitPSF_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5681699a6b758f1911a3c56eb70bd7d inherit pub_methods_classFitPSF_1_1Source"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1Source.xhtml#aa5681699a6b758f1911a3c56eb70bd7d">set_psf_amplitude</a> (double value)</td></tr>
<tr class="memdesc:aa5681699a6b758f1911a3c56eb70bd7d inherit pub_methods_classFitPSF_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the amplitude of the PSF to the given value.  <a href="classFitPSF_1_1Source.xhtml#aa5681699a6b758f1911a3c56eb70bd7d">More...</a><br /></td></tr>
<tr class="separator:aa5681699a6b758f1911a3c56eb70bd7d inherit pub_methods_classFitPSF_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb38807b603ea3e25994e7688ff890da inherit pub_methods_classFitPSF_1_1Source"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1Source.xhtml#adb38807b603ea3e25994e7688ff890da">set_sources_in_group</a> (unsigned source_count)</td></tr>
<tr class="memdesc:adb38807b603ea3e25994e7688ff890da inherit pub_methods_classFitPSF_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set how many sources were in the same group as this one when amplitude was fit.  <a href="classFitPSF_1_1Source.xhtml#adb38807b603ea3e25994e7688ff890da">More...</a><br /></td></tr>
<tr class="separator:adb38807b603ea3e25994e7688ff890da inherit pub_methods_classFitPSF_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8172c1afdac11dc12f3ed692a8a4e35f inherit pub_methods_classFitPSF_1_1Source"><td class="memItemLeft" align="right" valign="top">Eigen::VectorXd &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1Source.xhtml#a8172c1afdac11dc12f3ed692a8a4e35f">expansion_terms</a> ()</td></tr>
<tr class="memdesc:a8172c1afdac11dc12f3ed692a8a4e35f inherit pub_methods_classFitPSF_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reference to the values of the expanion terms the PSF of the source depends on.  <a href="classFitPSF_1_1Source.xhtml#a8172c1afdac11dc12f3ed692a8a4e35f">More...</a><br /></td></tr>
<tr class="separator:a8172c1afdac11dc12f3ed692a8a4e35f inherit pub_methods_classFitPSF_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec51f7629f0b0442c4f49001a3f62453 inherit pub_methods_classFitPSF_1_1Source"><td class="memItemLeft" align="right" valign="top">const Eigen::VectorXd &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1Source.xhtml#aec51f7629f0b0442c4f49001a3f62453">expansion_terms</a> () const</td></tr>
<tr class="memdesc:aec51f7629f0b0442c4f49001a3f62453 inherit pub_methods_classFitPSF_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">The values of the expanion terms the PSF of the source depends on.  <a href="classFitPSF_1_1Source.xhtml#aec51f7629f0b0442c4f49001a3f62453">More...</a><br /></td></tr>
<tr class="separator:aec51f7629f0b0442c4f49001a3f62453 inherit pub_methods_classFitPSF_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a236006261bc946dce216c3296a5d6fc1 inherit pub_methods_classFitPSF_1_1Source"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1Source.xhtml#a236006261bc946dce216c3296a5d6fc1">fill_psf_params</a> (const Eigen::VectorXd &amp;expansion_coef, Eigen::VectorXd &amp;psf_params)</td></tr>
<tr class="memdesc:a236006261bc946dce216c3296a5d6fc1 inherit pub_methods_classFitPSF_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fill a vector with the PSF parameters for this source given a set of polynomial expansion coefficients.  <a href="classFitPSF_1_1Source.xhtml#a236006261bc946dce216c3296a5d6fc1">More...</a><br /></td></tr>
<tr class="separator:a236006261bc946dce216c3296a5d6fc1 inherit pub_methods_classFitPSF_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classPSF_1_1MapSource"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classPSF_1_1MapSource')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classPSF_1_1MapSource.xhtml">PSF::MapSource</a></td></tr>
<tr class="memitem:a6e9e77111915500cc7883acfe7c81489 inherit pub_methods_classPSF_1_1MapSource"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classPSF_1_1MapSource.xhtml#a6e9e77111915500cc7883acfe7c81489">MapSource</a> (const <a class="el" href="classCore_1_1SourceID.xhtml">Core::SourceID</a> &amp;<a class="el" href="classCore_1_1SourceLocation.xhtml#af3effdc0f9853600380b2deb02415223">id</a>, unsigned num_apertures, double x0, double y0, const <a class="el" href="classBackground_1_1Source.xhtml">Background::Source</a> &amp;<a class="el" href="classCore_1_1Source.xhtml#af4ab8cc438b35fa0eb8b2e6943cff993">background</a>)</td></tr>
<tr class="memdesc:a6e9e77111915500cc7883acfe7c81489 inherit pub_methods_classPSF_1_1MapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create the source with the given properties.  <a href="classPSF_1_1MapSource.xhtml#a6e9e77111915500cc7883acfe7c81489">More...</a><br /></td></tr>
<tr class="separator:a6e9e77111915500cc7883acfe7c81489 inherit pub_methods_classPSF_1_1MapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aefb1847f93eb789d5bde3a5c64c9c352 inherit pub_methods_classPSF_1_1MapSource"><td class="memItemLeft" align="right" valign="top">Eigen::VectorXd &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classPSF_1_1MapSource.xhtml#aefb1847f93eb789d5bde3a5c64c9c352">expansion_terms</a> ()</td></tr>
<tr class="memdesc:aefb1847f93eb789d5bde3a5c64c9c352 inherit pub_methods_classPSF_1_1MapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">Modifiable reference to the terms <a class="el" href="classPSF_1_1PSF.xhtml" title="An abstract parent class for all PSF models.">PSF</a> is a function of.  <a href="classPSF_1_1MapSource.xhtml#aefb1847f93eb789d5bde3a5c64c9c352">More...</a><br /></td></tr>
<tr class="separator:aefb1847f93eb789d5bde3a5c64c9c352 inherit pub_methods_classPSF_1_1MapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0466e0c25a77d2b0f02f6487b107774 inherit pub_methods_classPSF_1_1MapSource"><td class="memItemLeft" align="right" valign="top">const Eigen::VectorXd &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classPSF_1_1MapSource.xhtml#ae0466e0c25a77d2b0f02f6487b107774">expansion_terms</a> () const</td></tr>
<tr class="memdesc:ae0466e0c25a77d2b0f02f6487b107774 inherit pub_methods_classPSF_1_1MapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constant reference to the terms <a class="el" href="classPSF_1_1PSF.xhtml" title="An abstract parent class for all PSF models.">PSF</a> is a function of.  <a href="classPSF_1_1MapSource.xhtml#ae0466e0c25a77d2b0f02f6487b107774">More...</a><br /></td></tr>
<tr class="separator:ae0466e0c25a77d2b0f02f6487b107774 inherit pub_methods_classPSF_1_1MapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classCore_1_1Source"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classCore_1_1Source')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classCore_1_1Source.xhtml">Core::Source</a></td></tr>
<tr class="memitem:a0b03fbb3f4e794bb0832147d0f1b75a2 inherit pub_methods_classCore_1_1Source"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1Source.xhtml#a0b03fbb3f4e794bb0832147d0f1b75a2">Source</a> (const <a class="el" href="classCore_1_1SourceID.xhtml">SourceID</a> &amp;<a class="el" href="classCore_1_1SourceLocation.xhtml#af3effdc0f9853600380b2deb02415223">id</a>, unsigned num_apertures=1, double <a class="el" href="classCore_1_1Point.xhtml#a34cc65572197531cadec091e45163510">x</a>=NaN, double <a class="el" href="classCore_1_1Point.xhtml#aa5376c40e6fbd29c525b67329dd94e79">y</a>=NaN, const <a class="el" href="classBackground_1_1Source.xhtml">Background::Source</a> &amp;bg=<a class="el" href="classBackground_1_1Source.xhtml">Background::Source</a>())</td></tr>
<tr class="separator:a0b03fbb3f4e794bb0832147d0f1b75a2 inherit pub_methods_classCore_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb5aa378942f901a0a63f0b29636543c inherit pub_methods_classCore_1_1Source"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1Source.xhtml#acb5aa378942f901a0a63f0b29636543c">Source</a> (unsigned num_apertures, const <a class="el" href="classCore_1_1SourceID.xhtml">SourceID</a> &amp;<a class="el" href="classCore_1_1SourceLocation.xhtml#af3effdc0f9853600380b2deb02415223">id</a>, double <a class="el" href="classCore_1_1Point.xhtml#a34cc65572197531cadec091e45163510">x</a>, double <a class="el" href="classCore_1_1Point.xhtml#aa5376c40e6fbd29c525b67329dd94e79">y</a>, const <a class="el" href="classPSF_1_1PSF.xhtml">PSF::PSF</a> &amp;<a class="el" href="classCore_1_1Source.xhtml#a22e92fbfaecfd0ccc0baf1e7297a1ae5">psf</a>)</td></tr>
<tr class="memdesc:acb5aa378942f901a0a63f0b29636543c inherit pub_methods_classCore_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a source with the given id and position that will have its flux measured in the given number of apertures, also specifying the point spread function that applies to this source.  <a href="classCore_1_1Source.xhtml#acb5aa378942f901a0a63f0b29636543c">More...</a><br /></td></tr>
<tr class="separator:acb5aa378942f901a0a63f0b29636543c inherit pub_methods_classCore_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a238bbda446c59f9e3a2cf0956a245d51 inherit pub_methods_classCore_1_1Source"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1Source.xhtml#a238bbda446c59f9e3a2cf0956a245d51">Source</a> (const <a class="el" href="classCore_1_1Source.xhtml">Source</a> &amp;orig)</td></tr>
<tr class="memdesc:a238bbda446c59f9e3a2cf0956a245d51 inherit pub_methods_classCore_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy orig to *this.  <a href="classCore_1_1Source.xhtml#a238bbda446c59f9e3a2cf0956a245d51">More...</a><br /></td></tr>
<tr class="separator:a238bbda446c59f9e3a2cf0956a245d51 inherit pub_methods_classCore_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0bb9a6e8192988ad89054f794392f46 inherit pub_methods_classCore_1_1Source"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1Source.xhtml#aa0bb9a6e8192988ad89054f794392f46">set_num_apertures</a> (unsigned num_apertures)</td></tr>
<tr class="memdesc:aa0bb9a6e8192988ad89054f794392f46 inherit pub_methods_classCore_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the number of apertures in which this source's flux will be measured.  <a href="classCore_1_1Source.xhtml#aa0bb9a6e8192988ad89054f794392f46">More...</a><br /></td></tr>
<tr class="separator:aa0bb9a6e8192988ad89054f794392f46 inherit pub_methods_classCore_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acab970ebe3cc0fece03723404a3cebe5 inherit pub_methods_classCore_1_1Source"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classCore_1_1Flux.xhtml">Flux</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1Source.xhtml#acab970ebe3cc0fece03723404a3cebe5">flux</a> (unsigned aperture_index) const</td></tr>
<tr class="memdesc:acab970ebe3cc0fece03723404a3cebe5 inherit pub_methods_classCore_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">The estimate of the flux of this soruce in the aperture with the given index.  <a href="classCore_1_1Source.xhtml#acab970ebe3cc0fece03723404a3cebe5">More...</a><br /></td></tr>
<tr class="separator:acab970ebe3cc0fece03723404a3cebe5 inherit pub_methods_classCore_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e5ccae743008cb960d07ffa95623bf6 inherit pub_methods_classCore_1_1Source"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classCore_1_1Flux.xhtml">Flux</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1Source.xhtml#a7e5ccae743008cb960d07ffa95623bf6">flux</a> (unsigned aperture_index)</td></tr>
<tr class="memdesc:a7e5ccae743008cb960d07ffa95623bf6 inherit pub_methods_classCore_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">The estimate of the flux of this soruce in the aperture with the given index.  <a href="classCore_1_1Source.xhtml#a7e5ccae743008cb960d07ffa95623bf6">More...</a><br /></td></tr>
<tr class="separator:a7e5ccae743008cb960d07ffa95623bf6 inherit pub_methods_classCore_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c7089fd90fd0ee10c67083061fed0a9 inherit pub_methods_classCore_1_1Source"><td class="memItemLeft" align="right" valign="top">const std::valarray&lt; <a class="el" href="classCore_1_1Flux.xhtml">Flux</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1Source.xhtml#a7c7089fd90fd0ee10c67083061fed0a9">flux</a> () const</td></tr>
<tr class="memdesc:a7c7089fd90fd0ee10c67083061fed0a9 inherit pub_methods_classCore_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">The estimate of the flux of this soruce in the aperture with the given index.  <a href="classCore_1_1Source.xhtml#a7c7089fd90fd0ee10c67083061fed0a9">More...</a><br /></td></tr>
<tr class="separator:a7c7089fd90fd0ee10c67083061fed0a9 inherit pub_methods_classCore_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a1a23240dc7e8b15efaa8f9b4f80ddc inherit pub_methods_classCore_1_1Source"><td class="memItemLeft" align="right" valign="top">std::valarray&lt; <a class="el" href="classCore_1_1Flux.xhtml">Flux</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1Source.xhtml#a0a1a23240dc7e8b15efaa8f9b4f80ddc">flux</a> ()</td></tr>
<tr class="memdesc:a0a1a23240dc7e8b15efaa8f9b4f80ddc inherit pub_methods_classCore_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">The estimate of the flux of this soruce in the aperture with the given index.  <a href="classCore_1_1Source.xhtml#a0a1a23240dc7e8b15efaa8f9b4f80ddc">More...</a><br /></td></tr>
<tr class="separator:a0a1a23240dc7e8b15efaa8f9b4f80ddc inherit pub_methods_classCore_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4ab8cc438b35fa0eb8b2e6943cff993 inherit pub_methods_classCore_1_1Source"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classBackground_1_1Source.xhtml">Background::Source</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1Source.xhtml#af4ab8cc438b35fa0eb8b2e6943cff993">background</a> () const</td></tr>
<tr class="memdesc:af4ab8cc438b35fa0eb8b2e6943cff993 inherit pub_methods_classCore_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">The estimate of the background under this source.  <a href="classCore_1_1Source.xhtml#af4ab8cc438b35fa0eb8b2e6943cff993">More...</a><br /></td></tr>
<tr class="separator:af4ab8cc438b35fa0eb8b2e6943cff993 inherit pub_methods_classCore_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9abf5acb4a24a83eff1d216567ce4b22 inherit pub_methods_classCore_1_1Source"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classBackground_1_1Source.xhtml">Background::Source</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1Source.xhtml#a9abf5acb4a24a83eff1d216567ce4b22">background</a> ()</td></tr>
<tr class="memdesc:a9abf5acb4a24a83eff1d216567ce4b22 inherit pub_methods_classCore_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">The estimate of the background under this source.  <a href="classCore_1_1Source.xhtml#a9abf5acb4a24a83eff1d216567ce4b22">More...</a><br /></td></tr>
<tr class="separator:a9abf5acb4a24a83eff1d216567ce4b22 inherit pub_methods_classCore_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22e92fbfaecfd0ccc0baf1e7297a1ae5 inherit pub_methods_classCore_1_1Source"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classPSF_1_1PSF.xhtml">PSF::PSF</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1Source.xhtml#a22e92fbfaecfd0ccc0baf1e7297a1ae5">psf</a> () const</td></tr>
<tr class="memdesc:a22e92fbfaecfd0ccc0baf1e7297a1ae5 inherit pub_methods_classCore_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">The point spread function for this source.  <a href="classCore_1_1Source.xhtml#a22e92fbfaecfd0ccc0baf1e7297a1ae5">More...</a><br /></td></tr>
<tr class="separator:a22e92fbfaecfd0ccc0baf1e7297a1ae5 inherit pub_methods_classCore_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac16fa3dcbab505b6878bf465a80bf47b inherit pub_methods_classCore_1_1Source"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1Source.xhtml#ac16fa3dcbab505b6878bf465a80bf47b">set_psf</a> (const <a class="el" href="classPSF_1_1PSF.xhtml">PSF::PSF</a> &amp;<a class="el" href="classCore_1_1Source.xhtml#a22e92fbfaecfd0ccc0baf1e7297a1ae5">psf</a>)</td></tr>
<tr class="memdesc:ac16fa3dcbab505b6878bf465a80bf47b inherit pub_methods_classCore_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change the point spread function for the source.  <a href="classCore_1_1Source.xhtml#ac16fa3dcbab505b6878bf465a80bf47b">More...</a><br /></td></tr>
<tr class="separator:ac16fa3dcbab505b6878bf465a80bf47b inherit pub_methods_classCore_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1305834b44cf74e2f2dfc9b86033adb inherit pub_methods_classCore_1_1Source"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1Source.xhtml#ab1305834b44cf74e2f2dfc9b86033adb">enable</a> ()</td></tr>
<tr class="memdesc:ab1305834b44cf74e2f2dfc9b86033adb inherit pub_methods_classCore_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enables the source.  <a href="classCore_1_1Source.xhtml#ab1305834b44cf74e2f2dfc9b86033adb">More...</a><br /></td></tr>
<tr class="separator:ab1305834b44cf74e2f2dfc9b86033adb inherit pub_methods_classCore_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0b8172ef84de55391d5229133a046cc inherit pub_methods_classCore_1_1Source"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1Source.xhtml#aa0b8172ef84de55391d5229133a046cc">disable</a> ()</td></tr>
<tr class="memdesc:aa0b8172ef84de55391d5229133a046cc inherit pub_methods_classCore_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disables the source.  <a href="classCore_1_1Source.xhtml#aa0b8172ef84de55391d5229133a046cc">More...</a><br /></td></tr>
<tr class="separator:aa0b8172ef84de55391d5229133a046cc inherit pub_methods_classCore_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91c31a1343e296e356ffe5e172288150 inherit pub_methods_classCore_1_1Source"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1Source.xhtml#a91c31a1343e296e356ffe5e172288150">is_enabled</a> () const</td></tr>
<tr class="memdesc:a91c31a1343e296e356ffe5e172288150 inherit pub_methods_classCore_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks if the source is enabled.  <a href="classCore_1_1Source.xhtml#a91c31a1343e296e356ffe5e172288150">More...</a><br /></td></tr>
<tr class="separator:a91c31a1343e296e356ffe5e172288150 inherit pub_methods_classCore_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee7dbe6ca787845aac6407d0bf2082c9 inherit pub_methods_classCore_1_1Source"><td class="memItemLeft" align="right" valign="top">virtual double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1Source.xhtml#aee7dbe6ca787845aac6407d0bf2082c9">psf_s</a> () const</td></tr>
<tr class="memdesc:aee7dbe6ca787845aac6407d0bf2082c9 inherit pub_methods_classCore_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">The S value for sources with elliptical Gaussian PSFs.  <a href="classCore_1_1Source.xhtml#aee7dbe6ca787845aac6407d0bf2082c9">More...</a><br /></td></tr>
<tr class="separator:aee7dbe6ca787845aac6407d0bf2082c9 inherit pub_methods_classCore_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06791f5fed7b314e845541ac92eb0553 inherit pub_methods_classCore_1_1Source"><td class="memItemLeft" align="right" valign="top">virtual double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1Source.xhtml#a06791f5fed7b314e845541ac92eb0553">psf_d</a> () const</td></tr>
<tr class="memdesc:a06791f5fed7b314e845541ac92eb0553 inherit pub_methods_classCore_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">The D value for sources with elliptical Gaussian PSFs.  <a href="classCore_1_1Source.xhtml#a06791f5fed7b314e845541ac92eb0553">More...</a><br /></td></tr>
<tr class="separator:a06791f5fed7b314e845541ac92eb0553 inherit pub_methods_classCore_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace1fccf1cc8cc373732d493c757898de inherit pub_methods_classCore_1_1Source"><td class="memItemLeft" align="right" valign="top">virtual double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1Source.xhtml#ace1fccf1cc8cc373732d493c757898de">psf_k</a> () const</td></tr>
<tr class="memdesc:ace1fccf1cc8cc373732d493c757898de inherit pub_methods_classCore_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">The K value for sources with elliptical Gaussian PSFs.  <a href="classCore_1_1Source.xhtml#ace1fccf1cc8cc373732d493c757898de">More...</a><br /></td></tr>
<tr class="separator:ace1fccf1cc8cc373732d493c757898de inherit pub_methods_classCore_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb7358c8d4a101b961b629fdfb05b813 inherit pub_methods_classCore_1_1Source"><td class="memItemLeft" align="right" valign="top">virtual double &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1Source.xhtml#aeb7358c8d4a101b961b629fdfb05b813">reduced_chi2</a> ()</td></tr>
<tr class="memdesc:aeb7358c8d4a101b961b629fdfb05b813 inherit pub_methods_classCore_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reference to the best fit reduced \(\chi^2\) of the given source in the image.  <a href="classCore_1_1Source.xhtml#aeb7358c8d4a101b961b629fdfb05b813">More...</a><br /></td></tr>
<tr class="separator:aeb7358c8d4a101b961b629fdfb05b813 inherit pub_methods_classCore_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10fea17b19b53e5184545ba48d500fdc inherit pub_methods_classCore_1_1Source"><td class="memItemLeft" align="right" valign="top">virtual double &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1Source.xhtml#a10fea17b19b53e5184545ba48d500fdc">signal_to_noise</a> ()</td></tr>
<tr class="memdesc:a10fea17b19b53e5184545ba48d500fdc inherit pub_methods_classCore_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reference to the signal to noise ratio of the given source in the image.  <a href="classCore_1_1Source.xhtml#a10fea17b19b53e5184545ba48d500fdc">More...</a><br /></td></tr>
<tr class="separator:a10fea17b19b53e5184545ba48d500fdc inherit pub_methods_classCore_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa73f5d4ff879c547d2069e2139b8ab61 inherit pub_methods_classCore_1_1Source"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1Source.xhtml#aa73f5d4ff879c547d2069e2139b8ab61">~Source</a> ()</td></tr>
<tr class="memdesc:aa73f5d4ff879c547d2069e2139b8ab61 inherit pub_methods_classCore_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow inheriting classes to define custom cleanup.  <a href="classCore_1_1Source.xhtml#aa73f5d4ff879c547d2069e2139b8ab61">More...</a><br /></td></tr>
<tr class="separator:aa73f5d4ff879c547d2069e2139b8ab61 inherit pub_methods_classCore_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classCore_1_1SourceLocation"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classCore_1_1SourceLocation')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classCore_1_1SourceLocation.xhtml">Core::SourceLocation</a></td></tr>
<tr class="memitem:a7854481e8ba5071ef740c9edbb1bff47 inherit pub_methods_classCore_1_1SourceLocation"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1SourceLocation.xhtml#a7854481e8ba5071ef740c9edbb1bff47">SourceLocation</a> (double <a class="el" href="classCore_1_1Point.xhtml#a34cc65572197531cadec091e45163510">x</a>=NaN, double <a class="el" href="classCore_1_1Point.xhtml#aa5376c40e6fbd29c525b67329dd94e79">y</a>=NaN)</td></tr>
<tr class="memdesc:a7854481e8ba5071ef740c9edbb1bff47 inherit pub_methods_classCore_1_1SourceLocation"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a source at the given location (x,y).  <a href="classCore_1_1SourceLocation.xhtml#a7854481e8ba5071ef740c9edbb1bff47">More...</a><br /></td></tr>
<tr class="separator:a7854481e8ba5071ef740c9edbb1bff47 inherit pub_methods_classCore_1_1SourceLocation"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a010019f0b4dc4a1fee04e1da0bddb527 inherit pub_methods_classCore_1_1SourceLocation"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1SourceLocation.xhtml#a010019f0b4dc4a1fee04e1da0bddb527">SourceLocation</a> (const <a class="el" href="classCore_1_1SourceID.xhtml">SourceID</a> &amp;<a class="el" href="classCore_1_1SourceLocation.xhtml#af3effdc0f9853600380b2deb02415223">id</a>, double <a class="el" href="classCore_1_1Point.xhtml#a34cc65572197531cadec091e45163510">x</a>=NaN, double <a class="el" href="classCore_1_1Point.xhtml#aa5376c40e6fbd29c525b67329dd94e79">y</a>=NaN)</td></tr>
<tr class="memdesc:a010019f0b4dc4a1fee04e1da0bddb527 inherit pub_methods_classCore_1_1SourceLocation"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a source with the given id at the given location (x,y).  <a href="classCore_1_1SourceLocation.xhtml#a010019f0b4dc4a1fee04e1da0bddb527">More...</a><br /></td></tr>
<tr class="separator:a010019f0b4dc4a1fee04e1da0bddb527 inherit pub_methods_classCore_1_1SourceLocation"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3effdc0f9853600380b2deb02415223 inherit pub_methods_classCore_1_1SourceLocation"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classCore_1_1SourceID.xhtml">SourceID</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1SourceLocation.xhtml#af3effdc0f9853600380b2deb02415223">id</a> () const</td></tr>
<tr class="memdesc:af3effdc0f9853600380b2deb02415223 inherit pub_methods_classCore_1_1SourceLocation"><td class="mdescLeft">&#160;</td><td class="mdescRight">Identifying string for this source.  <a href="classCore_1_1SourceLocation.xhtml#af3effdc0f9853600380b2deb02415223">More...</a><br /></td></tr>
<tr class="separator:af3effdc0f9853600380b2deb02415223 inherit pub_methods_classCore_1_1SourceLocation"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3ab545019b33822ad4ccf48334b2242 inherit pub_methods_classCore_1_1SourceLocation"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classCore_1_1SourceID.xhtml">SourceID</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1SourceLocation.xhtml#ab3ab545019b33822ad4ccf48334b2242">id</a> ()</td></tr>
<tr class="memdesc:ab3ab545019b33822ad4ccf48334b2242 inherit pub_methods_classCore_1_1SourceLocation"><td class="mdescLeft">&#160;</td><td class="mdescRight">Identifying string for this source.  <a href="classCore_1_1SourceLocation.xhtml#ab3ab545019b33822ad4ccf48334b2242">More...</a><br /></td></tr>
<tr class="separator:ab3ab545019b33822ad4ccf48334b2242 inherit pub_methods_classCore_1_1SourceLocation"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b39c87cbcb604a4b42e475a05faf389 inherit pub_methods_classCore_1_1SourceLocation"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1SourceLocation.xhtml#a6b39c87cbcb604a4b42e475a05faf389">operator==</a> (const <a class="el" href="classCore_1_1SourceLocation.xhtml">SourceLocation</a> &amp;rhs) const</td></tr>
<tr class="memdesc:a6b39c87cbcb604a4b42e475a05faf389 inherit pub_methods_classCore_1_1SourceLocation"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if the given source has the same ID as this.  <a href="classCore_1_1SourceLocation.xhtml#a6b39c87cbcb604a4b42e475a05faf389">More...</a><br /></td></tr>
<tr class="separator:a6b39c87cbcb604a4b42e475a05faf389 inherit pub_methods_classCore_1_1SourceLocation"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classCore_1_1Point"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classCore_1_1Point')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classCore_1_1Point.xhtml">Core::Point&lt; double &gt;</a></td></tr>
<tr class="memitem:a2754bf0ae2b405f1bc4f471c29347bb0 inherit pub_methods_classCore_1_1Point"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1Point.xhtml#a2754bf0ae2b405f1bc4f471c29347bb0">Point</a> (double <a class="el" href="classCore_1_1Point.xhtml#a34cc65572197531cadec091e45163510">x</a>=0, double <a class="el" href="classCore_1_1Point.xhtml#aa5376c40e6fbd29c525b67329dd94e79">y</a>=0)</td></tr>
<tr class="memdesc:a2754bf0ae2b405f1bc4f471c29347bb0 inherit pub_methods_classCore_1_1Point"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a point at the given location.  <a href="classCore_1_1Point.xhtml#a2754bf0ae2b405f1bc4f471c29347bb0">More...</a><br /></td></tr>
<tr class="separator:a2754bf0ae2b405f1bc4f471c29347bb0 inherit pub_methods_classCore_1_1Point"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34cc65572197531cadec091e45163510 inherit pub_methods_classCore_1_1Point"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1Point.xhtml#a34cc65572197531cadec091e45163510">x</a> () const</td></tr>
<tr class="memdesc:a34cc65572197531cadec091e45163510 inherit pub_methods_classCore_1_1Point"><td class="mdescLeft">&#160;</td><td class="mdescRight">The abscissa coordinate of the point.  <a href="classCore_1_1Point.xhtml#a34cc65572197531cadec091e45163510">More...</a><br /></td></tr>
<tr class="separator:a34cc65572197531cadec091e45163510 inherit pub_methods_classCore_1_1Point"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d7884c25972cdf4abc7c1b6eb421068 inherit pub_methods_classCore_1_1Point"><td class="memItemLeft" align="right" valign="top">double &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1Point.xhtml#a5d7884c25972cdf4abc7c1b6eb421068">x</a> ()</td></tr>
<tr class="memdesc:a5d7884c25972cdf4abc7c1b6eb421068 inherit pub_methods_classCore_1_1Point"><td class="mdescLeft">&#160;</td><td class="mdescRight">The abscissa coordinate of the point.  <a href="classCore_1_1Point.xhtml#a5d7884c25972cdf4abc7c1b6eb421068">More...</a><br /></td></tr>
<tr class="separator:a5d7884c25972cdf4abc7c1b6eb421068 inherit pub_methods_classCore_1_1Point"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5376c40e6fbd29c525b67329dd94e79 inherit pub_methods_classCore_1_1Point"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1Point.xhtml#aa5376c40e6fbd29c525b67329dd94e79">y</a> () const</td></tr>
<tr class="memdesc:aa5376c40e6fbd29c525b67329dd94e79 inherit pub_methods_classCore_1_1Point"><td class="mdescLeft">&#160;</td><td class="mdescRight">The oordinate coordinate of the point.  <a href="classCore_1_1Point.xhtml#aa5376c40e6fbd29c525b67329dd94e79">More...</a><br /></td></tr>
<tr class="separator:aa5376c40e6fbd29c525b67329dd94e79 inherit pub_methods_classCore_1_1Point"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0c07d0f6d21b4058acaf0dafea4a3e7 inherit pub_methods_classCore_1_1Point"><td class="memItemLeft" align="right" valign="top">double &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1Point.xhtml#ad0c07d0f6d21b4058acaf0dafea4a3e7">y</a> ()</td></tr>
<tr class="memdesc:ad0c07d0f6d21b4058acaf0dafea4a3e7 inherit pub_methods_classCore_1_1Point"><td class="mdescLeft">&#160;</td><td class="mdescRight">The oordinate coordinate of the point.  <a href="classCore_1_1Point.xhtml#ad0c07d0f6d21b4058acaf0dafea4a3e7">More...</a><br /></td></tr>
<tr class="separator:ad0c07d0f6d21b4058acaf0dafea4a3e7 inherit pub_methods_classCore_1_1Point"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:ad2200ab6548aad154ec0dd1735239839"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1LinearSource.xhtml#ad2200ab6548aad154ec0dd1735239839">pixel_excess_reductions</a> (const Eigen::VectorXd &amp;to_dot_with, double &amp;dot_product, double &amp;excess_sum_squares)</td></tr>
<tr class="memdesc:ad2200ab6548aad154ec0dd1735239839"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the dot of pixel excesses with the given quantity as well as with itself.  <a href="classFitPSF_1_1LinearSource.xhtml#ad2200ab6548aad154ec0dd1735239839">More...</a><br /></td></tr>
<tr class="separator:ad2200ab6548aad154ec0dd1735239839"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classFitPSF_1_1OverlapSource"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classFitPSF_1_1OverlapSource')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classFitPSF_1_1OverlapSource.xhtml">FitPSF::OverlapSource&lt; LinearSource, PSF::PiecewiseBicubic &gt;</a></td></tr>
<tr class="memitem:a4e6ecd518434b8bfc01ac519664f4d90 inherit pro_methods_classFitPSF_1_1OverlapSource"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a4e6ecd518434b8bfc01ac519664f4d90">pixel_excess_reductions</a> (const Eigen::VectorXd &amp;to_dot_with, double &amp;dot_product, double &amp;excess_sum_squares)</td></tr>
<tr class="memdesc:a4e6ecd518434b8bfc01ac519664f4d90 inherit pro_methods_classFitPSF_1_1OverlapSource"><td class="mdescLeft">&#160;</td><td class="mdescRight">See Source::pixel_excess_reductions.  <a href="classFitPSF_1_1OverlapSource.xhtml#a4e6ecd518434b8bfc01ac519664f4d90">More...</a><br /></td></tr>
<tr class="separator:a4e6ecd518434b8bfc01ac519664f4d90 inherit pro_methods_classFitPSF_1_1OverlapSource"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classFitPSF_1_1Source"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classFitPSF_1_1Source')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classFitPSF_1_1Source.xhtml">FitPSF::Source&lt; PSF_TYPE &gt;</a></td></tr>
<tr class="memitem:a493c3c39cc78ef30bd199d5f66f65478 inherit pro_methods_classFitPSF_1_1Source"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1Source.xhtml#a493c3c39cc78ef30bd199d5f66f65478">fit_flux</a> (const Eigen::VectorXd &amp;estimated_excesses)</td></tr>
<tr class="memdesc:a493c3c39cc78ef30bd199d5f66f65478 inherit pro_methods_classFitPSF_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fit for the flux of the source and return the change from its previous value.  <a href="classFitPSF_1_1Source.xhtml#a493c3c39cc78ef30bd199d5f66f65478">More...</a><br /></td></tr>
<tr class="separator:a493c3c39cc78ef30bd199d5f66f65478 inherit pro_methods_classFitPSF_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-types"></a>
Private Types</h2></td></tr>
<tr class="memitem:affdcd6823591ed83ca30042d2e5a8fdf"><td class="memItemLeft" align="right" valign="top">typedef std::list&lt; <a class="el" href="classFitPSF_1_1Pixel.xhtml">Pixel</a>&lt; <a class="el" href="classFitPSF_1_1LinearSource.xhtml">LinearSource</a> &gt; * &gt;::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1LinearSource.xhtml#affdcd6823591ed83ca30042d2e5a8fdf">ConstPixelIter</a></td></tr>
<tr class="memdesc:affdcd6823591ed83ca30042d2e5a8fdf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience alias for unmutable iterators to source pixels.  <a href="classFitPSF_1_1LinearSource.xhtml#affdcd6823591ed83ca30042d2e5a8fdf">More...</a><br /></td></tr>
<tr class="separator:affdcd6823591ed83ca30042d2e5a8fdf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2671c43c10029098811a56ede11427a6"><td class="memItemLeft" align="right" valign="top">typedef std::list&lt; <a class="el" href="classFitPSF_1_1Pixel.xhtml">Pixel</a>&lt; <a class="el" href="classFitPSF_1_1LinearSource.xhtml">LinearSource</a> &gt; * &gt;::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1LinearSource.xhtml#a2671c43c10029098811a56ede11427a6">PixelIter</a></td></tr>
<tr class="memdesc:a2671c43c10029098811a56ede11427a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience alias for mutable iterators to source pixels.  <a href="classFitPSF_1_1LinearSource.xhtml#a2671c43c10029098811a56ede11427a6">More...</a><br /></td></tr>
<tr class="separator:a2671c43c10029098811a56ede11427a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-methods"></a>
Private Member Functions</h2></td></tr>
<tr class="memitem:aebb24e1232a3bb34c6c4228b5337748b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1LinearSource.xhtml#aebb24e1232a3bb34c6c4228b5337748b">calculate_predicted_pixel_values</a> (double pixel_left, double pixel_bottom, const std::vector&lt; std::valarray&lt; double &gt; &gt; &amp;parameter_sets, std::valarray&lt; double &gt; &amp;pixel_integrals)</td></tr>
<tr class="memdesc:aebb24e1232a3bb34c6c4228b5337748b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the integral of PSF * sub-pixel map over the given pixel for a set of PSF paramaters.  <a href="classFitPSF_1_1LinearSource.xhtml#aebb24e1232a3bb34c6c4228b5337748b">More...</a><br /></td></tr>
<tr class="separator:aebb24e1232a3bb34c6c4228b5337748b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38d669a11dab6e67eb339f012ff0e010"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1LinearSource.xhtml#a38d669a11dab6e67eb339f012ff0e010">fill_pixel_integral_matrix</a> (const std::vector&lt; std::valarray&lt; double &gt; &gt; &amp;basis_parameter_sets, Eigen::Block&lt; Eigen::MatrixXd &gt; &amp;shape_fit_integral_matrix, Eigen::VectorBlock&lt; Eigen::VectorXd &gt; &amp;shape_fit_offset)</td></tr>
<tr class="memdesc:a38d669a11dab6e67eb339f012ff0e010"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepare matrices giving PSF integrals over the source pixels.  <a href="classFitPSF_1_1LinearSource.xhtml#a38d669a11dab6e67eb339f012ff0e010">More...</a><br /></td></tr>
<tr class="separator:a38d669a11dab6e67eb339f012ff0e010"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae30080c88e28ea35fd18a082df58625c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1LinearSource.xhtml#ae30080c88e28ea35fd18a082df58625c">fill_background_excess</a> (Eigen::VectorBlock&lt; Eigen::VectorXd &gt; &amp;shape_fit_background_excess)</td></tr>
<tr class="memdesc:ae30080c88e28ea35fd18a082df58625c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fill vectors with the background excess values of the source pixels used for fitting.  <a href="classFitPSF_1_1LinearSource.xhtml#ae30080c88e28ea35fd18a082df58625c">More...</a><br /></td></tr>
<tr class="separator:ae30080c88e28ea35fd18a082df58625c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7358c4bcf29ea15c34e10bbf20be1547"><td class="memTemplParams" colspan="2">template&lt;class OUTPUT_TYPE &gt; </td></tr>
<tr class="memitem:a7358c4bcf29ea15c34e10bbf20be1547"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1LinearSource.xhtml#a7358c4bcf29ea15c34e10bbf20be1547">reorder_flux_fit_column</a> (const Eigen::VectorXd &amp;input, bool shape_fit, OUTPUT_TYPE &amp;output)</td></tr>
<tr class="memdesc:a7358c4bcf29ea15c34e10bbf20be1547"><td class="mdescLeft">&#160;</td><td class="mdescRight">Re-orders a flux fitting column from the order matching the list of source pixels to the order specified by the flux_fit_index() <a class="el" href="classFitPSF_1_1Pixel.xhtml" title="A class tracking all pixel level informaiton for pixels participating in PSF/PRF fitting.">Pixel</a> method.  <a href="classFitPSF_1_1LinearSource.xhtml#a7358c4bcf29ea15c34e10bbf20be1547">More...</a><br /></td></tr>
<tr class="separator:a7358c4bcf29ea15c34e10bbf20be1547"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr class="memitem:af70f034a15e7915101a824bd892361b9"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classPSF_1_1PiecewiseBicubic.xhtml">PSF::PiecewiseBicubic</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1LinearSource.xhtml#af70f034a15e7915101a824bd892361b9">__psf</a></td></tr>
<tr class="memdesc:af70f034a15e7915101a824bd892361b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">See psf argument of the constructors.  <a href="classFitPSF_1_1LinearSource.xhtml#af70f034a15e7915101a824bd892361b9">More...</a><br /></td></tr>
<tr class="separator:af70f034a15e7915101a824bd892361b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a773fffe45887bb8595e695bbef5566ae"><td class="memItemLeft" align="right" valign="top">const Eigen::Block&lt; Eigen::MatrixXd &gt; *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1LinearSource.xhtml#a773fffe45887bb8595e695bbef5566ae">__shape_fit_integral_matrix</a></td></tr>
<tr class="memdesc:a773fffe45887bb8595e695bbef5566ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">A (piece of a) matrix which after applying to the PSF fitting coefficients and scaling by the amplitude gives the integral of the PSF over the source pixels selected for shape fitting.  <a href="classFitPSF_1_1LinearSource.xhtml#a773fffe45887bb8595e695bbef5566ae">More...</a><br /></td></tr>
<tr class="separator:a773fffe45887bb8595e695bbef5566ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e00e7b35d1fc778a808bf9ed5b6bb3c"><td class="memItemLeft" align="right" valign="top">const Eigen::VectorBlock&lt; Eigen::VectorXd &gt; *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1LinearSource.xhtml#a3e00e7b35d1fc778a808bf9ed5b6bb3c">__shape_fit_offset</a></td></tr>
<tr class="memdesc:a3e00e7b35d1fc778a808bf9ed5b6bb3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">A (piece of a) vector which after scaling by the amplitude gives the integral of a PSF with only the overall integral parameters for the source pixels selected for shape fitting.  <a href="classFitPSF_1_1LinearSource.xhtml#a3e00e7b35d1fc778a808bf9ed5b6bb3c">More...</a><br /></td></tr>
<tr class="separator:a3e00e7b35d1fc778a808bf9ed5b6bb3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afcd52edb366d1ba5800e3076ef1c8042"><td class="memItemLeft" align="right" valign="top">const Eigen::VectorBlock&lt; Eigen::VectorXd &gt; *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1LinearSource.xhtml#afcd52edb366d1ba5800e3076ef1c8042">__shape_fit_bg_excess</a></td></tr>
<tr class="memdesc:afcd52edb366d1ba5800e3076ef1c8042"><td class="mdescLeft">&#160;</td><td class="mdescRight">A (piece of a) vector of the background excess values of the source pixels used in shape fitting.  <a href="classFitPSF_1_1LinearSource.xhtml#afcd52edb366d1ba5800e3076ef1c8042">More...</a><br /></td></tr>
<tr class="separator:afcd52edb366d1ba5800e3076ef1c8042"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3988a0ebda71fbc3a5c69e98b10fff1"><td class="memItemLeft" align="right" valign="top">Eigen::MatrixXd&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1LinearSource.xhtml#ac3988a0ebda71fbc3a5c69e98b10fff1">__flux_fit_integral_matrix</a></td></tr>
<tr class="memdesc:ac3988a0ebda71fbc3a5c69e98b10fff1"><td class="mdescLeft">&#160;</td><td class="mdescRight">The same as __shape_fit_integral_matrix, but for pixels participating in flux fitting only (excluded from shape fitting).  <a href="classFitPSF_1_1LinearSource.xhtml#ac3988a0ebda71fbc3a5c69e98b10fff1">More...</a><br /></td></tr>
<tr class="separator:ac3988a0ebda71fbc3a5c69e98b10fff1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fe78b6c2f0892a30adfcf5812a8d68c"><td class="memItemLeft" align="right" valign="top">Eigen::VectorXd&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1LinearSource.xhtml#a2fe78b6c2f0892a30adfcf5812a8d68c">__flux_fit_offset</a></td></tr>
<tr class="memdesc:a2fe78b6c2f0892a30adfcf5812a8d68c"><td class="mdescLeft">&#160;</td><td class="mdescRight">The same as __shape_fit_offset, but for pixels participating in flux fitting only (excluded from shape fitting).  <a href="classFitPSF_1_1LinearSource.xhtml#a2fe78b6c2f0892a30adfcf5812a8d68c">More...</a><br /></td></tr>
<tr class="separator:a2fe78b6c2f0892a30adfcf5812a8d68c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf50f12217df23fb1fb1c46086b4c79e"><td class="memItemLeft" align="right" valign="top">Eigen::VectorXd&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1LinearSource.xhtml#aaf50f12217df23fb1fb1c46086b4c79e">__flux_fit_bg_excess</a></td></tr>
<tr class="memdesc:aaf50f12217df23fb1fb1c46086b4c79e"><td class="mdescLeft">&#160;</td><td class="mdescRight">The same as __shape_fit_bg_excess, but for pixels participating in flux fitting only (excluded from shape fitting).  <a href="classFitPSF_1_1LinearSource.xhtml#aaf50f12217df23fb1fb1c46086b4c79e">More...</a><br /></td></tr>
<tr class="separator:aaf50f12217df23fb1fb1c46086b4c79e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ad185a6c8256c2542bd2170daaa2d81"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1LinearSource.xhtml#a9ad185a6c8256c2542bd2170daaa2d81">__ready_to_fit</a></td></tr>
<tr class="memdesc:a9ad185a6c8256c2542bd2170daaa2d81"><td class="mdescLeft">&#160;</td><td class="mdescRight">Is this source ready for PSF fitting.  <a href="classFitPSF_1_1LinearSource.xhtml#a9ad185a6c8256c2542bd2170daaa2d81">More...</a><br /></td></tr>
<tr class="separator:a9ad185a6c8256c2542bd2170daaa2d81"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pro_attribs_classFitPSF_1_1Source"><td colspan="2" onclick="javascript:toggleInherit('pro_attribs_classFitPSF_1_1Source')"><img src="closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="classFitPSF_1_1Source.xhtml">FitPSF::Source&lt; PSF_TYPE &gt;</a></td></tr>
<tr class="memitem:a0a782e0369f7cddf89e2ff5ed7f57e59 inherit pro_attribs_classFitPSF_1_1Source"><td class="memItemLeft" align="right" valign="top">std::list&lt; <a class="el" href="classFitPSF_1_1AmplitudeSaturatedPixel.xhtml">AmplitudeSaturatedPixel</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1Source.xhtml#a0a782e0369f7cddf89e2ff5ed7f57e59">_saturated_pixels</a></td></tr>
<tr class="memdesc:a0a782e0369f7cddf89e2ff5ed7f57e59 inherit pro_attribs_classFitPSF_1_1Source"><td class="mdescLeft">&#160;</td><td class="mdescRight">A structure holding all necessary information about saturated pixels.  <a href="classFitPSF_1_1Source.xhtml#a0a782e0369f7cddf89e2ff5ed7f57e59">More...</a><br /></td></tr>
<tr class="separator:a0a782e0369f7cddf89e2ff5ed7f57e59 inherit pro_attribs_classFitPSF_1_1Source"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A class for PSF fitting sources whose flux distribution depends linearly on the PSF paramaters (for a fixed amplitude). </p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="affdcd6823591ed83ca30042d2e5a8fdf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#affdcd6823591ed83ca30042d2e5a8fdf">&#9670;&nbsp;</a></span>ConstPixelIter</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::list&lt; <a class="el" href="classFitPSF_1_1Pixel.xhtml">Pixel</a>&lt;<a class="el" href="classFitPSF_1_1LinearSource.xhtml">LinearSource</a>&gt;* &gt;::const_iterator <a class="el" href="classFitPSF_1_1LinearSource.xhtml#affdcd6823591ed83ca30042d2e5a8fdf">FitPSF::LinearSource::ConstPixelIter</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convenience alias for unmutable iterators to source pixels. </p>

</div>
</div>
<a id="a2671c43c10029098811a56ede11427a6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2671c43c10029098811a56ede11427a6">&#9670;&nbsp;</a></span>PixelIter</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::list&lt; <a class="el" href="classFitPSF_1_1Pixel.xhtml">Pixel</a>&lt;<a class="el" href="classFitPSF_1_1LinearSource.xhtml">LinearSource</a>&gt;* &gt;::const_iterator <a class="el" href="classFitPSF_1_1LinearSource.xhtml#a2671c43c10029098811a56ede11427a6">FitPSF::LinearSource::PixelIter</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convenience alias for mutable iterators to source pixels. </p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ae438256b8949f3e16f26e0a4fc7f0c74"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae438256b8949f3e16f26e0a4fc7f0c74">&#9670;&nbsp;</a></span>LinearSource() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">FitPSF::LinearSource::LinearSource </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classPSF_1_1PiecewiseBicubic.xhtml">PSF::PiecewiseBicubic</a> &amp;&#160;</td>
          <td class="paramname"><em>psf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classCore_1_1SourceID.xhtml">Core::SourceID</a> &amp;&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classBackground_1_1Source.xhtml">Background::Source</a> &amp;&#160;</td>
          <td class="paramname"><em>background</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classFitPSF_1_1Image.xhtml">Image</a>&lt; <a class="el" href="classFitPSF_1_1LinearSource.xhtml">LinearSource</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>psffit_image</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>alpha</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>source_assignment_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classCore_1_1SubPixelMap.xhtml">Core::SubPixelMap</a> *&#160;</td>
          <td class="paramname"><em>subpix_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>max_circular_aperture</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>output_fname</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>See <a class="el" href="classFitPSF_1_1Source.xhtml" title="An abstract base class for sources which participate in PSF fitting.">Source</a> constructor with matching arguments (except the first two). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">psf</td><td>A properly constructed PSF for this source. The exact shape parameters set are irrelevant. Must not be destroyed while this object is in use. </td></tr>
    <tr><td class="paramname">id</td><td>See <a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a1aea1fe935b269943de61d223e6bcc93" title="Creates a PSF fitting source by detecting bright pixels.">OverlapSource::OverlapSource()</a> </td></tr>
    <tr><td class="paramname">x0</td><td>See <a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a1aea1fe935b269943de61d223e6bcc93" title="Creates a PSF fitting source by detecting bright pixels.">OverlapSource::OverlapSource()</a> </td></tr>
    <tr><td class="paramname">y0</td><td>See <a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a1aea1fe935b269943de61d223e6bcc93" title="Creates a PSF fitting source by detecting bright pixels.">OverlapSource::OverlapSource()</a> </td></tr>
    <tr><td class="paramname">background</td><td>See <a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a1aea1fe935b269943de61d223e6bcc93" title="Creates a PSF fitting source by detecting bright pixels.">OverlapSource::OverlapSource()</a> </td></tr>
    <tr><td class="paramname">psffit_image</td><td>See <a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a1aea1fe935b269943de61d223e6bcc93" title="Creates a PSF fitting source by detecting bright pixels.">OverlapSource::OverlapSource()</a> </td></tr>
    <tr><td class="paramname">alpha</td><td>See <a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a1aea1fe935b269943de61d223e6bcc93" title="Creates a PSF fitting source by detecting bright pixels.">OverlapSource::OverlapSource()</a> </td></tr>
    <tr><td class="paramname">source_assignment_id</td><td>See <a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a1aea1fe935b269943de61d223e6bcc93" title="Creates a PSF fitting source by detecting bright pixels.">OverlapSource::OverlapSource()</a> </td></tr>
    <tr><td class="paramname">subpix_map</td><td>See <a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a1aea1fe935b269943de61d223e6bcc93" title="Creates a PSF fitting source by detecting bright pixels.">OverlapSource::OverlapSource()</a> </td></tr>
    <tr><td class="paramname">max_circular_aperture</td><td>See <a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a1aea1fe935b269943de61d223e6bcc93" title="Creates a PSF fitting source by detecting bright pixels.">OverlapSource::OverlapSource()</a> </td></tr>
    <tr><td class="paramname">output_fname</td><td>See <a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a1aea1fe935b269943de61d223e6bcc93" title="Creates a PSF fitting source by detecting bright pixels.">OverlapSource::OverlapSource()</a> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ab4a64d29bd02cbb476f061daec550818"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab4a64d29bd02cbb476f061daec550818">&#9670;&nbsp;</a></span>LinearSource() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">FitPSF::LinearSource::LinearSource </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classPSF_1_1PiecewiseBicubic.xhtml">PSF::PiecewiseBicubic</a> &amp;&#160;</td>
          <td class="paramname"><em>psf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classCore_1_1SourceID.xhtml">Core::SourceID</a> &amp;&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classBackground_1_1Source.xhtml">Background::Source</a> &amp;&#160;</td>
          <td class="paramname"><em>background</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classFitPSF_1_1Image.xhtml">Image</a>&lt; <a class="el" href="classFitPSF_1_1LinearSource.xhtml">LinearSource</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>psffit_image</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>source_assignment_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classCore_1_1SubPixelMap.xhtml">Core::SubPixelMap</a> *&#160;</td>
          <td class="paramname"><em>subpix_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>right</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>bottom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>output_fname</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>See <a class="el" href="classFitPSF_1_1Source.xhtml" title="An abstract base class for sources which participate in PSF fitting.">Source</a> constructor with matching arguments (except the first one). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">psf</td><td>A properly constructed PSF for this source. The exact shape parameters set are irrelevant. Must not be destroyed while this object is in use. </td></tr>
    <tr><td class="paramname">id</td><td>See <a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a1aea1fe935b269943de61d223e6bcc93" title="Creates a PSF fitting source by detecting bright pixels.">OverlapSource::OverlapSource()</a> </td></tr>
    <tr><td class="paramname">x0</td><td>See <a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a1aea1fe935b269943de61d223e6bcc93" title="Creates a PSF fitting source by detecting bright pixels.">OverlapSource::OverlapSource()</a> </td></tr>
    <tr><td class="paramname">y0</td><td>See <a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a1aea1fe935b269943de61d223e6bcc93" title="Creates a PSF fitting source by detecting bright pixels.">OverlapSource::OverlapSource()</a> </td></tr>
    <tr><td class="paramname">background</td><td>See <a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a1aea1fe935b269943de61d223e6bcc93" title="Creates a PSF fitting source by detecting bright pixels.">OverlapSource::OverlapSource()</a> </td></tr>
    <tr><td class="paramname">psffit_image</td><td>See <a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a1aea1fe935b269943de61d223e6bcc93" title="Creates a PSF fitting source by detecting bright pixels.">OverlapSource::OverlapSource()</a> </td></tr>
    <tr><td class="paramname">source_assignment_id</td><td>See <a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a1aea1fe935b269943de61d223e6bcc93" title="Creates a PSF fitting source by detecting bright pixels.">OverlapSource::OverlapSource()</a> </td></tr>
    <tr><td class="paramname">subpix_map</td><td>See <a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a1aea1fe935b269943de61d223e6bcc93" title="Creates a PSF fitting source by detecting bright pixels.">OverlapSource::OverlapSource()</a> </td></tr>
    <tr><td class="paramname">left</td><td>See <a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a1aea1fe935b269943de61d223e6bcc93" title="Creates a PSF fitting source by detecting bright pixels.">OverlapSource::OverlapSource()</a> </td></tr>
    <tr><td class="paramname">right</td><td>See <a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a1aea1fe935b269943de61d223e6bcc93" title="Creates a PSF fitting source by detecting bright pixels.">OverlapSource::OverlapSource()</a> </td></tr>
    <tr><td class="paramname">bottom</td><td>See <a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a1aea1fe935b269943de61d223e6bcc93" title="Creates a PSF fitting source by detecting bright pixels.">OverlapSource::OverlapSource()</a> </td></tr>
    <tr><td class="paramname">top</td><td>See <a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a1aea1fe935b269943de61d223e6bcc93" title="Creates a PSF fitting source by detecting bright pixels.">OverlapSource::OverlapSource()</a> </td></tr>
    <tr><td class="paramname">output_fname</td><td>See <a class="el" href="classFitPSF_1_1OverlapSource.xhtml#a1aea1fe935b269943de61d223e6bcc93" title="Creates a PSF fitting source by detecting bright pixels.">OverlapSource::OverlapSource()</a> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a0f6d9fdab329c23bbd9b97046004e040"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f6d9fdab329c23bbd9b97046004e040">&#9670;&nbsp;</a></span>~LinearSource()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">FitPSF::LinearSource::~LinearSource </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clean-up allocated fitting matrices. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="aebb24e1232a3bb34c6c4228b5337748b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aebb24e1232a3bb34c6c4228b5337748b">&#9670;&nbsp;</a></span>calculate_predicted_pixel_values()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::LinearSource::calculate_predicted_pixel_values </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>pixel_left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>pixel_bottom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::valarray&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>parameter_sets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::valarray&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>pixel_integrals</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the integral of PSF * sub-pixel map over the given pixel for a set of PSF paramaters. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pixel_left</td><td>The left boundary of the pixel </td></tr>
    <tr><td class="paramname">pixel_bottom</td><td>The bottom bounary of the pixel </td></tr>
    <tr><td class="paramname">parameter_sets</td><td>The collection of PSF parameters for which to calculate the predicted pixel response. </td></tr>
    <tr><td class="paramname">pixel_integrals</td><td>The array to fill with the final result. Must already have the correct size. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ae30080c88e28ea35fd18a082df58625c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae30080c88e28ea35fd18a082df58625c">&#9670;&nbsp;</a></span>fill_background_excess()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::LinearSource::fill_background_excess </td>
          <td>(</td>
          <td class="paramtype">Eigen::VectorBlock&lt; Eigen::VectorXd &gt; &amp;&#160;</td>
          <td class="paramname"><em>shape_fit_background_excess</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Fill vectors with the background excess values of the source pixels used for fitting. </p>
<p>Just as <a class="el" href="classFitPSF_1_1LinearSource.xhtml#a38d669a11dab6e67eb339f012ff0e010" title="Prepare matrices giving PSF integrals over the source pixels.">fill_pixel_integral_matrix()</a>, the result is split into two pieces: the output argument to this method, with entries for shape fitting pixels only and an internally stored matrix for flux-only fitting pixels. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">shape_fit_background_excess</td><td>See same name argument of prepare_for_fitting. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aeb738df71a81cd99f455691a90d66058"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeb738df71a81cd99f455691a90d66058">&#9670;&nbsp;</a></span>fill_fluxfit_column()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class SHAPE_FIT_OUTPUT_TYPE , class FLUX_FIT_OUTPUT_TYPE &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::LinearSource::fill_fluxfit_column </td>
          <td>(</td>
          <td class="paramtype">const Eigen::VectorXd &amp;&#160;</td>
          <td class="paramname"><em>psf_expansion_coef</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SHAPE_FIT_OUTPUT_TYPE&#160;</td>
          <td class="paramname"><em>shape_fit_output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FLUX_FIT_OUTPUT_TYPE&#160;</td>
          <td class="paramname"><em>flux_fit_output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>sequential_shape_fit_pixels</em> = <code>true</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>sequential_flux_fit_pixels</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the entries in the flux fitting matrix corresponding to this source. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">psf_expansion_coef</td><td>A vector with the PSF expansion coefficients to assume. </td></tr>
    <tr><td class="paramname">shape_fit_output</td><td>The location to fill with the predicted pixel responses for the given PSF parameters for shape fitting pixels. The order follows the order of source pixels. Must already have the correct size. </td></tr>
    <tr><td class="paramname">flux_fit_output</td><td>The location to fill with the predicted pixel responses for the given PSF parameters for flux but not shape fitting pixels. Which entry gets filled is determined by each pixel's flux_fit_index, so pass the entire vector rather than just the segment for this source. Must already have the correct size. </td></tr>
    <tr><td class="paramname">sequential_shape_fit_pixels</td><td>Is it safe to assume that shape fitting pixels are sequentially ordered in shape_fit_output? </td></tr>
    <tr><td class="paramname">sequential_flux_fit_pixels</td><td>Is it safe to assume that flux fitting only pixels are sequentially ordered in shape_fit_output? </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a38d669a11dab6e67eb339f012ff0e010"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a38d669a11dab6e67eb339f012ff0e010">&#9670;&nbsp;</a></span>fill_pixel_integral_matrix()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::LinearSource::fill_pixel_integral_matrix </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; std::valarray&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>basis_parameter_sets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Eigen::Block&lt; Eigen::MatrixXd &gt; &amp;&#160;</td>
          <td class="paramname"><em>shape_fit_integral_matrix</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Eigen::VectorBlock&lt; Eigen::VectorXd &gt; &amp;&#160;</td>
          <td class="paramname"><em>shape_fit_offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prepare matrices giving PSF integrals over the source pixels. </p>
<p>The result is split between two matrices: the output argument to this method, with entries for shape fitting pixels only and an internally stored matrix for flux-only fitting pixels. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">basis_parameter_sets</td><td>See same name argument of prepare_for_fitting. </td></tr>
    <tr><td class="paramname">shape_fit_integral_matrix</td><td>See same name argument of prepare_for_fitting. </td></tr>
    <tr><td class="paramname">shape_fit_offset</td><td>See same name argument of prepare_for_fitting. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a77c85b9c3c8ad1e3a723b9bba3401254"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a77c85b9c3c8ad1e3a723b9bba3401254">&#9670;&nbsp;</a></span>fit_flux()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double FitPSF::LinearSource::fit_flux </td>
          <td>(</td>
          <td class="paramtype">const Eigen::VectorXd &amp;&#160;</td>
          <td class="paramname"><em>psf_expansion_coef</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Fit for the flux of the source assuming the given PSF shape parameters and return the change from its previous value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">psf_expansion_coef</td><td>A vector with the expansion coefficients of the PSF parameters to assume. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ad2200ab6548aad154ec0dd1735239839"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad2200ab6548aad154ec0dd1735239839">&#9670;&nbsp;</a></span>pixel_excess_reductions()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::LinearSource::pixel_excess_reductions </td>
          <td>(</td>
          <td class="paramtype">const Eigen::VectorXd &amp;&#160;</td>
          <td class="paramname"><em>to_dot_with</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double &amp;&#160;</td>
          <td class="paramname"><em>dot_product</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double &amp;&#160;</td>
          <td class="paramname"><em>excess_sum_squares</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate the dot of pixel excesses with the given quantity as well as with itself. </p>
<p>Having this function virtual allows optimizing the calculation in some cases (e.g. when fitting for PSF which linearly depends on its parameters). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">to_dot_with</td><td>A vector of values to dot with the pixel excess values. </td></tr>
    <tr><td class="paramname">dot_product</td><td>On exit this variable is set to the dot product of to_dot_with and the pixel excesses. </td></tr>
    <tr><td class="paramname">excess_sum_squares</td><td>On exit this variable is set to the sum of the squares of the pixel excesses. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classFitPSF_1_1Source.xhtml#a6840b9ccbbba192d2cbb617d82846a6e">FitPSF::Source&lt; PSF_TYPE &gt;</a>.</p>

</div>
</div>
<a id="acec66428ec0cfeaef9e608e7b551e9fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acec66428ec0cfeaef9e608e7b551e9fd">&#9670;&nbsp;</a></span>pixel_psf()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double FitPSF::LinearSource::pixel_psf </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="EllipticalGaussianIntegralByOrder_8h.xhtml#a9779b56088bafa3895c2f587f5e39a7f">PSF::SDKDerivative</a>&#160;</td>
          <td class="paramname"> = <code>PSF::NO_DERIV</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The integral of the normalized PSF over the current pixel and its derivatives. </p>

</div>
</div>
<a id="ab36d0b0b3027c659c90ac78906b01d85"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab36d0b0b3027c659c90ac78906b01d85">&#9670;&nbsp;</a></span>prepare_for_fitting()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::LinearSource::prepare_for_fitting </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; std::valarray&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>basis_parameter_sets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Eigen::Block&lt; Eigen::MatrixXd &gt;&#160;</td>
          <td class="paramname"><em>shape_fit_integral_matrix</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Eigen::VectorBlock&lt; Eigen::VectorXd &gt;&#160;</td>
          <td class="paramname"><em>shape_fit_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Eigen::VectorBlock&lt; Eigen::VectorXd &gt;&#160;</td>
          <td class="paramname"><em>shape_fit_background_excess</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>A post-processing step to prepare the source for fitting, which must be called after all sources are constructed. </p>
<p>In addition to setting up the source it also fills pieces of the matrices needed for fitting. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">basis_parameter_sets</td><td>The collection of PSF parameter basis vectors for which to calculate the predicted pixel response. The first set should correspond to the overall integral being projected out of the basis. </td></tr>
    <tr><td class="paramname">shape_fit_integral_matrix</td><td>A matrix piece filled by this method giving the integrals over the shape fitting source pixels but with only one basis vector contributing ( \(\mathbf{\tilde{M}^i}\) in the documentation). Must already have the correct size. The order of the rows is the same as the order of source pixels, but with non shape-fitting pixels skipped. </td></tr>
    <tr><td class="paramname">shape_fit_offset</td><td>A vector piece filled by this method, giving the offset to apply during the fitting due to the basis vectors selected to have zero overall PSF integral. </td></tr>
    <tr><td class="paramname">shape_fit_background_excess</td><td>The vector to fill with the background excess values for shape fitting pixels. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a6c8553d077d159cef0d0fe344bbef80a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6c8553d077d159cef0d0fe344bbef80a">&#9670;&nbsp;</a></span>ready_to_fit()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool FitPSF::LinearSource::ready_to_fit </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Is this source ready for PSF fitting? </p>

<p>Reimplemented from <a class="el" href="classFitPSF_1_1Source.xhtml#a2984d5e2950a253812df473166664961">FitPSF::Source&lt; PSF_TYPE &gt;</a>.</p>

</div>
</div>
<a id="a7358c4bcf29ea15c34e10bbf20be1547"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7358c4bcf29ea15c34e10bbf20be1547">&#9670;&nbsp;</a></span>reorder_flux_fit_column()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class OUTPUT_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::LinearSource::reorder_flux_fit_column </td>
          <td>(</td>
          <td class="paramtype">const Eigen::VectorXd &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>shape_fit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OUTPUT_TYPE &amp;&#160;</td>
          <td class="paramname"><em>output</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Re-orders a flux fitting column from the order matching the list of source pixels to the order specified by the flux_fit_index() <a class="el" href="classFitPSF_1_1Pixel.xhtml" title="A class tracking all pixel level informaiton for pixels participating in PSF/PRF fitting.">Pixel</a> method. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">input</td><td>The input vector to re-order. The entries should be in the same order as the sub-set of source pixels (shape vs flux fit) for which this vector applies. </td></tr>
    <tr><td class="paramname">shape_fit</td><td>Are the pixels being re-ordered shape fitting (vs flux fitting only)? </td></tr>
    <tr><td class="paramname">output</td><td>The output vector to fill. Entries are according to the flux_fit_index() of the pixels. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a47d1ab85b725db040b85452e14c1c276"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47d1ab85b725db040b85452e14c1c276">&#9670;&nbsp;</a></span>signal_to_noise()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double FitPSF::LinearSource::signal_to_noise </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The signal to noise ratio. </p>

<p>Reimplemented from <a class="el" href="classCore_1_1Source.xhtml#adddb2dbf7bee1e637fb49a491568d459">Core::Source</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="aaf50f12217df23fb1fb1c46086b4c79e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf50f12217df23fb1fb1c46086b4c79e">&#9670;&nbsp;</a></span>__flux_fit_bg_excess</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::VectorXd FitPSF::LinearSource::__flux_fit_bg_excess</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The same as __shape_fit_bg_excess, but for pixels participating in flux fitting only (excluded from shape fitting). </p>

</div>
</div>
<a id="ac3988a0ebda71fbc3a5c69e98b10fff1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac3988a0ebda71fbc3a5c69e98b10fff1">&#9670;&nbsp;</a></span>__flux_fit_integral_matrix</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::MatrixXd FitPSF::LinearSource::__flux_fit_integral_matrix</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The same as __shape_fit_integral_matrix, but for pixels participating in flux fitting only (excluded from shape fitting). </p>

</div>
</div>
<a id="a2fe78b6c2f0892a30adfcf5812a8d68c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2fe78b6c2f0892a30adfcf5812a8d68c">&#9670;&nbsp;</a></span>__flux_fit_offset</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::VectorXd FitPSF::LinearSource::__flux_fit_offset</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The same as __shape_fit_offset, but for pixels participating in flux fitting only (excluded from shape fitting). </p>

</div>
</div>
<a id="af70f034a15e7915101a824bd892361b9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af70f034a15e7915101a824bd892361b9">&#9670;&nbsp;</a></span>__psf</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classPSF_1_1PiecewiseBicubic.xhtml">PSF::PiecewiseBicubic</a>&amp; FitPSF::LinearSource::__psf</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>See psf argument of the constructors. </p>

</div>
</div>
<a id="a9ad185a6c8256c2542bd2170daaa2d81"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9ad185a6c8256c2542bd2170daaa2d81">&#9670;&nbsp;</a></span>__ready_to_fit</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool FitPSF::LinearSource::__ready_to_fit</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Is this source ready for PSF fitting. </p>

</div>
</div>
<a id="afcd52edb366d1ba5800e3076ef1c8042"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afcd52edb366d1ba5800e3076ef1c8042">&#9670;&nbsp;</a></span>__shape_fit_bg_excess</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const Eigen::VectorBlock&lt;Eigen::VectorXd&gt;* FitPSF::LinearSource::__shape_fit_bg_excess</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>A (piece of a) vector of the background excess values of the source pixels used in shape fitting. </p>

</div>
</div>
<a id="a773fffe45887bb8595e695bbef5566ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a773fffe45887bb8595e695bbef5566ae">&#9670;&nbsp;</a></span>__shape_fit_integral_matrix</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const Eigen::Block&lt;Eigen::MatrixXd&gt;* FitPSF::LinearSource::__shape_fit_integral_matrix</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>A (piece of a) matrix which after applying to the PSF fitting coefficients and scaling by the amplitude gives the integral of the PSF over the source pixels selected for shape fitting. </p>

</div>
</div>
<a id="a3e00e7b35d1fc778a808bf9ed5b6bb3c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3e00e7b35d1fc778a808bf9ed5b6bb3c">&#9670;&nbsp;</a></span>__shape_fit_offset</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const Eigen::VectorBlock&lt;Eigen::VectorXd&gt;* FitPSF::LinearSource::__shape_fit_offset</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>A (piece of a) vector which after scaling by the amplitude gives the integral of a PSF with only the overall integral parameters for the source pixels selected for shape fitting. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/kpenev/projects/git/AstroWISP/doc_src/FitPSF/<a class="el" href="LinearSource_8h_source.xhtml">LinearSource.h</a></li>
<li>/home/kpenev/projects/git/AstroWISP/doc_src/FitPSF/<a class="el" href="LinearSource_8cpp.xhtml">LinearSource.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><b>FitPSF</b></li><li class="navelem"><a class="el" href="classFitPSF_1_1LinearSource.xhtml">LinearSource</a></li>
    <li class="footer">Generated on Wed Jan 15 2025 16:00:29 for My Project by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1 </li>
  </ul>
</div>
</body>
</html>
