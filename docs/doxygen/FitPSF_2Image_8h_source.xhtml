<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>My Project: /home/kpenev/projects/git/AstroWISP/doc_src/FitPSF/Image.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "ams.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.jsdelivr.net/npm/mathjax@2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">My Project
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('FitPSF_2Image_8h_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Image.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="FitPSF_2Image_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160; </div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#ifndef __PSF_FIT_PIXEL_IMAGE_H</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#define __PSF_FIT_PIXEL_IMAGE_H</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160; </div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &quot;../Core/SharedLibraryExportMacros.h&quot;</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="Pixel_8h.xhtml">Pixel.h</a>&quot;</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="FitPSF_2Source_8h.xhtml">Source.h</a>&quot;</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="FitPSF_2Image_8h.xhtml">Image.h</a>&quot;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &quot;../Background/Source.h&quot;</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &quot;../Core/Image.h&quot;</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &quot;../Core/NaN.h&quot;</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160; </div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">namespace </span>FitPSF {</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> SOURCE_TYPE&gt;</div>
<div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="classFitPSF_1_1Image.xhtml">   27</a></span>&#160;        <span class="keyword">class  </span><a class="code" href="classFitPSF_1_1Image.xhtml">Image</a> : <span class="keyword">public</span> <a class="code" href="classCore_1_1Image.xhtml">Core::Image</a>&lt;double&gt; {</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        <span class="keyword">private</span>:</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;            <span class="keyword">typedef</span> std::vector&lt; Pixel&lt;SOURCE_TYPE&gt;* &gt; PixelVector;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="classFitPSF_1_1Image.xhtml#aa1eb7ae46a4ae0416a5f0ade71e46b12">   33</a></span>&#160;            PixelVector <a class="code" href="classFitPSF_1_1Image.xhtml#aa1eb7ae46a4ae0416a5f0ade71e46b12">__fit_pixels</a>;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160; </div>
<div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="classFitPSF_1_1Image.xhtml#aafbc992aa45bb7cbec9f261b113524e1">   36</a></span>&#160;            <span class="keywordtype">double</span> <a class="code" href="classFitPSF_1_1Image.xhtml#aafbc992aa45bb7cbec9f261b113524e1">__gain</a>;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="classFitPSF_1_1Image.xhtml#ab1a31e0a8883aed059b248ee98bba414">   39</a></span>&#160;            <span class="keywordtype">unsigned</span> <a class="code" href="classFitPSF_1_1Image.xhtml#ab1a31e0a8883aed059b248ee98bba414">__id</a>;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;            std::pair&lt;double, double&gt; <a class="code" href="classFitPSF_1_1Image.xhtml#a2b1843899b347a0f63c4489ec089b67f">value_variance</a>(</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;                <span class="keywordtype">unsigned</span> <a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5a4ef066f5f0262b09d376406005fee8ff">x</a>,</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                <span class="keywordtype">unsigned</span> <a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5ab6b09e0eeba818d3c00951c9de879af7">y</a></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            ) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="classFitPSF_1_1Image.xhtml#a3028ef34e0d84eb57bd5700c81d8975a">delete_allocated_pixels</a>();</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keyword">public</span>:</div>
<div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="classFitPSF_1_1Image.xhtml#a21bde15e929b6ba11157ab58f52d3d7a">   56</a></span>&#160;            <a class="code" href="classFitPSF_1_1Image.xhtml#a21bde15e929b6ba11157ab58f52d3d7a">Image</a>(</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">id</span> = 0,</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                <span class="keywordtype">double</span> <a class="code" href="classFitPSF_1_1Image.xhtml#a96a7cdf92c232948fa57d025607b9cc8">gain</a> = 1.0</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            ) :</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                Core::<a class="code" href="classFitPSF_1_1Image.xhtml">Image</a>&lt;double&gt;(),</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                <a class="code" href="classFitPSF_1_1Image.xhtml#aafbc992aa45bb7cbec9f261b113524e1">__gain</a>(<a class="code" href="classFitPSF_1_1Image.xhtml#a96a7cdf92c232948fa57d025607b9cc8">gain</a>),</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                <a class="code" href="classFitPSF_1_1Image.xhtml#ab1a31e0a8883aed059b248ee98bba414">__id</a>(id)</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            {</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="preprocessor">#ifdef VERBOSE_DEBUG</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                std::cerr &lt;&lt; <span class="stringliteral">&quot;Created dummy FitPSF::Image instance at &quot;</span> &lt;&lt; <span class="keyword">this</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                          &lt;&lt; std::endl;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            }</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            <span class="keywordtype">unsigned</span> id()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="classFitPSF_1_1Image.xhtml#ab1a31e0a8883aed059b248ee98bba414">__id</a>;}</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            Pixel&lt;SOURCE_TYPE&gt; *<a class="code" href="classFitPSF_1_1Image.xhtml#aa7ded3ac273bcda4dabd6b25be85cc6b">assign_to_source</a>(</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                <span class="keywordtype">unsigned</span> <a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5a4ef066f5f0262b09d376406005fee8ff">x</a>,</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160; </div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                <span class="keywordtype">unsigned</span> <a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5ab6b09e0eeba818d3c00951c9de879af7">y</a>,</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160; </div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                SOURCE_TYPE *source</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            );</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno"><a class="line" href="classFitPSF_1_1Image.xhtml#ac81c11f574acf102d879b9af9d4ae0b4">   91</a></span>&#160;            <span class="keyword">const</span> <a class="code" href="classFitPSF_1_1Pixel.xhtml">Pixel&lt;SOURCE_TYPE&gt;</a> *<a class="code" href="classFitPSF_1_1Image.xhtml#ac81c11f574acf102d879b9af9d4ae0b4">operator()</a>(<span class="keywordtype">unsigned</span> <a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5a4ef066f5f0262b09d376406005fee8ff">x</a>,</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                                                 <span class="keywordtype">unsigned</span> <a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5ab6b09e0eeba818d3c00951c9de879af7">y</a>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="keyword">            </span>{</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                assert(<a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5a4ef066f5f0262b09d376406005fee8ff">x</a> &lt; <a class="code" href="classCore_1_1Image.xhtml#a42cc7aebe9562320ad54059f46b2e971">x_resolution</a>());</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                assert(<a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5ab6b09e0eeba818d3c00951c9de879af7">y</a> &lt; <a class="code" href="classCore_1_1Image.xhtml#a65aa28ca509966bacb18a1a0ce122971">y_resolution</a>());</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                assert(<a class="code" href="classFitPSF_1_1Image.xhtml#aa1eb7ae46a4ae0416a5f0ade71e46b12">__fit_pixels</a>[<a class="code" href="classCore_1_1Image.xhtml#aabc6681bd8b819f1ea81f36e322395be">index</a>(<a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5a4ef066f5f0262b09d376406005fee8ff">x</a>, <a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5ab6b09e0eeba818d3c00951c9de879af7">y</a>)] != NULL);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classFitPSF_1_1Image.xhtml#aa1eb7ae46a4ae0416a5f0ade71e46b12">__fit_pixels</a>[<a class="code" href="classCore_1_1Image.xhtml#aabc6681bd8b819f1ea81f36e322395be">index</a>(<a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5a4ef066f5f0262b09d376406005fee8ff">x</a>, <a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5ab6b09e0eeba818d3c00951c9de879af7">y</a>)];</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            }</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; </div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="keywordtype">double</span> <a class="code" href="classFitPSF_1_1Image.xhtml#ac601916e08b01fdcace516f505aa5def">background_excess</a>(</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                <span class="keywordtype">unsigned</span> <a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5a4ef066f5f0262b09d376406005fee8ff">x</a>,</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                <span class="keywordtype">unsigned</span> <a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5ab6b09e0eeba818d3c00951c9de879af7">y</a>,</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                <span class="keyword">const</span> <a class="code" href="classBackground_1_1Source.xhtml">Background::Source</a> &amp;background</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            ) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="keywordtype">double</span> <a class="code" href="classFitPSF_1_1Image.xhtml#ac601916e08b01fdcace516f505aa5def">background_excess</a>(</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                <span class="keywordtype">unsigned</span> <a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5a4ef066f5f0262b09d376406005fee8ff">x</a>,</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; </div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                <span class="keywordtype">unsigned</span> <a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5ab6b09e0eeba818d3c00951c9de879af7">y</a>,</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                <span class="keywordtype">double</span> background_electrons,</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160; </div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                <span class="keywordtype">double</span> background_electrons_variance</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            ) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="preprocessor">#ifdef TOOLCHAIN_CLANG</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="preprocessor">    #pragma clang diagnostic push</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="preprocessor">    #pragma clang diagnostic ignored &quot;-Woverloaded-virtual&quot;</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="preprocessor">#elif TOOLCHAIN_GCC</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="preprocessor">    #pragma GCC diagnostic push</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="preprocessor">    #pragma GCC diagnostic ignored &quot;-Woverloaded-virtual&quot;</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160; </div>
<div class="line"><a name="l00146"></a><span class="lineno"><a class="line" href="classFitPSF_1_1Image.xhtml#a6f49c9bd054e7e20c3e89f0fd756ef2f">  146</a></span>&#160;            <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classFitPSF_1_1Image.xhtml#a6f49c9bd054e7e20c3e89f0fd756ef2f">wrap</a>(</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                <span class="keywordtype">double</span> *values,</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                <span class="keywordtype">char</span> *<a class="code" href="classCore_1_1Image.xhtml#a2428fad026e48b93865fd568413fca71">mask</a>,</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160; </div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <a class="code" href="classCore_1_1Image.xhtml#a42cc7aebe9562320ad54059f46b2e971">x_resolution</a>,</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160; </div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <a class="code" href="classCore_1_1Image.xhtml#a65aa28ca509966bacb18a1a0ce122971">y_resolution</a>,</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160; </div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                <span class="keywordtype">double</span> *errors,</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160; </div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">id</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            )</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            {</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                <a class="code" href="classCore_1_1Image.xhtml#ab64230c162fcfa9e6aa79e83d78743a3">Core::Image&lt;double&gt;::wrap</a>(values,</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                                            <a class="code" href="classCore_1_1Image.xhtml#a2428fad026e48b93865fd568413fca71">mask</a>,</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                                            <a class="code" href="classCore_1_1Image.xhtml#a42cc7aebe9562320ad54059f46b2e971">x_resolution</a>,</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                                            <a class="code" href="classCore_1_1Image.xhtml#a65aa28ca509966bacb18a1a0ce122971">y_resolution</a>,</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                                            errors);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                <a class="code" href="classFitPSF_1_1Image.xhtml#aa1eb7ae46a4ae0416a5f0ade71e46b12">__fit_pixels</a>.resize(<a class="code" href="classCore_1_1Image.xhtml#a42cc7aebe9562320ad54059f46b2e971">x_resolution</a> * <a class="code" href="classCore_1_1Image.xhtml#a65aa28ca509966bacb18a1a0ce122971">y_resolution</a>);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                <a class="code" href="classFitPSF_1_1Image.xhtml#aafbc992aa45bb7cbec9f261b113524e1">__gain</a> = 1.0;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                <a class="code" href="classFitPSF_1_1Image.xhtml#ab1a31e0a8883aed059b248ee98bba414">__id</a> = id;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="preprocessor">#ifdef VERBOSE_DEBUG</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                std::cerr &lt;&lt; <span class="stringliteral">&quot;FitPSF::Image instance at &quot;</span> &lt;&lt; <span class="keyword">this</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                          &lt;&lt; <span class="stringliteral">&quot;with resolution &quot;</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                          &lt;&lt; this-&gt;<a class="code" href="classCore_1_1Image.xhtml#a42cc7aebe9562320ad54059f46b2e971">x_resolution</a>() &lt;&lt; <span class="stringliteral">&quot;x&quot;</span> &lt;&lt; this-&gt;<a class="code" href="classCore_1_1Image.xhtml#a65aa28ca509966bacb18a1a0ce122971">y_resolution</a>()</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                          &lt;&lt; <span class="stringliteral">&quot; wrapped c-style data:&quot;</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                          &lt;&lt; <span class="stringliteral">&quot;\tvalues at: &quot;</span> &lt;&lt; values</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                          &lt;&lt; <span class="stringliteral">&quot;\terrors at: &quot;</span> &lt;&lt; errors</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                          &lt;&lt; <span class="stringliteral">&quot;\tmask at: &quot;</span> &lt;&lt; (<span class="keywordtype">void</span>*)<a class="code" href="classCore_1_1Image.xhtml#a2428fad026e48b93865fd568413fca71">mask</a></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                          &lt;&lt; std::endl;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            }</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160; </div>
<div class="line"><a name="l00187"></a><span class="lineno"><a class="line" href="classFitPSF_1_1Image.xhtml#a4ff010016b3752dc8f54dabf181c6a78">  187</a></span>&#160;            <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classFitPSF_1_1Image.xhtml#a4ff010016b3752dc8f54dabf181c6a78">wrap</a>(<a class="code" href="classCore_1_1Image.xhtml">Core::Image&lt;double&gt;</a> &amp;image)</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            {</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                <a class="code" href="classCore_1_1Image.xhtml#ab64230c162fcfa9e6aa79e83d78743a3">Core::Image&lt;double&gt;::wrap</a>(image);</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                <a class="code" href="classFitPSF_1_1Image.xhtml#aa1eb7ae46a4ae0416a5f0ade71e46b12">__fit_pixels</a>.resize(image.<a class="code" href="classCore_1_1Image.xhtml#a42cc7aebe9562320ad54059f46b2e971">x_resolution</a>() * image.<a class="code" href="classCore_1_1Image.xhtml#a65aa28ca509966bacb18a1a0ce122971">y_resolution</a>());</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                <a class="code" href="classFitPSF_1_1Image.xhtml#aafbc992aa45bb7cbec9f261b113524e1">__gain</a> = 1.0;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="preprocessor">#ifdef VERBOSE_DEBUG</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                std::cerr &lt;&lt; <span class="stringliteral">&quot;FitPSF::Image instance at &quot;</span> &lt;&lt; <span class="keyword">this</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                          &lt;&lt; <span class="stringliteral">&quot;with resolution &quot;</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                          &lt;&lt; <a class="code" href="classCore_1_1Image.xhtml#a42cc7aebe9562320ad54059f46b2e971">x_resolution</a>() &lt;&lt; <span class="stringliteral">&quot;x&quot;</span> &lt;&lt; <a class="code" href="classCore_1_1Image.xhtml#a65aa28ca509966bacb18a1a0ce122971">y_resolution</a>()</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                          &lt;&lt; <span class="stringliteral">&quot; wrapped image at:&quot;</span> &lt;&lt; &amp;image</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                          &lt;&lt; std::endl;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            }</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno"><a class="line" href="classFitPSF_1_1Image.xhtml#a96a7cdf92c232948fa57d025607b9cc8">  202</a></span>&#160;            <span class="keywordtype">double</span> <a class="code" href="classFitPSF_1_1Image.xhtml#a96a7cdf92c232948fa57d025607b9cc8">gain</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="classFitPSF_1_1Image.xhtml#aafbc992aa45bb7cbec9f261b113524e1">__gain</a>;}</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160; </div>
<div class="line"><a name="l00205"></a><span class="lineno"><a class="line" href="classFitPSF_1_1Image.xhtml#a347ebc291c6a2b751a909e61b39104c7">  205</a></span>&#160;            <span class="keyword">virtual</span> <a class="code" href="classFitPSF_1_1Image.xhtml#a347ebc291c6a2b751a909e61b39104c7">~Image</a>() {</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="preprocessor">#ifdef VERBOSE_DEBUG</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                std::cerr &lt;&lt; <span class="stringliteral">&quot;Destroying FitPSF::Image instance at &quot;</span> &lt;&lt; <span class="keyword">this</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                          &lt;&lt; <span class="stringliteral">&quot;with resolution &quot;</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                          &lt;&lt; <a class="code" href="classCore_1_1Image.xhtml#a42cc7aebe9562320ad54059f46b2e971">x_resolution</a>() &lt;&lt; <span class="stringliteral">&quot;x&quot;</span> &lt;&lt; <a class="code" href="classCore_1_1Image.xhtml#a65aa28ca509966bacb18a1a0ce122971">y_resolution</a>()</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                          &lt;&lt; std::endl;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                <a class="code" href="classFitPSF_1_1Image.xhtml#a3028ef34e0d84eb57bd5700c81d8975a">delete_allocated_pixels</a>();</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            }</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        }; <span class="comment">//End Image class.</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160; </div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="preprocessor">#ifdef TOOLCHAIN_CLANG</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="preprocessor">    #pragma clang diagnostic pop</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="preprocessor">#elif TOOLCHAIN_GCC</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="preprocessor">    #pragma GCC diagnostic pop</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160; </div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">class</span> SOURCE_TYPE&gt;</div>
<div class="line"><a name="l00223"></a><span class="lineno"><a class="line" href="classFitPSF_1_1Image.xhtml#aa7ded3ac273bcda4dabd6b25be85cc6b">  223</a></span>&#160;        <a class="code" href="classFitPSF_1_1Pixel.xhtml">Pixel&lt;SOURCE_TYPE&gt;</a> *<a class="code" href="classFitPSF_1_1Image.xhtml#aa7ded3ac273bcda4dabd6b25be85cc6b">Image&lt;SOURCE_TYPE&gt;::assign_to_source</a>(</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            <span class="keywordtype">unsigned</span> <a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5a4ef066f5f0262b09d376406005fee8ff">x</a>,</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            <span class="keywordtype">unsigned</span> <a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5ab6b09e0eeba818d3c00951c9de879af7">y</a>,</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            SOURCE_TYPE *source</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        )</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        {</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            assert(<a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5a4ef066f5f0262b09d376406005fee8ff">x</a> &lt; x_resolution());</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            assert(<a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5ab6b09e0eeba818d3c00951c9de879af7">y</a> &lt; y_resolution());</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="preprocessor">#ifdef VERBOSE_DEBUG</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;            std::cerr &lt;&lt; <span class="stringliteral">&quot;Assigning Pixel(&quot;</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                      &lt;&lt; <a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5a4ef066f5f0262b09d376406005fee8ff">x</a></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                      &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                      &lt;&lt; <a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5ab6b09e0eeba818d3c00951c9de879af7">y</a></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                      &lt;&lt; <span class="stringliteral">&quot;) to Source(&quot;</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                      &lt;&lt; source-&gt;x()</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                      &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                      &lt;&lt; source-&gt;y()</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                      &lt;&lt; <span class="stringliteral">&quot;): &quot;</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                      &lt;&lt; source</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                      &lt;&lt; std::endl;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            <span class="keyword">typename</span> PixelVector::iterator destination = (</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                __fit_pixels.begin()</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                +</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                index(<a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5a4ef066f5f0262b09d376406005fee8ff">x</a>, <a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5ab6b09e0eeba818d3c00951c9de879af7">y</a>)</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            );</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160; </div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="preprocessor">#ifdef VERBOSE_DEBUG</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            std::cerr &lt;&lt; <span class="stringliteral">&quot;Pixel &quot;</span>;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160; </div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            <span class="keywordflow">if</span>(*destination == NULL) {</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="preprocessor">#ifdef VERBOSE_DEBUG</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                std::cerr &lt;&lt; <span class="stringliteral">&quot;does not exist. &quot;</span>;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                *destination = <span class="keyword">new</span> <a class="code" href="classFitPSF_1_1Pixel.xhtml">Pixel&lt;SOURCE_TYPE&gt;</a>(<a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5a4ef066f5f0262b09d376406005fee8ff">x</a>,</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                                                      <a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5ab6b09e0eeba818d3c00951c9de879af7">y</a>,</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                                                      value_variance(<a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5a4ef066f5f0262b09d376406005fee8ff">x</a>, <a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5ab6b09e0eeba818d3c00951c9de879af7">y</a>),</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                                                      photometry_flag(<a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5a4ef066f5f0262b09d376406005fee8ff">x</a>, <a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5ab6b09e0eeba818d3c00951c9de879af7">y</a>),</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                                                      source);</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="preprocessor">#ifdef VERBOSE_DEBUG</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                std::cerr &lt;&lt; <span class="stringliteral">&quot;exists. &quot;</span>;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                (*destination)-&gt;add_to_source(source);</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;            }</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160; </div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="preprocessor">#ifdef VERBOSE_DEBUG</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            std::cerr &lt;&lt; <span class="stringliteral">&quot;Now with &quot;</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                &lt;&lt; (*destination)-&gt;sources().size()</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                &lt;&lt; <span class="stringliteral">&quot; sources.&quot;</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                &lt;&lt; std::endl;</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160; </div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;            <span class="keywordflow">return</span> *destination;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        }</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160; </div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">class</span> SOURCE_TYPE&gt;</div>
<div class="line"><a name="l00281"></a><span class="lineno"><a class="line" href="classFitPSF_1_1Image.xhtml#a2b1843899b347a0f63c4489ec089b67f">  281</a></span>&#160;        std::pair&lt;double, double&gt; <a class="code" href="classFitPSF_1_1Image.xhtml#a2b1843899b347a0f63c4489ec089b67f">Image&lt;SOURCE_TYPE&gt;::value_variance</a>(</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;            <span class="keywordtype">unsigned</span> <a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5a4ef066f5f0262b09d376406005fee8ff">x</a>,</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;            <span class="keywordtype">unsigned</span> <a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5ab6b09e0eeba818d3c00951c9de879af7">y</a></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        )<span class="keyword"> const</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            <span class="keywordtype">double</span> value = <a class="code" href="classCore_1_1Image.xhtml#ae6b5d26b3c1e0f1cbc1da6c0b5f0bc7b">Core::Image&lt;double&gt;::operator()</a>(<a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5a4ef066f5f0262b09d376406005fee8ff">x</a>, <a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5ab6b09e0eeba818d3c00951c9de879af7">y</a>) * __gain;</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="preprocessor">#ifdef VERBOSE_DEBUG</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            <span class="keywordflow">if</span>(has_errors())</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                std::cerr &lt;&lt; <span class="stringliteral">&quot;Variance from separate image = &quot;</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                          &lt;&lt; std::pow(error(<a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5a4ef066f5f0262b09d376406005fee8ff">x</a>, <a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5ab6b09e0eeba818d3c00951c9de879af7">y</a>) * __gain, 2)</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                          &lt;&lt; std::endl;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                std::cerr &lt;&lt; <span class="stringliteral">&quot;Variance from poission statistics = &quot;</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                          &lt;&lt; std::abs(value)</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                          &lt;&lt; std::endl;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            <span class="keywordflow">return</span> std::pair&lt;double, double&gt;(</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                value,</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                (</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                    has_errors()</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                    ? std::pow(error(<a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5a4ef066f5f0262b09d376406005fee8ff">x</a>, <a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5ab6b09e0eeba818d3c00951c9de879af7">y</a>) * __gain, 2)</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                    : std::abs(value)</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                )</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            );</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        }</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160; </div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">class</span> SOURCE_TYPE&gt;</div>
<div class="line"><a name="l00308"></a><span class="lineno"><a class="line" href="classFitPSF_1_1Image.xhtml#a3028ef34e0d84eb57bd5700c81d8975a">  308</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classFitPSF_1_1Image.xhtml#a3028ef34e0d84eb57bd5700c81d8975a">Image&lt;SOURCE_TYPE&gt;::delete_allocated_pixels</a>()</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        {</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="preprocessor">#ifdef VERBOSE_DEBUG</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            std::cerr &lt;&lt; <span class="stringliteral">&quot;Deleting all allocated FitPSF pixels.&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            <span class="keywordflow">for</span>(</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                <span class="keyword">typename</span> PixelVector::iterator p = __fit_pixels.begin();</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                p != __fit_pixels.end();</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                ++p</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            )</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                <span class="keywordflow">if</span>(*p != NULL) <span class="keyword">delete</span> *p;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        }</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160; </div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">class</span> SOURCE_TYPE&gt;</div>
<div class="line"><a name="l00322"></a><span class="lineno"><a class="line" href="classFitPSF_1_1Image.xhtml#ac601916e08b01fdcace516f505aa5def">  322</a></span>&#160;        <span class="keywordtype">double</span> <a class="code" href="classFitPSF_1_1Image.xhtml#ac601916e08b01fdcace516f505aa5def">Image&lt;SOURCE_TYPE&gt;::background_excess</a>(</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            <span class="keywordtype">unsigned</span>                    <a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5a4ef066f5f0262b09d376406005fee8ff">x</a>,</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;            <span class="keywordtype">unsigned</span>                    <a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5ab6b09e0eeba818d3c00951c9de879af7">y</a>,</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            <span class="keyword">const</span> <a class="code" href="classBackground_1_1Source.xhtml">Background::Source</a>    &amp;background</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        )<span class="keyword"> const</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            std::pair&lt;double, double&gt; pixel_val_var = value_variance(<a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5a4ef066f5f0262b09d376406005fee8ff">x</a>, <a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5ab6b09e0eeba818d3c00951c9de879af7">y</a>);</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="Pixel_8cpp.xhtml#af339d0d4bf9f7e1c74e348fa2711b0a0">FitPSF::background_excess</a>(pixel_val_var.first,</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                                             pixel_val_var.second,</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                                             background,</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                                             __gain);</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        }</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160; </div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">class</span> SOURCE_TYPE&gt;</div>
<div class="line"><a name="l00336"></a><span class="lineno"><a class="line" href="classFitPSF_1_1Image.xhtml#a8b54c82b7d9dd1b650fde4e75119a62f">  336</a></span>&#160;        <span class="keywordtype">double</span> <a class="code" href="classFitPSF_1_1Image.xhtml#ac601916e08b01fdcace516f505aa5def">Image&lt;SOURCE_TYPE&gt;::background_excess</a>(</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            <span class="keywordtype">unsigned</span>  <a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5a4ef066f5f0262b09d376406005fee8ff">x</a>,</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;            <span class="keywordtype">unsigned</span>  <a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5ab6b09e0eeba818d3c00951c9de879af7">y</a>,</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;            <span class="keywordtype">double</span>    background_electrons,</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;            <span class="keywordtype">double</span>    background_electrons_variance</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        )<span class="keyword"> const</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            std::pair&lt;double, double&gt; pixel_val_var = value_variance(<a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5a4ef066f5f0262b09d376406005fee8ff">x</a>, <a class="code" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5ab6b09e0eeba818d3c00951c9de879af7">y</a>);</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="Pixel_8cpp.xhtml#af339d0d4bf9f7e1c74e348fa2711b0a0">FitPSF::background_excess</a>(pixel_val_var.first,</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                                             pixel_val_var.second,</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                                             background_electrons,</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                                             background_electrons_variance);</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        }</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160; </div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;} <span class="comment">//End FitPSF namespace.</span></div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160; </div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="ttc" id="aFitPSF_2Image_8h_xhtml"><div class="ttname"><a href="FitPSF_2Image_8h.xhtml">Image.h</a></div><div class="ttdoc">Defines a class describing an image of Pixel pixels.</div></div>
<div class="ttc" id="aFitPSF_2Source_8h_xhtml"><div class="ttname"><a href="FitPSF_2Source_8h.xhtml">Source.h</a></div><div class="ttdoc">Defines the base class for sources participating in PSF fitting.</div></div>
<div class="ttc" id="aPixel_8cpp_xhtml_af339d0d4bf9f7e1c74e348fa2711b0a0"><div class="ttname"><a href="Pixel_8cpp.xhtml#af339d0d4bf9f7e1c74e348fa2711b0a0">FitPSF::background_excess</a></div><div class="ttdeci">double background_excess(double value, double variance, double background_value, double background_variance)</div><div class="ttdoc">Return the square of the signal to noise ratio with which a pixel sticks above a background.</div><div class="ttdef"><b>Definition:</b> Pixel.cpp:13</div></div>
<div class="ttc" id="aPixel_8h_xhtml"><div class="ttname"><a href="Pixel_8h.xhtml">Pixel.h</a></div><div class="ttdoc">Defines a class describing a single pixel participating in PSF/PRF fitting.</div></div>
<div class="ttc" id="aclassBackground_1_1Source_xhtml"><div class="ttname"><a href="classBackground_1_1Source.xhtml">Background::Source</a></div><div class="ttdoc">The base class for the backgnound under a source.</div><div class="ttdef"><b>Definition:</b> Source.h:25</div></div>
<div class="ttc" id="aclassCore_1_1Image_xhtml"><div class="ttname"><a href="classCore_1_1Image.xhtml">Core::Image</a></div><div class="ttdoc">Declare the minimum functionality expected from input images.</div><div class="ttdef"><b>Definition:</b> Image.h:39</div></div>
<div class="ttc" id="aclassCore_1_1Image_xhtml_a2428fad026e48b93865fd568413fca71"><div class="ttname"><a href="classCore_1_1Image.xhtml#a2428fad026e48b93865fd568413fca71">Core::Image&lt; double &gt;::mask</a></div><div class="ttdeci">virtual char mask(unsigned long x, unsigned long y) const</div><div class="ttdoc">The pixel quality flag at the specified position.</div><div class="ttdef"><b>Definition:</b> Image.h:377</div></div>
<div class="ttc" id="aclassCore_1_1Image_xhtml_a42cc7aebe9562320ad54059f46b2e971"><div class="ttname"><a href="classCore_1_1Image.xhtml#a42cc7aebe9562320ad54059f46b2e971">Core::Image&lt; double &gt;::x_resolution</a></div><div class="ttdeci">unsigned long x_resolution() const</div><div class="ttdoc">The number of pixels in the x direction.</div><div class="ttdef"><b>Definition:</b> Image.h:293</div></div>
<div class="ttc" id="aclassCore_1_1Image_xhtml_a65aa28ca509966bacb18a1a0ce122971"><div class="ttname"><a href="classCore_1_1Image.xhtml#a65aa28ca509966bacb18a1a0ce122971">Core::Image&lt; double &gt;::y_resolution</a></div><div class="ttdeci">unsigned long y_resolution() const</div><div class="ttdoc">The number of pixels in the y direction.</div><div class="ttdef"><b>Definition:</b> Image.h:296</div></div>
<div class="ttc" id="aclassCore_1_1Image_xhtml_aabc6681bd8b819f1ea81f36e322395be"><div class="ttname"><a href="classCore_1_1Image.xhtml#aabc6681bd8b819f1ea81f36e322395be">Core::Image&lt; double &gt;::index</a></div><div class="ttdeci">unsigned long index(unsigned long x, unsigned long y) const</div><div class="ttdoc">The index of the pixel at the given location within the 1-D array.</div><div class="ttdef"><b>Definition:</b> Image.h:67</div></div>
<div class="ttc" id="aclassCore_1_1Image_xhtml_ab64230c162fcfa9e6aa79e83d78743a3"><div class="ttname"><a href="classCore_1_1Image.xhtml#ab64230c162fcfa9e6aa79e83d78743a3">Core::Image::wrap</a></div><div class="ttdeci">virtual void wrap(DATA_TYPE *values, char *mask, unsigned long x_resolution, unsigned long y_resolution, DATA_TYPE *errors=NULL)</div><div class="ttdoc">Wrap the given data in an image.</div><div class="ttdef"><b>Definition:</b> Image.h:214</div></div>
<div class="ttc" id="aclassCore_1_1Image_xhtml_ae6b5d26b3c1e0f1cbc1da6c0b5f0bc7b"><div class="ttname"><a href="classCore_1_1Image.xhtml#ae6b5d26b3c1e0f1cbc1da6c0b5f0bc7b">Core::Image::operator()</a></div><div class="ttdeci">DATA_TYPE operator()(unsigned long x, unsigned long y) const</div><div class="ttdoc">Get the pixel value at the specified position.</div><div class="ttdef"><b>Definition:</b> Image.h:299</div></div>
<div class="ttc" id="aclassFitPSF_1_1Image_xhtml"><div class="ttname"><a href="classFitPSF_1_1Image.xhtml">FitPSF::Image</a></div><div class="ttdoc">A class for managing the selection of pixels for PSF/PRF fitting.</div><div class="ttdef"><b>Definition:</b> Image.h:27</div></div>
<div class="ttc" id="aclassFitPSF_1_1Image_xhtml_a21bde15e929b6ba11157ab58f52d3d7a"><div class="ttname"><a href="classFitPSF_1_1Image.xhtml#a21bde15e929b6ba11157ab58f52d3d7a">FitPSF::Image::Image</a></div><div class="ttdeci">Image(unsigned id=0, double gain=1.0)</div><div class="ttdoc">Create a fit pixel manager for the given image.</div><div class="ttdef"><b>Definition:</b> Image.h:56</div></div>
<div class="ttc" id="aclassFitPSF_1_1Image_xhtml_a2b1843899b347a0f63c4489ec089b67f"><div class="ttname"><a href="classFitPSF_1_1Image.xhtml#a2b1843899b347a0f63c4489ec089b67f">FitPSF::Image::value_variance</a></div><div class="ttdeci">std::pair&lt; double, double &gt; value_variance(unsigned x, unsigned y) const</div><div class="ttdoc">The value and variance in electrons and electrons^2 respectively of a pixel.</div><div class="ttdef"><b>Definition:</b> Image.h:281</div></div>
<div class="ttc" id="aclassFitPSF_1_1Image_xhtml_a3028ef34e0d84eb57bd5700c81d8975a"><div class="ttname"><a href="classFitPSF_1_1Image.xhtml#a3028ef34e0d84eb57bd5700c81d8975a">FitPSF::Image::delete_allocated_pixels</a></div><div class="ttdeci">void delete_allocated_pixels()</div><div class="ttdoc">Delete any pixels allocated by assign_to_source()</div><div class="ttdef"><b>Definition:</b> Image.h:308</div></div>
<div class="ttc" id="aclassFitPSF_1_1Image_xhtml_a347ebc291c6a2b751a909e61b39104c7"><div class="ttname"><a href="classFitPSF_1_1Image.xhtml#a347ebc291c6a2b751a909e61b39104c7">FitPSF::Image::~Image</a></div><div class="ttdeci">virtual ~Image()</div><div class="ttdoc">Delete any pixels allocated through assign_to_source.</div><div class="ttdef"><b>Definition:</b> Image.h:205</div></div>
<div class="ttc" id="aclassFitPSF_1_1Image_xhtml_a4ff010016b3752dc8f54dabf181c6a78"><div class="ttname"><a href="classFitPSF_1_1Image.xhtml#a4ff010016b3752dc8f54dabf181c6a78">FitPSF::Image::wrap</a></div><div class="ttdeci">virtual void wrap(Core::Image&lt; double &gt; &amp;image)</div><div class="ttdoc">Wrap the given image.</div><div class="ttdef"><b>Definition:</b> Image.h:187</div></div>
<div class="ttc" id="aclassFitPSF_1_1Image_xhtml_a6f49c9bd054e7e20c3e89f0fd756ef2f"><div class="ttname"><a href="classFitPSF_1_1Image.xhtml#a6f49c9bd054e7e20c3e89f0fd756ef2f">FitPSF::Image::wrap</a></div><div class="ttdeci">virtual void wrap(double *values, char *mask, unsigned long x_resolution, unsigned long y_resolution, double *errors, unsigned id)</div><div class="ttdoc">Wrap the given data in an image.</div><div class="ttdef"><b>Definition:</b> Image.h:146</div></div>
<div class="ttc" id="aclassFitPSF_1_1Image_xhtml_a96a7cdf92c232948fa57d025607b9cc8"><div class="ttname"><a href="classFitPSF_1_1Image.xhtml#a96a7cdf92c232948fa57d025607b9cc8">FitPSF::Image::gain</a></div><div class="ttdeci">double gain() const</div><div class="ttdoc">The gain of the image set at construction.</div><div class="ttdef"><b>Definition:</b> Image.h:202</div></div>
<div class="ttc" id="aclassFitPSF_1_1Image_xhtml_aa1eb7ae46a4ae0416a5f0ade71e46b12"><div class="ttname"><a href="classFitPSF_1_1Image.xhtml#aa1eb7ae46a4ae0416a5f0ade71e46b12">FitPSF::Image::__fit_pixels</a></div><div class="ttdeci">PixelVector __fit_pixels</div><div class="ttdoc">Image of pointers to Pixels for tracking all pixels created for PSF fitting.</div><div class="ttdef"><b>Definition:</b> Image.h:33</div></div>
<div class="ttc" id="aclassFitPSF_1_1Image_xhtml_aa7ded3ac273bcda4dabd6b25be85cc6b"><div class="ttname"><a href="classFitPSF_1_1Image.xhtml#aa7ded3ac273bcda4dabd6b25be85cc6b">FitPSF::Image::assign_to_source</a></div><div class="ttdeci">Pixel&lt; SOURCE_TYPE &gt; * assign_to_source(unsigned x, unsigned y, SOURCE_TYPE *source)</div><div class="ttdoc">Add the pixel at the given coordinates to the given source and return a pointer to the pixel.</div><div class="ttdef"><b>Definition:</b> Image.h:223</div></div>
<div class="ttc" id="aclassFitPSF_1_1Image_xhtml_aafbc992aa45bb7cbec9f261b113524e1"><div class="ttname"><a href="classFitPSF_1_1Image.xhtml#aafbc992aa45bb7cbec9f261b113524e1">FitPSF::Image::__gain</a></div><div class="ttdeci">double __gain</div><div class="ttdoc">The gain to assume for the observed image.</div><div class="ttdef"><b>Definition:</b> Image.h:36</div></div>
<div class="ttc" id="aclassFitPSF_1_1Image_xhtml_ab1a31e0a8883aed059b248ee98bba414"><div class="ttname"><a href="classFitPSF_1_1Image.xhtml#ab1a31e0a8883aed059b248ee98bba414">FitPSF::Image::__id</a></div><div class="ttdeci">unsigned __id</div><div class="ttdoc">Unique identifier of this image.</div><div class="ttdef"><b>Definition:</b> Image.h:39</div></div>
<div class="ttc" id="aclassFitPSF_1_1Image_xhtml_ac601916e08b01fdcace516f505aa5def"><div class="ttname"><a href="classFitPSF_1_1Image.xhtml#ac601916e08b01fdcace516f505aa5def">FitPSF::Image::background_excess</a></div><div class="ttdeci">double background_excess(unsigned x, unsigned y, const Background::Source &amp;background) const</div><div class="ttdoc">Return the signal to noise ratio with which a pixel sticks above a background.</div><div class="ttdef"><b>Definition:</b> Image.h:322</div></div>
<div class="ttc" id="aclassFitPSF_1_1Image_xhtml_ac81c11f574acf102d879b9af9d4ae0b4"><div class="ttname"><a href="classFitPSF_1_1Image.xhtml#ac81c11f574acf102d879b9af9d4ae0b4">FitPSF::Image::operator()</a></div><div class="ttdeci">const Pixel&lt; SOURCE_TYPE &gt; * operator()(unsigned x, unsigned y) const</div><div class="ttdoc">Return the pixel at the given location.</div><div class="ttdef"><b>Definition:</b> Image.h:91</div></div>
<div class="ttc" id="aclassFitPSF_1_1Pixel_xhtml"><div class="ttname"><a href="classFitPSF_1_1Pixel.xhtml">FitPSF::Pixel</a></div><div class="ttdoc">A class tracking all pixel level informaiton for pixels participating in PSF/PRF fitting.</div><div class="ttdef"><b>Definition:</b> Pixel.h:25</div></div>
<div class="ttc" id="anamespacePhot_xhtml_afd335f0316f5f0113818bf99d5f6d6b5a4ef066f5f0262b09d376406005fee8ff"><div class="ttname"><a href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5a4ef066f5f0262b09d376406005fee8ff">Phot::x</a></div><div class="ttdeci">@ x</div><div class="ttdoc">The x coordinate in the input fits image.</div><div class="ttdef"><b>Definition:</b> PhotColumns.h:28</div></div>
<div class="ttc" id="anamespacePhot_xhtml_afd335f0316f5f0113818bf99d5f6d6b5ab6b09e0eeba818d3c00951c9de879af7"><div class="ttname"><a href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5ab6b09e0eeba818d3c00951c9de879af7">Phot::y</a></div><div class="ttdeci">@ y</div><div class="ttdoc">The y coordinate in the input fits image.</div><div class="ttdef"><b>Definition:</b> PhotColumns.h:29</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_65a8df4c49f610a40e9230d0067dc79d.xhtml">doc_src</a></li><li class="navelem"><a class="el" href="dir_da0161f9aa898feee64ca6d468d5d6fb.xhtml">FitPSF</a></li><li class="navelem"><a class="el" href="FitPSF_2Image_8h.xhtml">Image.h</a></li>
    <li class="footer">Generated on Wed Jan 15 2025 16:00:29 for My Project by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1 </li>
  </ul>
</div>
</body>
</html>
