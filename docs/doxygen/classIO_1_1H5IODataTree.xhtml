<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.20"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Sub-Pixel Photometry: IO::H5IODataTree Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Sub-Pixel Photometry
   </div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.svg"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.svg" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.20 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classIO_1_1H5IODataTree.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pri-types">Private Types</a> &#124;
<a href="#pri-methods">Private Member Functions</a> &#124;
<a href="#pri-attribs">Private Attributes</a> &#124;
<a href="classIO_1_1H5IODataTree-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">IO::H5IODataTree Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A property tree to hold all datasets, attributes and links to output.  
 <a href="classIO_1_1H5IODataTree.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="H5IODataTree_8h_source.xhtml">H5IODataTree.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for IO::H5IODataTree:</div>
<div class="dyncontent">
<div class="center"><img src="classIO_1_1H5IODataTree__inherit__graph.png" border="0" usemap="#aIO_1_1H5IODataTree_inherit__map" alt="Inheritance graph"/></div>
<map name="IO_1_1H5IODataTree_inherit__map" id="aIO_1_1H5IODataTree_inherit__map">
<area shape="rect" title="A property tree to hold all datasets, attributes and links to output." alt="" coords="5,138,219,647"/>
<area shape="rect" title=" " alt="" coords="59,5,165,90"/>
</map>
</div>
<div class="dynheader">
Collaboration diagram for IO::H5IODataTree:</div>
<div class="dyncontent">
<div class="center"><img src="classIO_1_1H5IODataTree__coll__graph.png" border="0" usemap="#aIO_1_1H5IODataTree_coll__map" alt="Collaboration graph"/></div>
<map name="IO_1_1H5IODataTree_coll__map" id="aIO_1_1H5IODataTree_coll__map">
<area shape="rect" title="A property tree to hold all datasets, attributes and links to output." alt="" coords="5,138,219,647"/>
<area shape="rect" title=" " alt="" coords="59,5,165,90"/>
</map>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a80589ee62bd0c76b9d74f30e8fce7866"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1H5IODataTree.xhtml#a80589ee62bd0c76b9d74f30e8fce7866">H5IODataTree</a> ()</td></tr>
<tr class="memdesc:a80589ee62bd0c76b9d74f30e8fce7866"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates an empty tree.  <a href="classIO_1_1H5IODataTree.xhtml#a80589ee62bd0c76b9d74f30e8fce7866">More...</a><br /></td></tr>
<tr class="separator:a80589ee62bd0c76b9d74f30e8fce7866"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25ce465d6fb107af1a7b0c7a2049902c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1H5IODataTree.xhtml#a25ce465d6fb107af1a7b0c7a2049902c">H5IODataTree</a> (int argc, char **argv, const std::string &amp;version, const <a class="el" href="classIO_1_1CommandLineConfig.xhtml">CommandLineConfig</a> &amp;options)</td></tr>
<tr class="memdesc:a25ce465d6fb107af1a7b0c7a2049902c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fills all command line information.  <a href="classIO_1_1H5IODataTree.xhtml#a25ce465d6fb107af1a7b0c7a2049902c">More...</a><br /></td></tr>
<tr class="separator:a25ce465d6fb107af1a7b0c7a2049902c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b9b9839a979107699f80644fcb43a16"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1H5IODataTree.xhtml#a8b9b9839a979107699f80644fcb43a16">fill_configuration</a> (const boost::program_options::variables_map &amp;options)</td></tr>
<tr class="memdesc:a8b9b9839a979107699f80644fcb43a16"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fills all attributes defining the configuration from the command line.  <a href="classIO_1_1H5IODataTree.xhtml#a8b9b9839a979107699f80644fcb43a16">More...</a><br /></td></tr>
<tr class="separator:a8b9b9839a979107699f80644fcb43a16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72bdea9e10c61c53474352deb3d3ed5f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1H5IODataTree.xhtml#a72bdea9e10c61c53474352deb3d3ed5f">add_c_array</a> (const std::string &amp;quantity, void *value, const std::string &amp;format, unsigned length)</td></tr>
<tr class="memdesc:a72bdea9e10c61c53474352deb3d3ed5f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a C-style array of values to the tree.  <a href="classIO_1_1H5IODataTree.xhtml#a72bdea9e10c61c53474352deb3d3ed5f">More...</a><br /></td></tr>
<tr class="separator:a72bdea9e10c61c53474352deb3d3ed5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-types"></a>
Private Types</h2></td></tr>
<tr class="memitem:ab27643dcfe44d4b7c263fcf5ef4e1031"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1H5IODataTree.xhtml#ab27643dcfe44d4b7c263fcf5ef4e1031">TOOL</a> { <b>FITPSF</b>, 
<b>FITPRF</b>, 
<b>SUBPIXPHOT</b>, 
<b>FITSUBPIX</b>
 }</td></tr>
<tr class="memdesc:ab27643dcfe44d4b7c263fcf5ef4e1031"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tags for the various tools that can fill this tree with data.  <a href="classIO_1_1H5IODataTree.xhtml#ab27643dcfe44d4b7c263fcf5ef4e1031">More...</a><br /></td></tr>
<tr class="separator:ab27643dcfe44d4b7c263fcf5ef4e1031"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-methods"></a>
Private Member Functions</h2></td></tr>
<tr class="memitem:a28e023b097550a5fd3d692fa2d0bc011"><td class="memTemplParams" colspan="2">template&lt;typename ARRAY_TYPE &gt; </td></tr>
<tr class="memitem:a28e023b097550a5fd3d692fa2d0bc011"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classIO_1_1H5IODataTree.xhtml#a28e023b097550a5fd3d692fa2d0bc011">destroy_allocated</a> (std::list&lt; ARRAY_TYPE * &gt; &amp;target)</td></tr>
<tr class="memdesc:a28e023b097550a5fd3d692fa2d0bc011"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destroy one of the __*_to_destroy lists.  <a href="classIO_1_1H5IODataTree.xhtml#a28e023b097550a5fd3d692fa2d0bc011">More...</a><br /></td></tr>
<tr class="separator:a28e023b097550a5fd3d692fa2d0bc011"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f858dafb20ffc85aff8b5a5521cc4e0"><td class="memTemplParams" colspan="2">template&lt;typename UNIT_TYPE &gt; </td></tr>
<tr class="memitem:a5f858dafb20ffc85aff8b5a5521cc4e0"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classIO_1_1H5IODataTree.xhtml#a5f858dafb20ffc85aff8b5a5521cc4e0">add_1d_entry</a> (UNIT_TYPE *value, unsigned length, const std::string &amp;quantity, std::list&lt; std::vector&lt; UNIT_TYPE &gt; * &gt; &amp;destroy_list)</td></tr>
<tr class="memdesc:a5f858dafb20ffc85aff8b5a5521cc4e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add values from a C-style array to the tree.  <a href="classIO_1_1H5IODataTree.xhtml#a5f858dafb20ffc85aff8b5a5521cc4e0">More...</a><br /></td></tr>
<tr class="separator:a5f858dafb20ffc85aff8b5a5521cc4e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a976c9e2e61e5083ac5c45c9d0893e697"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1H5IODataTree.xhtml#a976c9e2e61e5083ac5c45c9d0893e697">add_1d_entry</a> (double *value, unsigned length, const std::string &amp;quantity)</td></tr>
<tr class="memdesc:a976c9e2e61e5083ac5c45c9d0893e697"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add values from a C-style double array to the tree.  <a href="classIO_1_1H5IODataTree.xhtml#a976c9e2e61e5083ac5c45c9d0893e697">More...</a><br /></td></tr>
<tr class="separator:a976c9e2e61e5083ac5c45c9d0893e697"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb926c223aa4664e0b3feedb6faed201"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1H5IODataTree.xhtml#adb926c223aa4664e0b3feedb6faed201">add_1d_string_entry</a> (char **value, unsigned length, const std::string &amp;path)</td></tr>
<tr class="memdesc:adb926c223aa4664e0b3feedb6faed201"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add values from a C-style array of strings to the tree.  <a href="classIO_1_1H5IODataTree.xhtml#adb926c223aa4664e0b3feedb6faed201">More...</a><br /></td></tr>
<tr class="separator:adb926c223aa4664e0b3feedb6faed201"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad229d523453b8966b602712c8c57942c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1H5IODataTree.xhtml#ad229d523453b8966b602712c8c57942c">initialize_command_line</a> (int argc, char **argv, const std::string &amp;executable, const std::string &amp;version)</td></tr>
<tr class="memdesc:ad229d523453b8966b602712c8c57942c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepares the tree for the specific tool used.  <a href="classIO_1_1H5IODataTree.xhtml#ad229d523453b8966b602712c8c57942c">More...</a><br /></td></tr>
<tr class="separator:ad229d523453b8966b602712c8c57942c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae94b603ffec3dfc6603d78f54828d2b1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1H5IODataTree.xhtml#ae94b603ffec3dfc6603d78f54828d2b1">process_psffit_option</a> (const std::string &amp;key, const opt::variable_value &amp;value)</td></tr>
<tr class="memdesc:ae94b603ffec3dfc6603d78f54828d2b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Decides what to do with a single options entry for psf fitting.  <a href="classIO_1_1H5IODataTree.xhtml#ae94b603ffec3dfc6603d78f54828d2b1">More...</a><br /></td></tr>
<tr class="separator:ae94b603ffec3dfc6603d78f54828d2b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08e45dceb20a20d691689df00d5b758a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1H5IODataTree.xhtml#a08e45dceb20a20d691689df00d5b758a">process_subpixphot_option</a> (const std::string &amp;key, const opt::variable_value &amp;value)</td></tr>
<tr class="memdesc:a08e45dceb20a20d691689df00d5b758a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Decides what to do with a single options entry for psf fitting.  <a href="classIO_1_1H5IODataTree.xhtml#a08e45dceb20a20d691689df00d5b758a">More...</a><br /></td></tr>
<tr class="separator:a08e45dceb20a20d691689df00d5b758a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr class="memitem:ad2658f14598882607961a67f344370c5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classIO_1_1H5IODataTree.xhtml#ab27643dcfe44d4b7c263fcf5ef4e1031">TOOL</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1H5IODataTree.xhtml#ad2658f14598882607961a67f344370c5">__tool</a></td></tr>
<tr class="memdesc:ad2658f14598882607961a67f344370c5"><td class="mdescLeft">&#160;</td><td class="mdescRight">The that was used to generate the data in the tree.  <a href="classIO_1_1H5IODataTree.xhtml#ad2658f14598882607961a67f344370c5">More...</a><br /></td></tr>
<tr class="separator:ad2658f14598882607961a67f344370c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae51465c781ddd1b4ab07ff2e95f0b606"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1H5IODataTree.xhtml#ae51465c781ddd1b4ab07ff2e95f0b606">__prefix</a></td></tr>
<tr class="memdesc:ae51465c781ddd1b4ab07ff2e95f0b606"><td class="mdescLeft">&#160;</td><td class="mdescRight">The first part of the key for elements corresponding to the given tool.  <a href="classIO_1_1H5IODataTree.xhtml#ae51465c781ddd1b4ab07ff2e95f0b606">More...</a><br /></td></tr>
<tr class="separator:ae51465c781ddd1b4ab07ff2e95f0b606"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ada965e4a2c03dc1c22ec8daf2bae32"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1H5IODataTree.xhtml#a4ada965e4a2c03dc1c22ec8daf2bae32">__psf_model</a></td></tr>
<tr class="memdesc:a4ada965e4a2c03dc1c22ec8daf2bae32"><td class="mdescLeft">&#160;</td><td class="mdescRight">The PSF model used (for PSF fitting only).  <a href="classIO_1_1H5IODataTree.xhtml#a4ada965e4a2c03dc1c22ec8daf2bae32">More...</a><br /></td></tr>
<tr class="separator:a4ada965e4a2c03dc1c22ec8daf2bae32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06df23de05773e2dffdf7e3e01ebaca1"><td class="memItemLeft" align="right" valign="top">std::list&lt; std::vector&lt; std::string &gt; * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1H5IODataTree.xhtml#a06df23de05773e2dffdf7e3e01ebaca1">__strings_to_destroy</a></td></tr>
<tr class="separator:a06df23de05773e2dffdf7e3e01ebaca1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb8e65510878b35a045753d6ca723f89"><td class="memItemLeft" align="right" valign="top">std::list&lt; std::vector&lt; int &gt; * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1H5IODataTree.xhtml#aeb8e65510878b35a045753d6ca723f89">__ints_to_destroy</a></td></tr>
<tr class="memdesc:aeb8e65510878b35a045753d6ca723f89"><td class="mdescLeft">&#160;</td><td class="mdescRight">See __strings_to_destroy;.  <a href="classIO_1_1H5IODataTree.xhtml#aeb8e65510878b35a045753d6ca723f89">More...</a><br /></td></tr>
<tr class="separator:aeb8e65510878b35a045753d6ca723f89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a769e0f3bf07b094f93d1c88f8aaf7734"><td class="memItemLeft" align="right" valign="top">std::list&lt; std::vector&lt; unsigned &gt; * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1H5IODataTree.xhtml#a769e0f3bf07b094f93d1c88f8aaf7734">__uints_to_destroy</a></td></tr>
<tr class="memdesc:a769e0f3bf07b094f93d1c88f8aaf7734"><td class="mdescLeft">&#160;</td><td class="mdescRight">See __strings_to_destroy;.  <a href="classIO_1_1H5IODataTree.xhtml#a769e0f3bf07b094f93d1c88f8aaf7734">More...</a><br /></td></tr>
<tr class="separator:a769e0f3bf07b094f93d1c88f8aaf7734"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a559ff5ae2394707d0fc8b4dd98ae08a7"><td class="memItemLeft" align="right" valign="top">std::list&lt; std::vector&lt; long &gt; * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1H5IODataTree.xhtml#a559ff5ae2394707d0fc8b4dd98ae08a7">__longs_to_destroy</a></td></tr>
<tr class="memdesc:a559ff5ae2394707d0fc8b4dd98ae08a7"><td class="mdescLeft">&#160;</td><td class="mdescRight">See __strings_to_destroy;.  <a href="classIO_1_1H5IODataTree.xhtml#a559ff5ae2394707d0fc8b4dd98ae08a7">More...</a><br /></td></tr>
<tr class="separator:a559ff5ae2394707d0fc8b4dd98ae08a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0ca423c33564bf4d73b0af0dc7aea56"><td class="memItemLeft" align="right" valign="top">std::list&lt; std::vector&lt; unsigned long &gt; * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1H5IODataTree.xhtml#ae0ca423c33564bf4d73b0af0dc7aea56">__ulongs_to_destroy</a></td></tr>
<tr class="memdesc:ae0ca423c33564bf4d73b0af0dc7aea56"><td class="mdescLeft">&#160;</td><td class="mdescRight">See __strings_to_destroy;.  <a href="classIO_1_1H5IODataTree.xhtml#ae0ca423c33564bf4d73b0af0dc7aea56">More...</a><br /></td></tr>
<tr class="separator:ae0ca423c33564bf4d73b0af0dc7aea56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa79e198491996c6dcf554d5aecd4741d"><td class="memItemLeft" align="right" valign="top">std::list&lt; std::vector&lt; short &gt; * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1H5IODataTree.xhtml#aa79e198491996c6dcf554d5aecd4741d">__shorts_to_destroy</a></td></tr>
<tr class="memdesc:aa79e198491996c6dcf554d5aecd4741d"><td class="mdescLeft">&#160;</td><td class="mdescRight">See __strings_to_destroy;.  <a href="classIO_1_1H5IODataTree.xhtml#aa79e198491996c6dcf554d5aecd4741d">More...</a><br /></td></tr>
<tr class="separator:aa79e198491996c6dcf554d5aecd4741d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0111c63e73fc9a89a097352734d889ef"><td class="memItemLeft" align="right" valign="top">std::list&lt; std::vector&lt; unsigned short &gt; * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1H5IODataTree.xhtml#a0111c63e73fc9a89a097352734d889ef">__ushorts_to_destroy</a></td></tr>
<tr class="memdesc:a0111c63e73fc9a89a097352734d889ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">See __strings_to_destroy;.  <a href="classIO_1_1H5IODataTree.xhtml#a0111c63e73fc9a89a097352734d889ef">More...</a><br /></td></tr>
<tr class="separator:a0111c63e73fc9a89a097352734d889ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3aeb3d13cdfc61fa2e92e2ee774d163e"><td class="memItemLeft" align="right" valign="top">std::list&lt; std::vector&lt; char &gt; * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1H5IODataTree.xhtml#a3aeb3d13cdfc61fa2e92e2ee774d163e">__chars_to_destroy</a></td></tr>
<tr class="memdesc:a3aeb3d13cdfc61fa2e92e2ee774d163e"><td class="mdescLeft">&#160;</td><td class="mdescRight">See __strings_to_destroy;.  <a href="classIO_1_1H5IODataTree.xhtml#a3aeb3d13cdfc61fa2e92e2ee774d163e">More...</a><br /></td></tr>
<tr class="separator:a3aeb3d13cdfc61fa2e92e2ee774d163e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad94d948bcbf2b58d4d897976a27e2b93"><td class="memItemLeft" align="right" valign="top">std::list&lt; std::vector&lt; unsigned char &gt; * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1H5IODataTree.xhtml#ad94d948bcbf2b58d4d897976a27e2b93">__uchars_to_destroy</a></td></tr>
<tr class="memdesc:ad94d948bcbf2b58d4d897976a27e2b93"><td class="mdescLeft">&#160;</td><td class="mdescRight">See __strings_to_destroy;.  <a href="classIO_1_1H5IODataTree.xhtml#ad94d948bcbf2b58d4d897976a27e2b93">More...</a><br /></td></tr>
<tr class="separator:ad94d948bcbf2b58d4d897976a27e2b93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a200ba8b617728920e601f5a1759515d2"><td class="memItemLeft" align="right" valign="top">std::list&lt; std::vector&lt; bool &gt; * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1H5IODataTree.xhtml#a200ba8b617728920e601f5a1759515d2">__bools_to_destroy</a></td></tr>
<tr class="memdesc:a200ba8b617728920e601f5a1759515d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">See __strings_to_destroy;.  <a href="classIO_1_1H5IODataTree.xhtml#a200ba8b617728920e601f5a1759515d2">More...</a><br /></td></tr>
<tr class="separator:a200ba8b617728920e601f5a1759515d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae79153ef1509126be4d3f0710ec132a3"><td class="memItemLeft" align="right" valign="top">std::list&lt; Eigen::VectorXd * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1H5IODataTree.xhtml#ae79153ef1509126be4d3f0710ec132a3">__doubles_to_destroy</a></td></tr>
<tr class="memdesc:ae79153ef1509126be4d3f0710ec132a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">See __strings_to_destroy;.  <a href="classIO_1_1H5IODataTree.xhtml#ae79153ef1509126be4d3f0710ec132a3">More...</a><br /></td></tr>
<tr class="separator:ae79153ef1509126be4d3f0710ec132a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A property tree to hold all datasets, attributes and links to output. </p>
</div><h2 class="groupheader">Member Enumeration Documentation</h2>
<a id="ab27643dcfe44d4b7c263fcf5ef4e1031"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab27643dcfe44d4b7c263fcf5ef4e1031">&#9670;&nbsp;</a></span>TOOL</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classIO_1_1H5IODataTree.xhtml#ab27643dcfe44d4b7c263fcf5ef4e1031">IO::H5IODataTree::TOOL</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tags for the various tools that can fill this tree with data. </p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a80589ee62bd0c76b9d74f30e8fce7866"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a80589ee62bd0c76b9d74f30e8fce7866">&#9670;&nbsp;</a></span>H5IODataTree() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">IO::H5IODataTree::H5IODataTree </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates an empty tree. </p>

</div>
</div>
<a id="a25ce465d6fb107af1a7b0c7a2049902c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a25ce465d6fb107af1a7b0c7a2049902c">&#9670;&nbsp;</a></span>H5IODataTree() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">IO::H5IODataTree::H5IODataTree </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char **&#160;</td>
          <td class="paramname"><em>argv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>version</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classIO_1_1CommandLineConfig.xhtml">CommandLineConfig</a> &amp;&#160;</td>
          <td class="paramname"><em>options</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Fills all command line information. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">argc</td><td>The number of command line tokens. </td></tr>
    <tr><td class="paramname">argv</td><td>The command line tokens. </td></tr>
    <tr><td class="paramname">version</td><td>The version of the tool used. </td></tr>
    <tr><td class="paramname">options</td><td>The parsed command line options. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a976c9e2e61e5083ac5c45c9d0893e697"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a976c9e2e61e5083ac5c45c9d0893e697">&#9670;&nbsp;</a></span>add_1d_entry() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void IO::H5IODataTree::add_1d_entry </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>length</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>quantity</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add values from a C-style double array to the tree. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>C-style array of the values to add. </td></tr>
    <tr><td class="paramname">length</td><td>The number of entries value </td></tr>
    <tr><td class="paramname">quantity</td><td>The path within the tree to add/update </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a5f858dafb20ffc85aff8b5a5521cc4e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5f858dafb20ffc85aff8b5a5521cc4e0">&#9670;&nbsp;</a></span>add_1d_entry() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename UNIT_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void IO::H5IODataTree::add_1d_entry </td>
          <td>(</td>
          <td class="paramtype">UNIT_TYPE *&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>length</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>quantity</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::list&lt; std::vector&lt; UNIT_TYPE &gt; * &gt; &amp;&#160;</td>
          <td class="paramname"><em>destroy_list</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add values from a C-style array to the tree. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>C-style array of the values to add. </td></tr>
    <tr><td class="paramname">length</td><td>The number of entries value </td></tr>
    <tr><td class="paramname">quantity</td><td>The path within the tree to add/update </td></tr>
    <tr><td class="paramname">destroy_list</td><td>A list to add the newly allocated data to. Should be one of </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="adb926c223aa4664e0b3feedb6faed201"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adb926c223aa4664e0b3feedb6faed201">&#9670;&nbsp;</a></span>add_1d_string_entry()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void IO::H5IODataTree::add_1d_string_entry </td>
          <td>(</td>
          <td class="paramtype">char **&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>length</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>path</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add values from a C-style array of strings to the tree. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The C-style array of stings to add </td></tr>
    <tr><td class="paramname">length</td><td>How many stings are in the array </td></tr>
    <tr><td class="paramname">path</td><td>the path within the tree to add/update. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a72bdea9e10c61c53474352deb3d3ed5f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72bdea9e10c61c53474352deb3d3ed5f">&#9670;&nbsp;</a></span>add_c_array()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IO::H5IODataTree::add_c_array </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>quantity</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add a C-style array of values to the tree. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">quantity</td><td>The path within the tree to add/update. </td></tr>
    <tr><td class="paramname">value</td><td>The beginning of the memory where the values are to be found. </td></tr>
    <tr><td class="paramname">format</td><td>Identifier for the type of values being added. For example 'str' or 'int'. </td></tr>
    <tr><td class="paramname">length</td><td>How many values are in the array. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a28e023b097550a5fd3d692fa2d0bc011"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a28e023b097550a5fd3d692fa2d0bc011">&#9670;&nbsp;</a></span>destroy_allocated()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ARRAY_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void IO::H5IODataTree::destroy_allocated </td>
          <td>(</td>
          <td class="paramtype">std::list&lt; ARRAY_TYPE * &gt; &amp;&#160;</td>
          <td class="paramname"><em>target</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Destroy one of the __*_to_destroy lists. </p>

</div>
</div>
<a id="a8b9b9839a979107699f80644fcb43a16"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b9b9839a979107699f80644fcb43a16">&#9670;&nbsp;</a></span>fill_configuration()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IO::H5IODataTree::fill_configuration </td>
          <td>(</td>
          <td class="paramtype">const boost::program_options::variables_map &amp;&#160;</td>
          <td class="paramname"><em>options</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Fills all attributes defining the configuration from the command line. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">options</td><td>The parsed command line options. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ad229d523453b8966b602712c8c57942c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad229d523453b8966b602712c8c57942c">&#9670;&nbsp;</a></span>initialize_command_line()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void IO::H5IODataTree::initialize_command_line </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char **&#160;</td>
          <td class="paramname"><em>argv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>executable</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>version</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prepares the tree for the specific tool used. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">argc</td><td>The number of command line tokens. </td></tr>
    <tr><td class="paramname">argv</td><td>The command line tokens. </td></tr>
    <tr><td class="paramname">executable</td><td>The executable invoked (no path). </td></tr>
    <tr><td class="paramname">version</td><td>The version of the tool used. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ae94b603ffec3dfc6603d78f54828d2b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae94b603ffec3dfc6603d78f54828d2b1">&#9670;&nbsp;</a></span>process_psffit_option()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void IO::H5IODataTree::process_psffit_option </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const opt::variable_value &amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Decides what to do with a single options entry for psf fitting. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>The key this option is identified by. </td></tr>
    <tr><td class="paramname">value</td><td>The value of the option. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a08e45dceb20a20d691689df00d5b758a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a08e45dceb20a20d691689df00d5b758a">&#9670;&nbsp;</a></span>process_subpixphot_option()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void IO::H5IODataTree::process_subpixphot_option </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const opt::variable_value &amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Decides what to do with a single options entry for psf fitting. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>The key this option is identified by. </td></tr>
    <tr><td class="paramname">value</td><td>The value of the option. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="a200ba8b617728920e601f5a1759515d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a200ba8b617728920e601f5a1759515d2">&#9670;&nbsp;</a></span>__bools_to_destroy</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::list&lt; std::vector&lt;bool&gt;* &gt; IO::H5IODataTree::__bools_to_destroy</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>See __strings_to_destroy;. </p>

</div>
</div>
<a id="a3aeb3d13cdfc61fa2e92e2ee774d163e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3aeb3d13cdfc61fa2e92e2ee774d163e">&#9670;&nbsp;</a></span>__chars_to_destroy</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::list&lt; std::vector&lt;char&gt;* &gt; IO::H5IODataTree::__chars_to_destroy</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>See __strings_to_destroy;. </p>

</div>
</div>
<a id="ae79153ef1509126be4d3f0710ec132a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae79153ef1509126be4d3f0710ec132a3">&#9670;&nbsp;</a></span>__doubles_to_destroy</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::list&lt; Eigen::VectorXd* &gt; IO::H5IODataTree::__doubles_to_destroy</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>See __strings_to_destroy;. </p>

</div>
</div>
<a id="aeb8e65510878b35a045753d6ca723f89"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeb8e65510878b35a045753d6ca723f89">&#9670;&nbsp;</a></span>__ints_to_destroy</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::list&lt; std::vector&lt;int&gt;* &gt; IO::H5IODataTree::__ints_to_destroy</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>See __strings_to_destroy;. </p>

</div>
</div>
<a id="a559ff5ae2394707d0fc8b4dd98ae08a7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a559ff5ae2394707d0fc8b4dd98ae08a7">&#9670;&nbsp;</a></span>__longs_to_destroy</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::list&lt; std::vector&lt;long&gt;* &gt; IO::H5IODataTree::__longs_to_destroy</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>See __strings_to_destroy;. </p>

</div>
</div>
<a id="ae51465c781ddd1b4ab07ff2e95f0b606"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae51465c781ddd1b4ab07ff2e95f0b606">&#9670;&nbsp;</a></span>__prefix</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string IO::H5IODataTree::__prefix</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The first part of the key for elements corresponding to the given tool. </p>

</div>
</div>
<a id="a4ada965e4a2c03dc1c22ec8daf2bae32"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4ada965e4a2c03dc1c22ec8daf2bae32">&#9670;&nbsp;</a></span>__psf_model</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string IO::H5IODataTree::__psf_model</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The PSF model used (for PSF fitting only). </p>

</div>
</div>
<a id="aa79e198491996c6dcf554d5aecd4741d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa79e198491996c6dcf554d5aecd4741d">&#9670;&nbsp;</a></span>__shorts_to_destroy</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::list&lt; std::vector&lt;short&gt;* &gt; IO::H5IODataTree::__shorts_to_destroy</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>See __strings_to_destroy;. </p>

</div>
</div>
<a id="a06df23de05773e2dffdf7e3e01ebaca1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a06df23de05773e2dffdf7e3e01ebaca1">&#9670;&nbsp;</a></span>__strings_to_destroy</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::list&lt; std::vector&lt;std::string&gt; *&gt; IO::H5IODataTree::__strings_to_destroy</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>A list of allocated vectors containing string to destroy when the tree is destroyed; </p>

</div>
</div>
<a id="ad2658f14598882607961a67f344370c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad2658f14598882607961a67f344370c5">&#9670;&nbsp;</a></span>__tool</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classIO_1_1H5IODataTree.xhtml#ab27643dcfe44d4b7c263fcf5ef4e1031">TOOL</a> IO::H5IODataTree::__tool</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The that was used to generate the data in the tree. </p>

</div>
</div>
<a id="ad94d948bcbf2b58d4d897976a27e2b93"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad94d948bcbf2b58d4d897976a27e2b93">&#9670;&nbsp;</a></span>__uchars_to_destroy</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::list&lt; std::vector&lt;unsigned char&gt;* &gt; IO::H5IODataTree::__uchars_to_destroy</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>See __strings_to_destroy;. </p>

</div>
</div>
<a id="a769e0f3bf07b094f93d1c88f8aaf7734"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a769e0f3bf07b094f93d1c88f8aaf7734">&#9670;&nbsp;</a></span>__uints_to_destroy</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::list&lt; std::vector&lt;unsigned&gt;* &gt; IO::H5IODataTree::__uints_to_destroy</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>See __strings_to_destroy;. </p>

</div>
</div>
<a id="ae0ca423c33564bf4d73b0af0dc7aea56"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae0ca423c33564bf4d73b0af0dc7aea56">&#9670;&nbsp;</a></span>__ulongs_to_destroy</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::list&lt; std::vector&lt;unsigned long&gt;* &gt; IO::H5IODataTree::__ulongs_to_destroy</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>See __strings_to_destroy;. </p>

</div>
</div>
<a id="a0111c63e73fc9a89a097352734d889ef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0111c63e73fc9a89a097352734d889ef">&#9670;&nbsp;</a></span>__ushorts_to_destroy</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::list&lt; std::vector&lt;unsigned short&gt;* &gt; IO::H5IODataTree::__ushorts_to_destroy</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>See __strings_to_destroy;. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/Users/kpenev/projects/git/SuperPhot/doc_src/IO/<a class="el" href="H5IODataTree_8h_source.xhtml">H5IODataTree.h</a></li>
<li>/Users/kpenev/projects/git/SuperPhot/doc_src/IO/<a class="el" href="H5IODataTree_8cpp.xhtml">H5IODataTree.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><b>IO</b></li><li class="navelem"><a class="el" href="classIO_1_1H5IODataTree.xhtml">H5IODataTree</a></li>
    <li class="footer">Generated on Mon May 20 2024 13:33:58 for Sub-Pixel Photometry by <a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.8.20 </li>
  </ul>
</div>
</body>
</html>
