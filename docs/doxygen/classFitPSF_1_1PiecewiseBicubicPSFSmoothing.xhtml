<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Sub-Pixel Photometry: FitPSF::PiecewiseBicubicPSFSmoothing Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "ams.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.jsdelivr.net/npm/mathjax@3/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Sub-Pixel Photometry
   </div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.svg"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.svg" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.xhtml');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pri-methods">Private Member Functions</a> &#124;
<a href="#pri-attribs">Private Attributes</a> &#124;
<a href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">FitPSF::PiecewiseBicubicPSFSmoothing Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A class that applies a smoothing penalty during PSF/PRF fitting.  
 <a href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="PiecewiseBicubicPSFSmoothing_8h_source.xhtml">PiecewiseBicubicPSFSmoothing.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for FitPSF::PiecewiseBicubicPSFSmoothing:</div>
<div class="dyncontent">
<div class="center"><img src="classFitPSF_1_1PiecewiseBicubicPSFSmoothing__coll__graph.png" border="0" usemap="#aFitPSF_1_1PiecewiseBicubicPSFSmoothing_coll__map" alt="Collaboration graph"/></div>
<map name="aFitPSF_1_1PiecewiseBicubicPSFSmoothing_coll__map" id="aFitPSF_1_1PiecewiseBicubicPSFSmoothing_coll__map">
<area shape="rect" title="A class that applies a smoothing penalty during PSF/PRF fitting." alt="" coords="5,5,287,368"/>
</map>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a5bacfbf29409d56d23b088ea32fb8e02"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#a5bacfbf29409d56d23b088ea32fb8e02">PiecewiseBicubicPSFSmoothing</a> ()</td></tr>
<tr class="memdesc:a5bacfbf29409d56d23b088ea32fb8e02"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor, must call prepare_smoothing before use.  <a href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#a5bacfbf29409d56d23b088ea32fb8e02">More...</a><br /></td></tr>
<tr class="separator:a5bacfbf29409d56d23b088ea32fb8e02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9744144ba441627bb355414a55f74320"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#a9744144ba441627bb355414a55f74320">PiecewiseBicubicPSFSmoothing</a> (double smoothing_penalty, const <a class="el" href="FitPSF_2Common_8h.xhtml#a5432cdc9b255de958483cc386d5bba86">LinearSourceList</a> &amp;fit_sources, const std::vector&lt; double &gt; &amp;x_grid, const std::vector&lt; double &gt; &amp;y_grid, const std::vector&lt; std::valarray&lt; double &gt; &gt; &amp;basis_parameter_sets)</td></tr>
<tr class="memdesc:a9744144ba441627bb355414a55f74320"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get ready for imposing smoothing penalty to bicubic PSF fits.  <a href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#a9744144ba441627bb355414a55f74320">More...</a><br /></td></tr>
<tr class="separator:a9744144ba441627bb355414a55f74320"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88c9ffb971e65df288176aef7126d13c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#a88c9ffb971e65df288176aef7126d13c">prepare_smoothing</a> (double smoothing_penalty, const <a class="el" href="FitPSF_2Common_8h.xhtml#a5432cdc9b255de958483cc386d5bba86">LinearSourceList</a> &amp;fit_sources, const std::vector&lt; double &gt; &amp;x_grid, const std::vector&lt; double &gt; &amp;y_grid, const std::vector&lt; std::valarray&lt; double &gt; &gt; &amp;basis_parameter_sets)</td></tr>
<tr class="memdesc:a88c9ffb971e65df288176aef7126d13c"><td class="mdescLeft">&#160;</td><td class="mdescRight">See non-default constructor.  <a href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#a88c9ffb971e65df288176aef7126d13c">More...</a><br /></td></tr>
<tr class="separator:a88c9ffb971e65df288176aef7126d13c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3284e6c3e3695164327c7a2665842c6"><td class="memItemLeft" align="right" valign="top">const Eigen::VectorXd &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#af3284e6c3e3695164327c7a2665842c6">rhs_correction</a> () const</td></tr>
<tr class="memdesc:af3284e6c3e3695164327c7a2665842c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">The vector to add to the RHS vector to implement smoothing.  <a href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#af3284e6c3e3695164327c7a2665842c6">More...</a><br /></td></tr>
<tr class="separator:af3284e6c3e3695164327c7a2665842c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1895d2d684662000948ea3044f9b118e"><td class="memItemLeft" align="right" valign="top">const Eigen::MatrixXd &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#a1895d2d684662000948ea3044f9b118e">lhs_correction</a> () const</td></tr>
<tr class="memdesc:a1895d2d684662000948ea3044f9b118e"><td class="mdescLeft">&#160;</td><td class="mdescRight">The matrix to add to the LHS matrix to implement smoothing.  <a href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#a1895d2d684662000948ea3044f9b118e">More...</a><br /></td></tr>
<tr class="separator:a1895d2d684662000948ea3044f9b118e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3358d1cebda93803e20350eba53846ab"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#a3358d1cebda93803e20350eba53846ab">operator bool</a> () const</td></tr>
<tr class="memdesc:a3358d1cebda93803e20350eba53846ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Is smoothing ready.  <a href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#a3358d1cebda93803e20350eba53846ab">More...</a><br /></td></tr>
<tr class="separator:a3358d1cebda93803e20350eba53846ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-methods"></a>
Private Member Functions</h2></td></tr>
<tr class="memitem:afbf3bb077bf5ac24809bef1441a8d035"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#afbf3bb077bf5ac24809bef1441a8d035">fill_cell_penalty_matrix</a> (double width, double height, Eigen::MatrixXd &amp;penalty_matrix)</td></tr>
<tr class="memdesc:afbf3bb077bf5ac24809bef1441a8d035"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fill the matrix which converts cell parameters to the smoothing penalty.  <a href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#afbf3bb077bf5ac24809bef1441a8d035">More...</a><br /></td></tr>
<tr class="separator:afbf3bb077bf5ac24809bef1441a8d035"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3128f083e18c4e8f299da47a7cc35a8b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#a3128f083e18c4e8f299da47a7cc35a8b">fill_second_derivative_coefficients</a> (const double *first_coef, Eigen::Vector4d &amp;result)</td></tr>
<tr class="memdesc:a3128f083e18c4e8f299da47a7cc35a8b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fills the (2,2), (2,3), (3,2), (3,3) coefficients in the bicubic function over a cell.  <a href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#a3128f083e18c4e8f299da47a7cc35a8b">More...</a><br /></td></tr>
<tr class="separator:a3128f083e18c4e8f299da47a7cc35a8b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71ff662eedae69b049a0fbab0aec717d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#a71ff662eedae69b049a0fbab0aec717d">fill_spatial_dependence</a> (const <a class="el" href="FitPSF_2Common_8h.xhtml#a5432cdc9b255de958483cc386d5bba86">LinearSourceList</a> &amp;fit_sources)</td></tr>
<tr class="memdesc:a71ff662eedae69b049a0fbab0aec717d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fill the __rhs_spatial_depedence vector.  <a href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#a71ff662eedae69b049a0fbab0aec717d">More...</a><br /></td></tr>
<tr class="separator:a71ff662eedae69b049a0fbab0aec717d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a158014bb1e62fcdd603401235db42cfe"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#a158014bb1e62fcdd603401235db42cfe">add_smoothing_rhs</a> (const std::vector&lt; std::valarray&lt; double &gt; &gt; &amp;basis_parameter_sets, const Eigen::MatrixXd &amp;penalty_matrix, unsigned basis_index, unsigned cell_index, Eigen::VectorXd &amp;rhs)</td></tr>
<tr class="memdesc:a158014bb1e62fcdd603401235db42cfe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Updates RHS vector with the smoothing terms for single cell/basis vector.  <a href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#a158014bb1e62fcdd603401235db42cfe">More...</a><br /></td></tr>
<tr class="separator:a158014bb1e62fcdd603401235db42cfe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac53e627d61b094565388828129df2365"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#ac53e627d61b094565388828129df2365">add_smoothing_matrix</a> (const std::vector&lt; std::valarray&lt; double &gt; &gt; &amp;basis_parameter_sets, const Eigen::MatrixXd &amp;penalty_matrix, unsigned basis_index, unsigned cell_index, Eigen::MatrixXd &amp;matrix)</td></tr>
<tr class="memdesc:ac53e627d61b094565388828129df2365"><td class="mdescLeft">&#160;</td><td class="mdescRight">Updates LHS matrix with the smoothing terms for single cell/basis vector.  <a href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#ac53e627d61b094565388828129df2365">More...</a><br /></td></tr>
<tr class="separator:ac53e627d61b094565388828129df2365"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr class="memitem:a5f38168ce26a8dbb0b347b2dbca0479c"><td class="memItemLeft" align="right" valign="top">Eigen::MatrixXd&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#a5f38168ce26a8dbb0b347b2dbca0479c">__lhs_spatial_dependence</a></td></tr>
<tr class="memdesc:a5f38168ce26a8dbb0b347b2dbca0479c"><td class="mdescLeft">&#160;</td><td class="mdescRight">The average of \( {\kappa^s}^T \kappa^s \) over all sources.  <a href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#a5f38168ce26a8dbb0b347b2dbca0479c">More...</a><br /></td></tr>
<tr class="separator:a5f38168ce26a8dbb0b347b2dbca0479c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a814146cde8b68799adbb7ba49eedfe69"><td class="memItemLeft" align="right" valign="top">Eigen::MatrixXd&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#a814146cde8b68799adbb7ba49eedfe69">__lhs_matrix</a></td></tr>
<tr class="memdesc:a814146cde8b68799adbb7ba49eedfe69"><td class="mdescLeft">&#160;</td><td class="mdescRight">See <a class="el" href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#a1895d2d684662000948ea3044f9b118e" title="The matrix to add to the LHS matrix to implement smoothing.">lhs_correction()</a>.  <a href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#a814146cde8b68799adbb7ba49eedfe69">More...</a><br /></td></tr>
<tr class="separator:a814146cde8b68799adbb7ba49eedfe69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba7974c6a9d33edb10e48dd18e88cf87"><td class="memItemLeft" align="right" valign="top">Eigen::VectorXd&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#aba7974c6a9d33edb10e48dd18e88cf87">__rhs_spatial_dependence</a></td></tr>
<tr class="memdesc:aba7974c6a9d33edb10e48dd18e88cf87"><td class="mdescLeft">&#160;</td><td class="mdescRight">The average of the PSF terms for all sources.  <a href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#aba7974c6a9d33edb10e48dd18e88cf87">More...</a><br /></td></tr>
<tr class="separator:aba7974c6a9d33edb10e48dd18e88cf87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7928ed648d939c6c23ad9fdde2b29831"><td class="memItemLeft" align="right" valign="top">Eigen::VectorXd&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#a7928ed648d939c6c23ad9fdde2b29831">__rhs_vector</a></td></tr>
<tr class="memdesc:a7928ed648d939c6c23ad9fdde2b29831"><td class="mdescLeft">&#160;</td><td class="mdescRight">See <a class="el" href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#af3284e6c3e3695164327c7a2665842c6" title="The vector to add to the RHS vector to implement smoothing.">rhs_correction()</a>.  <a href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#a7928ed648d939c6c23ad9fdde2b29831">More...</a><br /></td></tr>
<tr class="separator:a7928ed648d939c6c23ad9fdde2b29831"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaae6d5f3629bd508afe4a2bf60e69433"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#aaae6d5f3629bd508afe4a2bf60e69433">__prepared</a></td></tr>
<tr class="memdesc:aaae6d5f3629bd508afe4a2bf60e69433"><td class="mdescLeft">&#160;</td><td class="mdescRight">Is this object ready for smoothing?  <a href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#aaae6d5f3629bd508afe4a2bf60e69433">More...</a><br /></td></tr>
<tr class="separator:aaae6d5f3629bd508afe4a2bf60e69433"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A class that applies a smoothing penalty during PSF/PRF fitting. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a5bacfbf29409d56d23b088ea32fb8e02"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5bacfbf29409d56d23b088ea32fb8e02">&#9670;&nbsp;</a></span>PiecewiseBicubicPSFSmoothing() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">FitPSF::PiecewiseBicubicPSFSmoothing::PiecewiseBicubicPSFSmoothing </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default constructor, must call prepare_smoothing before use. </p>

</div>
</div>
<a id="a9744144ba441627bb355414a55f74320"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9744144ba441627bb355414a55f74320">&#9670;&nbsp;</a></span>PiecewiseBicubicPSFSmoothing() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">FitPSF::PiecewiseBicubicPSFSmoothing::PiecewiseBicubicPSFSmoothing </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>smoothing_penalty</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="FitPSF_2Common_8h.xhtml#a5432cdc9b255de958483cc386d5bba86">LinearSourceList</a> &amp;&#160;</td>
          <td class="paramname"><em>fit_sources</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>x_grid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>y_grid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::valarray&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>basis_parameter_sets</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get ready for imposing smoothing penalty to bicubic PSF fits. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">smoothing_penalty</td><td>The degree of smoothing to use. </td></tr>
    <tr><td class="paramname">fit_sources</td><td>The sources which participate in the PSF shape fitting. </td></tr>
    <tr><td class="paramname">x_grid</td><td>The list of vertical grid cell boundaries of the PSF. </td></tr>
    <tr><td class="paramname">y_grid</td><td>The list of horizontal grid cell boundaries of the PSF. </td></tr>
    <tr><td class="paramname">basis_parameter_sets</td><td>The parameter sets in the basis in which PSF fitting is performed. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ac53e627d61b094565388828129df2365"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac53e627d61b094565388828129df2365">&#9670;&nbsp;</a></span>add_smoothing_matrix()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::PiecewiseBicubicPSFSmoothing::add_smoothing_matrix </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; std::valarray&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>basis_parameter_sets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::MatrixXd &amp;&#160;</td>
          <td class="paramname"><em>penalty_matrix</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>basis_index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>cell_index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Eigen::MatrixXd &amp;&#160;</td>
          <td class="paramname"><em>matrix</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Updates LHS matrix with the smoothing terms for single cell/basis vector. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">basis_parameter_sets</td><td>The basis parameter sets returned by fill_basis_parameter_sets. </td></tr>
    <tr><td class="paramname">penalty_matrix</td><td>The penalty matrix returned by fill_cell_penalty_matrix. </td></tr>
    <tr><td class="paramname">basis_index</td><td>The index of the basis vector to add (zero should correspond to </td></tr>
    <tr><td class="paramname">cell_index</td><td>The index of the cell (assuming the order in basis_parameter_sets). </td></tr>
    <tr><td class="paramname">matrix</td><td>The RHS vector to add to. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a158014bb1e62fcdd603401235db42cfe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a158014bb1e62fcdd603401235db42cfe">&#9670;&nbsp;</a></span>add_smoothing_rhs()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::PiecewiseBicubicPSFSmoothing::add_smoothing_rhs </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; std::valarray&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>basis_parameter_sets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::MatrixXd &amp;&#160;</td>
          <td class="paramname"><em>penalty_matrix</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>basis_index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>cell_index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Eigen::VectorXd &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Updates RHS vector with the smoothing terms for single cell/basis vector. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">basis_parameter_sets</td><td>The basis parameter sets returned by fill_basis_parameter_sets. </td></tr>
    <tr><td class="paramname">penalty_matrix</td><td>The penalty matrix returned by fill_cell_penalty_matrix. </td></tr>
    <tr><td class="paramname">basis_index</td><td>The index of the basis vector to add (zero should correspond to </td></tr>
    <tr><td class="paramname">cell_index</td><td>The index of the cell (assuming the order in basis_parameter_sets). </td></tr>
    <tr><td class="paramname">rhs</td><td>The RHS vector to add to. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="afbf3bb077bf5ac24809bef1441a8d035"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afbf3bb077bf5ac24809bef1441a8d035">&#9670;&nbsp;</a></span>fill_cell_penalty_matrix()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::PiecewiseBicubicPSFSmoothing::fill_cell_penalty_matrix </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Eigen::MatrixXd &amp;&#160;</td>
          <td class="paramname"><em>penalty_matrix</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Fill the matrix which converts cell parameters to the smoothing penalty. </p>
<p>This is the \( \mathbf{A}_{cell} \) in the documentation. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">width</td><td>The width of the cell. </td></tr>
    <tr><td class="paramname">height</td><td>The hegiht of the cell. </td></tr>
    <tr><td class="paramname">penalty_matrix</td><td>The matrix to fill. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a3128f083e18c4e8f299da47a7cc35a8b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3128f083e18c4e8f299da47a7cc35a8b">&#9670;&nbsp;</a></span>fill_second_derivative_coefficients()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::PiecewiseBicubicPSFSmoothing::fill_second_derivative_coefficients </td>
          <td>(</td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>first_coef</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Eigen::Vector4d &amp;&#160;</td>
          <td class="paramname"><em>result</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Fills the (2,2), (2,3), (3,2), (3,3) coefficients in the bicubic function over a cell. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">first_coef</td><td>A pointer to the first coefficient defining the bicubic over the cell. </td></tr>
    <tr><td class="paramname">result</td><td>The vector to fill. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a71ff662eedae69b049a0fbab0aec717d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a71ff662eedae69b049a0fbab0aec717d">&#9670;&nbsp;</a></span>fill_spatial_dependence()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::PiecewiseBicubicPSFSmoothing::fill_spatial_dependence </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="FitPSF_2Common_8h.xhtml#a5432cdc9b255de958483cc386d5bba86">LinearSourceList</a> &amp;&#160;</td>
          <td class="paramname"><em>fit_sources</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Fill the __rhs_spatial_depedence vector. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">fit_sources</td><td>See same name argument to constructor. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a1895d2d684662000948ea3044f9b118e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1895d2d684662000948ea3044f9b118e">&#9670;&nbsp;</a></span>lhs_correction()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const Eigen::MatrixXd&amp; FitPSF::PiecewiseBicubicPSFSmoothing::lhs_correction </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The matrix to add to the LHS matrix to implement smoothing. </p>

</div>
</div>
<a id="a3358d1cebda93803e20350eba53846ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3358d1cebda93803e20350eba53846ab">&#9670;&nbsp;</a></span>operator bool()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">FitPSF::PiecewiseBicubicPSFSmoothing::operator bool </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Is smoothing ready. </p>

</div>
</div>
<a id="a88c9ffb971e65df288176aef7126d13c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a88c9ffb971e65df288176aef7126d13c">&#9670;&nbsp;</a></span>prepare_smoothing()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::PiecewiseBicubicPSFSmoothing::prepare_smoothing </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>smoothing_penalty</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="FitPSF_2Common_8h.xhtml#a5432cdc9b255de958483cc386d5bba86">LinearSourceList</a> &amp;&#160;</td>
          <td class="paramname"><em>fit_sources</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>x_grid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>y_grid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::valarray&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>basis_parameter_sets</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>See non-default constructor. </p>

</div>
</div>
<a id="af3284e6c3e3695164327c7a2665842c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af3284e6c3e3695164327c7a2665842c6">&#9670;&nbsp;</a></span>rhs_correction()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const Eigen::VectorXd&amp; FitPSF::PiecewiseBicubicPSFSmoothing::rhs_correction </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The vector to add to the RHS vector to implement smoothing. </p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="a814146cde8b68799adbb7ba49eedfe69"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a814146cde8b68799adbb7ba49eedfe69">&#9670;&nbsp;</a></span>__lhs_matrix</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::MatrixXd FitPSF::PiecewiseBicubicPSFSmoothing::__lhs_matrix</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>See <a class="el" href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#a1895d2d684662000948ea3044f9b118e" title="The matrix to add to the LHS matrix to implement smoothing.">lhs_correction()</a>. </p>

</div>
</div>
<a id="a5f38168ce26a8dbb0b347b2dbca0479c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5f38168ce26a8dbb0b347b2dbca0479c">&#9670;&nbsp;</a></span>__lhs_spatial_dependence</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::MatrixXd FitPSF::PiecewiseBicubicPSFSmoothing::__lhs_spatial_dependence</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The average of \( {\kappa^s}^T \kappa^s \) over all sources. </p>

</div>
</div>
<a id="aaae6d5f3629bd508afe4a2bf60e69433"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaae6d5f3629bd508afe4a2bf60e69433">&#9670;&nbsp;</a></span>__prepared</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool FitPSF::PiecewiseBicubicPSFSmoothing::__prepared</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Is this object ready for smoothing? </p>

</div>
</div>
<a id="aba7974c6a9d33edb10e48dd18e88cf87"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aba7974c6a9d33edb10e48dd18e88cf87">&#9670;&nbsp;</a></span>__rhs_spatial_dependence</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::VectorXd FitPSF::PiecewiseBicubicPSFSmoothing::__rhs_spatial_dependence</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The average of the PSF terms for all sources. </p>

</div>
</div>
<a id="a7928ed648d939c6c23ad9fdde2b29831"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7928ed648d939c6c23ad9fdde2b29831">&#9670;&nbsp;</a></span>__rhs_vector</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::VectorXd FitPSF::PiecewiseBicubicPSFSmoothing::__rhs_vector</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>See <a class="el" href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml#af3284e6c3e3695164327c7a2665842c6" title="The vector to add to the RHS vector to implement smoothing.">rhs_correction()</a>. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/kpenev/projects/git/AstroWISP/doc_src/FitPSF/<a class="el" href="PiecewiseBicubicPSFSmoothing_8h_source.xhtml">PiecewiseBicubicPSFSmoothing.h</a></li>
<li>/home/kpenev/projects/git/AstroWISP/doc_src/FitPSF/PiecewiseBicubicPSFSmoothing.cpp</li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><b>FitPSF</b></li><li class="navelem"><a class="el" href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml">PiecewiseBicubicPSFSmoothing</a></li>
    <li class="footer">Generated on Wed Jan 15 2025 09:48:00 for Sub-Pixel Photometry by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1 </li>
  </ul>
</div>
</body>
</html>
