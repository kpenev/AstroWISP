<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Sub-Pixel Photometry: /home/kpenev/projects/git/AstroWISP/doc_src/IO/H5IODataTree.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "ams.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.jsdelivr.net/npm/mathjax@3/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Sub-Pixel Photometry
   </div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.svg"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.svg" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.xhtml');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('H5IODataTree_8h_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">H5IODataTree.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="H5IODataTree_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160; </div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#ifndef __H5_OUTPUT_DATA_TREE</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#define __H5_OUTPUT_DATA_TREE</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160; </div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &quot;../Core/SharedLibraryExportMacros.h&quot;</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="CommandLineConfig_8h.xhtml">CommandLineConfig.h</a>&quot;</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="TranslateToAny_8h.xhtml">TranslateToAny.h</a>&quot;</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="parse__grid_8h.xhtml">parse_grid.h</a>&quot;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &quot;../Background/Annulus.h&quot;</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &quot;../Core/PhotColumns.h&quot;</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &quot;../Core/Error.h&quot;</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &quot;../PSF/Grid.h&quot;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &quot;../PSF/Typedefs.h&quot;</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &quot;../Core/Typedefs.h&quot;</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;Eigen/Dense&quot;</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &lt;boost/property_tree/ptree.hpp&gt;</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;list&gt;</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;valarray&gt;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160; </div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">// namespace boost {</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">//   template&lt;class T,</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">//     typename std::enable_if&lt;std::is_same&lt;T, any&gt;{}, bool&gt;::type =true</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">//   &gt;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">//   bool operator == (const T&amp; lhs, const T&amp; rhs){</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">//     throw Error::NotImplemented(&quot;Comparison of boost any is undefined&quot;);</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">//   }</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">// }</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160; </div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">namespace </span>boost {</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> any&amp; lhs, <span class="keyword">const</span> any&amp; rhs);</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160; </div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">namespace </span>IO {</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">namespace </span>opt = boost::program_options;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; </div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">typedef</span> boost::property_tree::basic_ptree&lt;std::string, boost::any&gt;</div>
<div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="H5IODataTree_8h.xhtml#acacf08f9d944a251e55cb8eb68937805">   48</a></span>&#160;        <a class="code" href="H5IODataTree_8h.xhtml#acacf08f9d944a251e55cb8eb68937805">IOTreeBase</a>;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="classIO_1_1H5IODataTree.xhtml">   52</a></span>&#160;    <span class="keyword">class  </span><a class="code" href="classIO_1_1H5IODataTree.xhtml">H5IODataTree</a> : <span class="keyword">public</span> <a class="code" href="H5IODataTree_8h.xhtml#acacf08f9d944a251e55cb8eb68937805">IOTreeBase</a> {</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="classIO_1_1H5IODataTree.xhtml#ab27643dcfe44d4b7c263fcf5ef4e1031">   55</a></span>&#160;        <span class="keyword">enum</span> <a class="code" href="classIO_1_1H5IODataTree.xhtml#ab27643dcfe44d4b7c263fcf5ef4e1031">TOOL</a> {</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            FITPSF,</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            FITPRF,</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            SUBPIXPHOT,</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            FITSUBPIX</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        };</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; </div>
<div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="classIO_1_1H5IODataTree.xhtml#ad2658f14598882607961a67f344370c5">   63</a></span>&#160;        <a class="code" href="classIO_1_1H5IODataTree.xhtml#ab27643dcfe44d4b7c263fcf5ef4e1031">TOOL</a> <a class="code" href="classIO_1_1H5IODataTree.xhtml#ad2658f14598882607961a67f344370c5">__tool</a>;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="classIO_1_1H5IODataTree.xhtml#ae51465c781ddd1b4ab07ff2e95f0b606">   66</a></span>&#160;        std::string <a class="code" href="classIO_1_1H5IODataTree.xhtml#ae51465c781ddd1b4ab07ff2e95f0b606">__prefix</a>;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="classIO_1_1H5IODataTree.xhtml#a4ada965e4a2c03dc1c22ec8daf2bae32">   69</a></span>&#160;        std::string <a class="code" href="classIO_1_1H5IODataTree.xhtml#a4ada965e4a2c03dc1c22ec8daf2bae32">__psf_model</a>;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="classIO_1_1H5IODataTree.xhtml#a06df23de05773e2dffdf7e3e01ebaca1">   73</a></span>&#160;        std::list&lt; std::vector&lt;std::string&gt; *&gt; <a class="code" href="classIO_1_1H5IODataTree.xhtml#a06df23de05773e2dffdf7e3e01ebaca1">__strings_to_destroy</a>;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="classIO_1_1H5IODataTree.xhtml#aeb8e65510878b35a045753d6ca723f89">   76</a></span>&#160;        std::list&lt; std::vector&lt;int&gt;* &gt; <a class="code" href="classIO_1_1H5IODataTree.xhtml#aeb8e65510878b35a045753d6ca723f89">__ints_to_destroy</a>;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="classIO_1_1H5IODataTree.xhtml#a769e0f3bf07b094f93d1c88f8aaf7734">   79</a></span>&#160;        std::list&lt; std::vector&lt;unsigned&gt;* &gt; <a class="code" href="classIO_1_1H5IODataTree.xhtml#a769e0f3bf07b094f93d1c88f8aaf7734">__uints_to_destroy</a>;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="classIO_1_1H5IODataTree.xhtml#a559ff5ae2394707d0fc8b4dd98ae08a7">   82</a></span>&#160;        std::list&lt; std::vector&lt;long&gt;* &gt; <a class="code" href="classIO_1_1H5IODataTree.xhtml#a559ff5ae2394707d0fc8b4dd98ae08a7">__longs_to_destroy</a>;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno"><a class="line" href="classIO_1_1H5IODataTree.xhtml#ae0ca423c33564bf4d73b0af0dc7aea56">   85</a></span>&#160;        std::list&lt; std::vector&lt;unsigned long&gt;* &gt; <a class="code" href="classIO_1_1H5IODataTree.xhtml#ae0ca423c33564bf4d73b0af0dc7aea56">__ulongs_to_destroy</a>;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno"><a class="line" href="classIO_1_1H5IODataTree.xhtml#aa79e198491996c6dcf554d5aecd4741d">   88</a></span>&#160;        std::list&lt; std::vector&lt;short&gt;* &gt; <a class="code" href="classIO_1_1H5IODataTree.xhtml#aa79e198491996c6dcf554d5aecd4741d">__shorts_to_destroy</a>;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno"><a class="line" href="classIO_1_1H5IODataTree.xhtml#a0111c63e73fc9a89a097352734d889ef">   91</a></span>&#160;        std::list&lt; std::vector&lt;unsigned short&gt;* &gt; <a class="code" href="classIO_1_1H5IODataTree.xhtml#a0111c63e73fc9a89a097352734d889ef">__ushorts_to_destroy</a>;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="classIO_1_1H5IODataTree.xhtml#a3aeb3d13cdfc61fa2e92e2ee774d163e">   94</a></span>&#160;        std::list&lt; std::vector&lt;char&gt;* &gt; <a class="code" href="classIO_1_1H5IODataTree.xhtml#a3aeb3d13cdfc61fa2e92e2ee774d163e">__chars_to_destroy</a>;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="classIO_1_1H5IODataTree.xhtml#ad94d948bcbf2b58d4d897976a27e2b93">   97</a></span>&#160;        std::list&lt; std::vector&lt;unsigned char&gt;* &gt; <a class="code" href="classIO_1_1H5IODataTree.xhtml#ad94d948bcbf2b58d4d897976a27e2b93">__uchars_to_destroy</a>;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00100"></a><span class="lineno"><a class="line" href="classIO_1_1H5IODataTree.xhtml#a200ba8b617728920e601f5a1759515d2">  100</a></span>&#160;        std::list&lt; std::vector&lt;bool&gt;* &gt; <a class="code" href="classIO_1_1H5IODataTree.xhtml#a200ba8b617728920e601f5a1759515d2">__bools_to_destroy</a>;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; </div>
<div class="line"><a name="l00103"></a><span class="lineno"><a class="line" href="classIO_1_1H5IODataTree.xhtml#ae79153ef1509126be4d3f0710ec132a3">  103</a></span>&#160;        std::list&lt; Eigen::VectorXd* &gt; <a class="code" href="classIO_1_1H5IODataTree.xhtml#ae79153ef1509126be4d3f0710ec132a3">__doubles_to_destroy</a>;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> ARRAY_TYPE&gt;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="classIO_1_1H5IODataTree.xhtml#a28e023b097550a5fd3d692fa2d0bc011">destroy_allocated</a>(std::list&lt; ARRAY_TYPE* &gt; &amp;target);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> UNIT_TYPE&gt;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="classIO_1_1H5IODataTree.xhtml#a5f858dafb20ffc85aff8b5a5521cc4e0">add_1d_entry</a>(</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                UNIT_TYPE *value,</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                <span class="keywordtype">unsigned</span> length,</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; </div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                <span class="keyword">const</span> std::string &amp;quantity,</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160; </div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                <span class="comment">//the __*_to_destroy lists.</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                std::list&lt; std::vector&lt;UNIT_TYPE&gt;* &gt; &amp;destroy_list</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            );</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classIO_1_1H5IODataTree.xhtml#a5f858dafb20ffc85aff8b5a5521cc4e0">add_1d_entry</a>(</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            <span class="keywordtype">double</span> *value,</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; </div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="keywordtype">unsigned</span> length,</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            <span class="keyword">const</span> std::string &amp;quantity</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        );</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160; </div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classIO_1_1H5IODataTree.xhtml#adb926c223aa4664e0b3feedb6faed201">add_1d_string_entry</a>(</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <span class="keywordtype">char</span> **value,</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160; </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            <span class="keywordtype">unsigned</span> length,</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; </div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="keyword">const</span> std::string &amp;path</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        );</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classIO_1_1H5IODataTree.xhtml#ad229d523453b8966b602712c8c57942c">initialize_command_line</a>(</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            <span class="keywordtype">int</span> argc,</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160; </div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            <span class="keywordtype">char</span>** argv,</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160; </div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            <span class="keyword">const</span> std::string &amp;executable,</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160; </div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            <span class="keyword">const</span> std::string &amp;version</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        );</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160; </div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classIO_1_1H5IODataTree.xhtml#ae94b603ffec3dfc6603d78f54828d2b1">process_psffit_option</a>(</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            <span class="keyword">const</span> std::string &amp;key,</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160; </div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            <span class="keyword">const</span> opt::variable_value &amp;value</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        );</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160; </div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classIO_1_1H5IODataTree.xhtml#a08e45dceb20a20d691689df00d5b758a">process_subpixphot_option</a>(</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            <span class="keyword">const</span> std::string &amp;key,</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            <span class="keyword">const</span> opt::variable_value &amp;value</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        );</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160; </div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00185"></a><span class="lineno"><a class="line" href="classIO_1_1H5IODataTree.xhtml#a80589ee62bd0c76b9d74f30e8fce7866">  185</a></span>&#160;        <a class="code" href="classIO_1_1H5IODataTree.xhtml#a80589ee62bd0c76b9d74f30e8fce7866">H5IODataTree</a>() {}</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160; </div>
<div class="line"><a name="l00188"></a><span class="lineno"><a class="line" href="classIO_1_1H5IODataTree.xhtml#a25ce465d6fb107af1a7b0c7a2049902c">  188</a></span>&#160;        <a class="code" href="classIO_1_1H5IODataTree.xhtml#a25ce465d6fb107af1a7b0c7a2049902c">H5IODataTree</a>(</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="keywordtype">int</span> argc,</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160; </div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            <span class="keywordtype">char</span>** argv,</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <span class="keyword">const</span> std::string &amp;version,</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            <span class="keyword">const</span> <a class="code" href="classIO_1_1CommandLineConfig.xhtml">CommandLineConfig</a>&amp; options</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        )</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        {</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            <a class="code" href="classIO_1_1H5IODataTree.xhtml#ad229d523453b8966b602712c8c57942c">initialize_command_line</a>(argc, argv, options.<a class="code" href="classIO_1_1CommandLineConfig.xhtml#adc6d39d1dc133dc54a9cacfcfc7f5861">executable</a>(), version);</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            <a class="code" href="classIO_1_1H5IODataTree.xhtml#a8b9b9839a979107699f80644fcb43a16">fill_configuration</a>(options);</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        }</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160; </div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classIO_1_1H5IODataTree.xhtml#a8b9b9839a979107699f80644fcb43a16">fill_configuration</a>(</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            <span class="keyword">const</span> boost::program_options::variables_map&amp; options</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        );</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160; </div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classIO_1_1H5IODataTree.xhtml#a72bdea9e10c61c53474352deb3d3ed5f">add_c_array</a>(</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;            <span class="keyword">const</span> std::string &amp;quantity,</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160; </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            <span class="keywordtype">void</span> *value,</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160; </div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            <span class="keyword">const</span> std::string &amp;format,</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160; </div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            <span class="keywordtype">unsigned</span> length</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        );</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160; </div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        ~<a class="code" href="classIO_1_1H5IODataTree.xhtml">H5IODataTree</a>();</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    }; <span class="comment">//End H5IODataTree class.</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160; </div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;     std::ostream &amp;operator&lt;&lt;(</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        std::ostream &amp;os,</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; </div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <span class="keyword">const</span> IOTreeBase &amp;tree</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    );</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160; </div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> ARRAY_TYPE&gt;</div>
<div class="line"><a name="l00242"></a><span class="lineno"><a class="line" href="classIO_1_1H5IODataTree.xhtml#a28e023b097550a5fd3d692fa2d0bc011">  242</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classIO_1_1H5IODataTree.xhtml#a28e023b097550a5fd3d692fa2d0bc011">H5IODataTree::destroy_allocated</a>(std::list&lt; ARRAY_TYPE* &gt; &amp;target)</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        {</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            <span class="keywordflow">for</span>(</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                <span class="keyword">typename</span> std::list&lt; ARRAY_TYPE* &gt;::iterator</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                target_i = target.begin();</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                target_i != target.end();</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                ++target_i</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            )</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                <span class="keyword">delete</span> *target_i;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        }</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160; </div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> UNIT_TYPE&gt;</div>
<div class="line"><a name="l00254"></a><span class="lineno"><a class="line" href="classIO_1_1H5IODataTree.xhtml#a5f858dafb20ffc85aff8b5a5521cc4e0">  254</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classIO_1_1H5IODataTree.xhtml#a5f858dafb20ffc85aff8b5a5521cc4e0">H5IODataTree::add_1d_entry</a>(</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            UNIT_TYPE *value,</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            <span class="keywordtype">unsigned</span> length,</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            <span class="keyword">const</span> std::string &amp;quantity,</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            std::list&lt; std::vector&lt;UNIT_TYPE&gt;* &gt; &amp;destroy_list</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        )</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        {</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            std::vector&lt;UNIT_TYPE&gt; *entry=<span class="keyword">new</span> std::vector&lt;UNIT_TYPE&gt;(</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                value,</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                value + length</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            );</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            <span class="keywordflow">if</span>(length &gt; 1) {</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                put(quantity,</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                    entry,</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                    <a class="code" href="classIO_1_1TranslateToAny.xhtml">IO::TranslateToAny</a>&lt; std::vector&lt;UNIT_TYPE&gt; &gt;());</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                destroy_list.push_back(entry);</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;            } <span class="keywordflow">else</span> <span class="keywordflow">if</span>(length == 1) {</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                put(quantity,</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                    (*entry)[0],</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                    <a class="code" href="classIO_1_1TranslateToAny.xhtml">IO::TranslateToAny&lt; UNIT_TYPE &gt;</a>());</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                <span class="keyword">delete</span> entry;</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            } <span class="keywordflow">else</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="classError_1_1InvalidArgument.xhtml">Error::InvalidArgument</a>(</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                    <span class="stringliteral">&quot;add_1d_tree_entry&quot;</span>,</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                    <span class="stringliteral">&quot;Attempting to add zero length dataset to I/O tree!&quot;</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                );</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        }</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160; </div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;} <span class="comment">//End IO namespace.</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160; </div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="ttc" id="aCommandLineConfig_8h_xhtml"><div class="ttname"><a href="CommandLineConfig_8h.xhtml">CommandLineConfig.h</a></div><div class="ttdoc">Declare a class for managing the configuration with which tools are run.</div></div>
<div class="ttc" id="aH5IODataTree_8h_xhtml_acacf08f9d944a251e55cb8eb68937805"><div class="ttname"><a href="H5IODataTree_8h.xhtml#acacf08f9d944a251e55cb8eb68937805">IO::IOTreeBase</a></div><div class="ttdeci">boost::property_tree::basic_ptree&lt; std::string, boost::any &gt; IOTreeBase</div><div class="ttdoc">Convenience alias for the boost base class for the IO tree.</div><div class="ttdef"><b>Definition:</b> H5IODataTree.h:48</div></div>
<div class="ttc" id="aTranslateToAny_8h_xhtml"><div class="ttname"><a href="TranslateToAny_8h.xhtml">TranslateToAny.h</a></div><div class="ttdoc">Defines a class that allows placing inhomogeneous types data in property trees.</div></div>
<div class="ttc" id="aclassError_1_1InvalidArgument_xhtml"><div class="ttname"><a href="classError_1_1InvalidArgument.xhtml">Error::InvalidArgument</a></div><div class="ttdoc">A function (or method) received an argument with an invalid value.</div><div class="ttdef"><b>Definition:</b> Error.h:127</div></div>
<div class="ttc" id="aclassIO_1_1CommandLineConfig_xhtml"><div class="ttname"><a href="classIO_1_1CommandLineConfig.xhtml">IO::CommandLineConfig</a></div><div class="ttdoc">A base class for configuration of tools using the command line.</div><div class="ttdef"><b>Definition:</b> CommandLineConfig.h:22</div></div>
<div class="ttc" id="aclassIO_1_1CommandLineConfig_xhtml_adc6d39d1dc133dc54a9cacfcfc7f5861"><div class="ttname"><a href="classIO_1_1CommandLineConfig.xhtml#adc6d39d1dc133dc54a9cacfcfc7f5861">IO::CommandLineConfig::executable</a></div><div class="ttdeci">const std::string &amp; executable() const</div><div class="ttdoc">The executable whose command line is being processed (no path).</div><div class="ttdef"><b>Definition:</b> CommandLineConfig.h:84</div></div>
<div class="ttc" id="aclassIO_1_1H5IODataTree_xhtml"><div class="ttname"><a href="classIO_1_1H5IODataTree.xhtml">IO::H5IODataTree</a></div><div class="ttdoc">A property tree to hold all datasets, attributes and links to output.</div><div class="ttdef"><b>Definition:</b> H5IODataTree.h:52</div></div>
<div class="ttc" id="aclassIO_1_1H5IODataTree_xhtml_a0111c63e73fc9a89a097352734d889ef"><div class="ttname"><a href="classIO_1_1H5IODataTree.xhtml#a0111c63e73fc9a89a097352734d889ef">IO::H5IODataTree::__ushorts_to_destroy</a></div><div class="ttdeci">std::list&lt; std::vector&lt; unsigned short &gt; * &gt; __ushorts_to_destroy</div><div class="ttdoc">See __strings_to_destroy;.</div><div class="ttdef"><b>Definition:</b> H5IODataTree.h:91</div></div>
<div class="ttc" id="aclassIO_1_1H5IODataTree_xhtml_a06df23de05773e2dffdf7e3e01ebaca1"><div class="ttname"><a href="classIO_1_1H5IODataTree.xhtml#a06df23de05773e2dffdf7e3e01ebaca1">IO::H5IODataTree::__strings_to_destroy</a></div><div class="ttdeci">std::list&lt; std::vector&lt; std::string &gt; * &gt; __strings_to_destroy</div><div class="ttdef"><b>Definition:</b> H5IODataTree.h:73</div></div>
<div class="ttc" id="aclassIO_1_1H5IODataTree_xhtml_a08e45dceb20a20d691689df00d5b758a"><div class="ttname"><a href="classIO_1_1H5IODataTree.xhtml#a08e45dceb20a20d691689df00d5b758a">IO::H5IODataTree::process_subpixphot_option</a></div><div class="ttdeci">void process_subpixphot_option(const std::string &amp;key, const opt::variable_value &amp;value)</div><div class="ttdoc">Decides what to do with a single options entry for psf fitting.</div><div class="ttdef"><b>Definition:</b> H5IODataTree.cpp:142</div></div>
<div class="ttc" id="aclassIO_1_1H5IODataTree_xhtml_a200ba8b617728920e601f5a1759515d2"><div class="ttname"><a href="classIO_1_1H5IODataTree.xhtml#a200ba8b617728920e601f5a1759515d2">IO::H5IODataTree::__bools_to_destroy</a></div><div class="ttdeci">std::list&lt; std::vector&lt; bool &gt; * &gt; __bools_to_destroy</div><div class="ttdoc">See __strings_to_destroy;.</div><div class="ttdef"><b>Definition:</b> H5IODataTree.h:100</div></div>
<div class="ttc" id="aclassIO_1_1H5IODataTree_xhtml_a25ce465d6fb107af1a7b0c7a2049902c"><div class="ttname"><a href="classIO_1_1H5IODataTree.xhtml#a25ce465d6fb107af1a7b0c7a2049902c">IO::H5IODataTree::H5IODataTree</a></div><div class="ttdeci">H5IODataTree(int argc, char **argv, const std::string &amp;version, const CommandLineConfig &amp;options)</div><div class="ttdoc">Fills all command line information.</div><div class="ttdef"><b>Definition:</b> H5IODataTree.h:188</div></div>
<div class="ttc" id="aclassIO_1_1H5IODataTree_xhtml_a28e023b097550a5fd3d692fa2d0bc011"><div class="ttname"><a href="classIO_1_1H5IODataTree.xhtml#a28e023b097550a5fd3d692fa2d0bc011">IO::H5IODataTree::destroy_allocated</a></div><div class="ttdeci">void destroy_allocated(std::list&lt; ARRAY_TYPE * &gt; &amp;target)</div><div class="ttdoc">Destroy one of the __*_to_destroy lists.</div><div class="ttdef"><b>Definition:</b> H5IODataTree.h:242</div></div>
<div class="ttc" id="aclassIO_1_1H5IODataTree_xhtml_a3aeb3d13cdfc61fa2e92e2ee774d163e"><div class="ttname"><a href="classIO_1_1H5IODataTree.xhtml#a3aeb3d13cdfc61fa2e92e2ee774d163e">IO::H5IODataTree::__chars_to_destroy</a></div><div class="ttdeci">std::list&lt; std::vector&lt; char &gt; * &gt; __chars_to_destroy</div><div class="ttdoc">See __strings_to_destroy;.</div><div class="ttdef"><b>Definition:</b> H5IODataTree.h:94</div></div>
<div class="ttc" id="aclassIO_1_1H5IODataTree_xhtml_a4ada965e4a2c03dc1c22ec8daf2bae32"><div class="ttname"><a href="classIO_1_1H5IODataTree.xhtml#a4ada965e4a2c03dc1c22ec8daf2bae32">IO::H5IODataTree::__psf_model</a></div><div class="ttdeci">std::string __psf_model</div><div class="ttdoc">The PSF model used (for PSF fitting only).</div><div class="ttdef"><b>Definition:</b> H5IODataTree.h:69</div></div>
<div class="ttc" id="aclassIO_1_1H5IODataTree_xhtml_a559ff5ae2394707d0fc8b4dd98ae08a7"><div class="ttname"><a href="classIO_1_1H5IODataTree.xhtml#a559ff5ae2394707d0fc8b4dd98ae08a7">IO::H5IODataTree::__longs_to_destroy</a></div><div class="ttdeci">std::list&lt; std::vector&lt; long &gt; * &gt; __longs_to_destroy</div><div class="ttdoc">See __strings_to_destroy;.</div><div class="ttdef"><b>Definition:</b> H5IODataTree.h:82</div></div>
<div class="ttc" id="aclassIO_1_1H5IODataTree_xhtml_a5f858dafb20ffc85aff8b5a5521cc4e0"><div class="ttname"><a href="classIO_1_1H5IODataTree.xhtml#a5f858dafb20ffc85aff8b5a5521cc4e0">IO::H5IODataTree::add_1d_entry</a></div><div class="ttdeci">void add_1d_entry(UNIT_TYPE *value, unsigned length, const std::string &amp;quantity, std::list&lt; std::vector&lt; UNIT_TYPE &gt; * &gt; &amp;destroy_list)</div><div class="ttdoc">Add values from a C-style array to the tree.</div><div class="ttdef"><b>Definition:</b> H5IODataTree.h:254</div></div>
<div class="ttc" id="aclassIO_1_1H5IODataTree_xhtml_a72bdea9e10c61c53474352deb3d3ed5f"><div class="ttname"><a href="classIO_1_1H5IODataTree.xhtml#a72bdea9e10c61c53474352deb3d3ed5f">IO::H5IODataTree::add_c_array</a></div><div class="ttdeci">void add_c_array(const std::string &amp;quantity, void *value, const std::string &amp;format, unsigned length)</div><div class="ttdoc">Add a C-style array of values to the tree.</div><div class="ttdef"><b>Definition:</b> H5IODataTree.cpp:229</div></div>
<div class="ttc" id="aclassIO_1_1H5IODataTree_xhtml_a769e0f3bf07b094f93d1c88f8aaf7734"><div class="ttname"><a href="classIO_1_1H5IODataTree.xhtml#a769e0f3bf07b094f93d1c88f8aaf7734">IO::H5IODataTree::__uints_to_destroy</a></div><div class="ttdeci">std::list&lt; std::vector&lt; unsigned &gt; * &gt; __uints_to_destroy</div><div class="ttdoc">See __strings_to_destroy;.</div><div class="ttdef"><b>Definition:</b> H5IODataTree.h:79</div></div>
<div class="ttc" id="aclassIO_1_1H5IODataTree_xhtml_a80589ee62bd0c76b9d74f30e8fce7866"><div class="ttname"><a href="classIO_1_1H5IODataTree.xhtml#a80589ee62bd0c76b9d74f30e8fce7866">IO::H5IODataTree::H5IODataTree</a></div><div class="ttdeci">H5IODataTree()</div><div class="ttdoc">Creates an empty tree.</div><div class="ttdef"><b>Definition:</b> H5IODataTree.h:185</div></div>
<div class="ttc" id="aclassIO_1_1H5IODataTree_xhtml_a8b9b9839a979107699f80644fcb43a16"><div class="ttname"><a href="classIO_1_1H5IODataTree.xhtml#a8b9b9839a979107699f80644fcb43a16">IO::H5IODataTree::fill_configuration</a></div><div class="ttdeci">void fill_configuration(const boost::program_options::variables_map &amp;options)</div><div class="ttdoc">Fills all attributes defining the configuration from the command line.</div><div class="ttdef"><b>Definition:</b> H5IODataTree.cpp:175</div></div>
<div class="ttc" id="aclassIO_1_1H5IODataTree_xhtml_aa79e198491996c6dcf554d5aecd4741d"><div class="ttname"><a href="classIO_1_1H5IODataTree.xhtml#aa79e198491996c6dcf554d5aecd4741d">IO::H5IODataTree::__shorts_to_destroy</a></div><div class="ttdeci">std::list&lt; std::vector&lt; short &gt; * &gt; __shorts_to_destroy</div><div class="ttdoc">See __strings_to_destroy;.</div><div class="ttdef"><b>Definition:</b> H5IODataTree.h:88</div></div>
<div class="ttc" id="aclassIO_1_1H5IODataTree_xhtml_ab27643dcfe44d4b7c263fcf5ef4e1031"><div class="ttname"><a href="classIO_1_1H5IODataTree.xhtml#ab27643dcfe44d4b7c263fcf5ef4e1031">IO::H5IODataTree::TOOL</a></div><div class="ttdeci">TOOL</div><div class="ttdoc">Tags for the various tools that can fill this tree with data.</div><div class="ttdef"><b>Definition:</b> H5IODataTree.h:55</div></div>
<div class="ttc" id="aclassIO_1_1H5IODataTree_xhtml_ad229d523453b8966b602712c8c57942c"><div class="ttname"><a href="classIO_1_1H5IODataTree.xhtml#ad229d523453b8966b602712c8c57942c">IO::H5IODataTree::initialize_command_line</a></div><div class="ttdeci">void initialize_command_line(int argc, char **argv, const std::string &amp;executable, const std::string &amp;version)</div><div class="ttdoc">Prepares the tree for the specific tool used.</div><div class="ttdef"><b>Definition:</b> H5IODataTree.cpp:45</div></div>
<div class="ttc" id="aclassIO_1_1H5IODataTree_xhtml_ad2658f14598882607961a67f344370c5"><div class="ttname"><a href="classIO_1_1H5IODataTree.xhtml#ad2658f14598882607961a67f344370c5">IO::H5IODataTree::__tool</a></div><div class="ttdeci">TOOL __tool</div><div class="ttdoc">The that was used to generate the data in the tree.</div><div class="ttdef"><b>Definition:</b> H5IODataTree.h:63</div></div>
<div class="ttc" id="aclassIO_1_1H5IODataTree_xhtml_ad94d948bcbf2b58d4d897976a27e2b93"><div class="ttname"><a href="classIO_1_1H5IODataTree.xhtml#ad94d948bcbf2b58d4d897976a27e2b93">IO::H5IODataTree::__uchars_to_destroy</a></div><div class="ttdeci">std::list&lt; std::vector&lt; unsigned char &gt; * &gt; __uchars_to_destroy</div><div class="ttdoc">See __strings_to_destroy;.</div><div class="ttdef"><b>Definition:</b> H5IODataTree.h:97</div></div>
<div class="ttc" id="aclassIO_1_1H5IODataTree_xhtml_adb926c223aa4664e0b3feedb6faed201"><div class="ttname"><a href="classIO_1_1H5IODataTree.xhtml#adb926c223aa4664e0b3feedb6faed201">IO::H5IODataTree::add_1d_string_entry</a></div><div class="ttdeci">void add_1d_string_entry(char **value, unsigned length, const std::string &amp;path)</div><div class="ttdoc">Add values from a C-style array of strings to the tree.</div><div class="ttdef"><b>Definition:</b> H5IODataTree.cpp:204</div></div>
<div class="ttc" id="aclassIO_1_1H5IODataTree_xhtml_ae0ca423c33564bf4d73b0af0dc7aea56"><div class="ttname"><a href="classIO_1_1H5IODataTree.xhtml#ae0ca423c33564bf4d73b0af0dc7aea56">IO::H5IODataTree::__ulongs_to_destroy</a></div><div class="ttdeci">std::list&lt; std::vector&lt; unsigned long &gt; * &gt; __ulongs_to_destroy</div><div class="ttdoc">See __strings_to_destroy;.</div><div class="ttdef"><b>Definition:</b> H5IODataTree.h:85</div></div>
<div class="ttc" id="aclassIO_1_1H5IODataTree_xhtml_ae51465c781ddd1b4ab07ff2e95f0b606"><div class="ttname"><a href="classIO_1_1H5IODataTree.xhtml#ae51465c781ddd1b4ab07ff2e95f0b606">IO::H5IODataTree::__prefix</a></div><div class="ttdeci">std::string __prefix</div><div class="ttdoc">The first part of the key for elements corresponding to the given tool.</div><div class="ttdef"><b>Definition:</b> H5IODataTree.h:66</div></div>
<div class="ttc" id="aclassIO_1_1H5IODataTree_xhtml_ae79153ef1509126be4d3f0710ec132a3"><div class="ttname"><a href="classIO_1_1H5IODataTree.xhtml#ae79153ef1509126be4d3f0710ec132a3">IO::H5IODataTree::__doubles_to_destroy</a></div><div class="ttdeci">std::list&lt; Eigen::VectorXd * &gt; __doubles_to_destroy</div><div class="ttdoc">See __strings_to_destroy;.</div><div class="ttdef"><b>Definition:</b> H5IODataTree.h:103</div></div>
<div class="ttc" id="aclassIO_1_1H5IODataTree_xhtml_ae94b603ffec3dfc6603d78f54828d2b1"><div class="ttname"><a href="classIO_1_1H5IODataTree.xhtml#ae94b603ffec3dfc6603d78f54828d2b1">IO::H5IODataTree::process_psffit_option</a></div><div class="ttdeci">void process_psffit_option(const std::string &amp;key, const opt::variable_value &amp;value)</div><div class="ttdoc">Decides what to do with a single options entry for psf fitting.</div><div class="ttdef"><b>Definition:</b> H5IODataTree.cpp:84</div></div>
<div class="ttc" id="aclassIO_1_1H5IODataTree_xhtml_aeb8e65510878b35a045753d6ca723f89"><div class="ttname"><a href="classIO_1_1H5IODataTree.xhtml#aeb8e65510878b35a045753d6ca723f89">IO::H5IODataTree::__ints_to_destroy</a></div><div class="ttdeci">std::list&lt; std::vector&lt; int &gt; * &gt; __ints_to_destroy</div><div class="ttdoc">See __strings_to_destroy;.</div><div class="ttdef"><b>Definition:</b> H5IODataTree.h:76</div></div>
<div class="ttc" id="aclassIO_1_1TranslateToAny_xhtml"><div class="ttname"><a href="classIO_1_1TranslateToAny.xhtml">IO::TranslateToAny</a></div><div class="ttdoc">Translator that works with boost::any for use with boost property trees.</div><div class="ttdef"><b>Definition:</b> TranslateToAny.h:30</div></div>
<div class="ttc" id="aparse__grid_8h_xhtml"><div class="ttname"><a href="parse__grid_8h.xhtml">parse_grid.h</a></div><div class="ttdoc">Define functions for converting between string and PSF::Grid.</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_65a8df4c49f610a40e9230d0067dc79d.xhtml">doc_src</a></li><li class="navelem"><a class="el" href="dir_8302b1090f3908a9d2b3114f60c0dba1.xhtml">IO</a></li><li class="navelem"><a class="el" href="H5IODataTree_8h.xhtml">H5IODataTree.h</a></li>
    <li class="footer">Generated on Wed Jan 15 2025 09:47:59 for Sub-Pixel Photometry by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1 </li>
  </ul>
</div>
</body>
</html>
