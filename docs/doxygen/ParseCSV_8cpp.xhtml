<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.20"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Sub-Pixel Photometry: /Users/kpenev/projects/git/SuperPhot/doc_src/Core/ParseCSV.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Sub-Pixel Photometry
   </div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.svg"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.svg" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.20 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('ParseCSV_8cpp.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">ParseCSV.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>The definitions of the function in <a class="el" href="ParseCSV_8h.xhtml" title="Declarations of functions for parsing strings of comma separated values to lists.">ParseCSV.h</a>.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &quot;<a class="el" href="ParseCSV_8h_source.xhtml">ParseCSV.h</a>&quot;</code><br />
</div><div class="textblock"><div class="dynheader">
Include dependency graph for ParseCSV.cpp:</div>
<div class="dyncontent">
<div class="center"><img src="ParseCSV_8cpp__incl.png" border="0" usemap="#a_2Users_2kpenev_2projects_2git_2SuperPhot_2doc__src_2Core_2ParseCSV_8cpp" alt=""/></div>
<map name="_2Users_2kpenev_2projects_2git_2SuperPhot_2doc__src_2Core_2ParseCSV_8cpp" id="a_2Users_2kpenev_2projects_2git_2SuperPhot_2doc__src_2Core_2ParseCSV_8cpp">
<area shape="rect" title="The definitions of the function in ParseCSV.h." alt="" coords="399,5,582,68"/>
<area shape="rect" href="ParseCSV_8h.xhtml" title="Declarations of functions for parsing strings of comma separated values to lists." alt="" coords="436,116,545,145"/>
<area shape="rect" href="SharedLibraryExportMacros_8h_source.xhtml" title=" " alt="" coords="290,347,509,393"/>
<area shape="rect" href="PhotColumns_8h.xhtml" title="Defines constants to denote the various columns that can be input or output by the various tools and ..." alt="" coords="73,270,204,299"/>
<area shape="rect" title=" " alt="" coords="5,356,66,385"/>
<area shape="rect" href="Core_2Typedefs_8h.xhtml" title="Some useful typedef statements." alt="" coords="305,193,404,222"/>
<area shape="rect" title=" " alt="" coords="568,270,610,299"/>
<area shape="rect" href="Error_8h.xhtml" title="The hierarchy of exceptions for this project." alt="" coords="712,193,781,222"/>
<area shape="rect" title=" " alt="" coords="106,356,170,385"/>
<area shape="rect" title=" " alt="" coords="202,356,266,385"/>
<area shape="rect" title=" " alt="" coords="278,270,356,299"/>
<area shape="rect" title=" " alt="" coords="430,270,545,299"/>
<area shape="rect" title=" " alt="" coords="736,270,813,299"/>
<area shape="rect" title=" " alt="" coords="837,270,919,299"/>
</map>
</div>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ab37ad041e1eab2b71b9f3001ce65965b"><td class="memTemplParams" colspan="2">template&lt;class ITER_TYPE , class VAL_TYPE &gt; </td></tr>
<tr class="memitem:ab37ad041e1eab2b71b9f3001ce65965b"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="ParseCSV_8cpp.xhtml#ab37ad041e1eab2b71b9f3001ce65965b">Core::replicate_last</a> (ITER_TYPE &amp;start_replicate, unsigned copies, std::list&lt; VAL_TYPE &gt; &amp;target)</td></tr>
<tr class="memdesc:ab37ad041e1eab2b71b9f3001ce65965b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Extends a list with a number of copies of its last elements.  <a href="ParseCSV_8cpp.xhtml#ab37ad041e1eab2b71b9f3001ce65965b">More...</a><br /></td></tr>
<tr class="separator:ab37ad041e1eab2b71b9f3001ce65965b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e02a5653477396123c9e733302a7f2b"><td class="memItemLeft" align="right" valign="top">RealList&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ParseCSV_8cpp.xhtml#a0e02a5653477396123c9e733302a7f2b">Core::parse_real_list</a> ( const std::string &amp;csv, const std::string &amp;optname, unsigned min_count, unsigned max_count)</td></tr>
<tr class="memdesc:a0e02a5653477396123c9e733302a7f2b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parses a string of comma separated real values into a list.  <a href="ParseCSV_8cpp.xhtml#a0e02a5653477396123c9e733302a7f2b">More...</a><br /></td></tr>
<tr class="separator:a0e02a5653477396123c9e733302a7f2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b72ac36292e4841ce988699f7e8c487"><td class="memItemLeft" align="right" valign="top">std::list&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ParseCSV_8cpp.xhtml#a9b72ac36292e4841ce988699f7e8c487">Core::parse_int_list</a> (const std::string &amp;csv, const std::string &amp;optname, unsigned min_count, unsigned max_count)</td></tr>
<tr class="memdesc:a9b72ac36292e4841ce988699f7e8c487"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pareses a string of comma separated integer values into a list.  <a href="ParseCSV_8cpp.xhtml#a9b72ac36292e4841ce988699f7e8c487">More...</a><br /></td></tr>
<tr class="separator:a9b72ac36292e4841ce988699f7e8c487"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af969a186bf8ead3ccefe36a41cad6d25"><td class="memItemLeft" align="right" valign="top">ColumnList&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ParseCSV_8cpp.xhtml#af969a186bf8ead3ccefe36a41cad6d25">Core::parse_column_list</a> ( const std::string &amp;csv, unsigned num_apertures, const std::string &amp;optname, bool allow_unknown=true)</td></tr>
<tr class="memdesc:af969a186bf8ead3ccefe36a41cad6d25"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parses a string of comma separated column names into a list, replicating per-aperture columns appropriately.  <a href="ParseCSV_8cpp.xhtml#af969a186bf8ead3ccefe36a41cad6d25">More...</a><br /></td></tr>
<tr class="separator:af969a186bf8ead3ccefe36a41cad6d25"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76e2e1a5a5d4f67163949b14bd4cdebb"><td class="memItemLeft" align="right" valign="top">StringList&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ParseCSV_8cpp.xhtml#a76e2e1a5a5d4f67163949b14bd4cdebb">Core::parse_string_list</a> ( const std::string &amp;csv, const std::string &amp;optname, unsigned min_count, unsigned max_count)</td></tr>
<tr class="memdesc:a76e2e1a5a5d4f67163949b14bd4cdebb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parses a string of comma separated sub-strings into a list.  <a href="ParseCSV_8cpp.xhtml#a76e2e1a5a5d4f67163949b14bd4cdebb">More...</a><br /></td></tr>
<tr class="separator:a76e2e1a5a5d4f67163949b14bd4cdebb"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>The definitions of the function in <a class="el" href="ParseCSV_8h.xhtml" title="Declarations of functions for parsing strings of comma separated values to lists.">ParseCSV.h</a>. </p>
</div><h2 class="groupheader">Function Documentation</h2>
<a id="af969a186bf8ead3ccefe36a41cad6d25"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af969a186bf8ead3ccefe36a41cad6d25">&#9670;&nbsp;</a></span>parse_column_list()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ColumnList Core::parse_column_list </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>csv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>num_apertures</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>optname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>allow_unknown</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Parses a string of comma separated column names into a list, replicating per-aperture columns appropriately. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">csv</td><td>The string to parse. </td></tr>
    <tr><td class="paramname">num_apertures</td><td>How many copies of per-aperture columns to make. </td></tr>
    <tr><td class="paramname">optname</td><td>The name of the option being parsed (only used for error message). </td></tr>
    <tr><td class="paramname">allow_unknown</td><td>Instead of throwing an exception assign <a class="el" href="namespacePhot.xhtml#afd335f0316f5f0113818bf99d5f6d6b5a5ebf74e9902855cc245b4f4a870c4a8e" title="A column that is not used but is in a file.">Phot::unknown</a> to any unrecognized column name. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a9b72ac36292e4841ce988699f7e8c487"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9b72ac36292e4841ce988699f7e8c487">&#9670;&nbsp;</a></span>parse_int_list()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::list&lt; int &gt; Core::parse_int_list </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>csv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>optname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>min_count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>max_count</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Pareses a string of comma separated integer values into a list. </p>
<p>See <a class="el" href="ParseCSV_8cpp.xhtml#a0e02a5653477396123c9e733302a7f2b" title="Parses a string of comma separated real values into a list.">parse_real_list()</a> for a description of the arguments. </p>

</div>
</div>
<a id="a0e02a5653477396123c9e733302a7f2b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0e02a5653477396123c9e733302a7f2b">&#9670;&nbsp;</a></span>parse_real_list()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">RealList Core::parse_real_list </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>csv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>optname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>min_count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>max_count</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Parses a string of comma separated real values into a list. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">csv</td><td>The list to parse </td></tr>
    <tr><td class="paramname">optname</td><td>The name of the option (only used for error message) </td></tr>
    <tr><td class="paramname">min_count</td><td>Minimum required number of values (exception thrown if not met). </td></tr>
    <tr><td class="paramname">max_count</td><td>Maximum required number of values (exception thrown if exceeded). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a76e2e1a5a5d4f67163949b14bd4cdebb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a76e2e1a5a5d4f67163949b14bd4cdebb">&#9670;&nbsp;</a></span>parse_string_list()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">StringList Core::parse_string_list </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>csv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>optname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>min_count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>max_count</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Parses a string of comma separated sub-strings into a list. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">csv</td><td>The list to parse. </td></tr>
    <tr><td class="paramname">optname</td><td>The name of the option (only used for error message) </td></tr>
    <tr><td class="paramname">min_count</td><td>Minimum required number of values (exception thrown if not met). </td></tr>
    <tr><td class="paramname">max_count</td><td>Maximum required number of values (exception thrown if exceeded). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ab37ad041e1eab2b71b9f3001ce65965b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab37ad041e1eab2b71b9f3001ce65965b">&#9670;&nbsp;</a></span>replicate_last()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class ITER_TYPE , class VAL_TYPE &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void Core::replicate_last </td>
          <td>(</td>
          <td class="paramtype">ITER_TYPE &amp;&#160;</td>
          <td class="paramname"><em>start_replicate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>copies</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::list&lt; VAL_TYPE &gt; &amp;&#160;</td>
          <td class="paramname"><em>target</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Extends a list with a number of copies of its last elements. </p>
<p>Because the output contains columns of quantities that are aperture dependent (as well as some that are not), it is necessary to create multiple copies of the column identifiers that need to have one column per aperture. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start_replicate</td><td>All elements after this one (including this one) are replicated. </td></tr>
    <tr><td class="paramname">copies</td><td>The number of copies to make. </td></tr>
    <tr><td class="paramname">target</td><td>The list this operation is performed on. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_65a8df4c49f610a40e9230d0067dc79d.xhtml">doc_src</a></li><li class="navelem"><a class="el" href="dir_e75aa1031ab20a404a56c263335b2987.xhtml">Core</a></li><li class="navelem"><a class="el" href="ParseCSV_8cpp.xhtml">ParseCSV.cpp</a></li>
    <li class="footer">Generated on Mon May 20 2024 13:33:57 for Sub-Pixel Photometry by <a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.8.20 </li>
  </ul>
</div>
</body>
</html>
