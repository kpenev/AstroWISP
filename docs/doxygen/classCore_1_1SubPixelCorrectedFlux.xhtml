<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Sub-Pixel Photometry: Core::SubPixelCorrectedFlux&lt; SUBPIX_TYPE &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "ams.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.jsdelivr.net/npm/mathjax@3/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Sub-Pixel Photometry
   </div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.svg"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.svg" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.xhtml');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classCore_1_1SubPixelCorrectedFlux.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pri-methods">Private Member Functions</a> &#124;
<a href="#pri-attribs">Private Attributes</a> &#124;
<a href="classCore_1_1SubPixelCorrectedFlux-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Core::SubPixelCorrectedFlux&lt; SUBPIX_TYPE &gt; Class Template Reference<div class="ingroups"><a class="el" href="group__SubPixPhot.xhtml">SubPixPhot</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>A class to do fixed aperture photometry, corrected for variable sensitivity of different parts of a pixel.  
 <a href="classCore_1_1SubPixelCorrectedFlux.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="SubPixelCorrectedFlux_8h_source.xhtml">SubPixelCorrectedFlux.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for Core::SubPixelCorrectedFlux&lt; SUBPIX_TYPE &gt;:</div>
<div class="dyncontent">
<div class="center"><img src="classCore_1_1SubPixelCorrectedFlux__coll__graph.png" border="0" usemap="#aCore_1_1SubPixelCorrectedFlux_3_01SUBPIX__TYPE_01_4_coll__map" alt="Collaboration graph"/></div>
<map name="aCore_1_1SubPixelCorrectedFlux_3_01SUBPIX__TYPE_01_4_coll__map" id="aCore_1_1SubPixelCorrectedFlux_3_01SUBPIX__TYPE_01_4_coll__map">
<area shape="rect" title="A class to do fixed aperture photometry, corrected for variable sensitivity of different parts of a p..." alt="" coords="5,896,236,1363"/>
<area shape="rect" href="classCore_1_1Image.xhtml" title=" " alt="" coords="29,451,213,831"/>
<area shape="rect" href="classCore_1_1Image.xhtml" title="Declare the minimum functionality expected from input images." alt="" coords="7,5,235,385"/>
</map>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a8364693b2af0cebcbb4764cf7fe67542"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml#a8364693b2af0cebcbb4764cf7fe67542">SubPixelCorrectedFlux</a> (double error_offset, const std::list&lt; double &gt; &amp;apertures=std::list&lt; double &gt;(), double gain=1.5, bool assume_no_photon_noise=false)</td></tr>
<tr class="memdesc:a8364693b2af0cebcbb4764cf7fe67542"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a flux measuring object that will use the given apertures.  <a href="classCore_1_1SubPixelCorrectedFlux.xhtml#a8364693b2af0cebcbb4764cf7fe67542">More...</a><br /></td></tr>
<tr class="separator:a8364693b2af0cebcbb4764cf7fe67542"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ad29b63c79188261692c1b0e442cdb3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml#a2ad29b63c79188261692c1b0e442cdb3">SubPixelCorrectedFlux</a> (const SUBPIX_TYPE &amp;subpixel_map, double error_offset, const std::list&lt; double &gt; &amp;apertures=std::list&lt; double &gt;(), double gain=1.5, bool assume_no_photon_noise=false)</td></tr>
<tr class="memdesc:a2ad29b63c79188261692c1b0e442cdb3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a flux measuring object that will use the given apertures and subpixel sensitivity map.  <a href="classCore_1_1SubPixelCorrectedFlux.xhtml#a2ad29b63c79188261692c1b0e442cdb3">More...</a><br /></td></tr>
<tr class="separator:a2ad29b63c79188261692c1b0e442cdb3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03993a9d0b6022ab9c0d8b1104ef0949"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml#a03993a9d0b6022ab9c0d8b1104ef0949">SubPixelCorrectedFlux</a> (const <a class="el" href="classCore_1_1Image.xhtml">Core::Image</a>&lt; double &gt; &amp;<a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml#a4e53256dc9cca1557cb104736adeaf64">image</a>, const SUBPIX_TYPE &amp;subpixel_map, double error_offset, const std::list&lt; double &gt; &amp;apertures=std::list&lt; double &gt;(), double gain=1.5, bool assume_no_photon_noise=false)</td></tr>
<tr class="memdesc:a03993a9d0b6022ab9c0d8b1104ef0949"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a flux measuring object that will use the given apertures, subpixel sensitivity map and image.  <a href="classCore_1_1SubPixelCorrectedFlux.xhtml#a03993a9d0b6022ab9c0d8b1104ef0949">More...</a><br /></td></tr>
<tr class="separator:a03993a9d0b6022ab9c0d8b1104ef0949"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae53790e832e8a5000d8faffa4897f1b8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml#ae53790e832e8a5000d8faffa4897f1b8">add_aperture</a> (double aperture)</td></tr>
<tr class="memdesc:ae53790e832e8a5000d8faffa4897f1b8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds another aperture to the current list of apertures used to measure flux over.  <a href="classCore_1_1SubPixelCorrectedFlux.xhtml#ae53790e832e8a5000d8faffa4897f1b8">More...</a><br /></td></tr>
<tr class="separator:ae53790e832e8a5000d8faffa4897f1b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acebcf94088d90a46fd9125222f3cf2b4"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml#acebcf94088d90a46fd9125222f3cf2b4">number_apertures</a> ()</td></tr>
<tr class="memdesc:acebcf94088d90a46fd9125222f3cf2b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">The number of apertures for which flux measurements will be performed.  <a href="classCore_1_1SubPixelCorrectedFlux.xhtml#acebcf94088d90a46fd9125222f3cf2b4">More...</a><br /></td></tr>
<tr class="separator:acebcf94088d90a46fd9125222f3cf2b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a351035399b23644694b125df36949de6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml#a351035399b23644694b125df36949de6">set_subpixel_map</a> (const SUBPIX_TYPE &amp;subpix_map)</td></tr>
<tr class="memdesc:a351035399b23644694b125df36949de6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the subpixel sensitivity map to use.  <a href="classCore_1_1SubPixelCorrectedFlux.xhtml#a351035399b23644694b125df36949de6">More...</a><br /></td></tr>
<tr class="separator:a351035399b23644694b125df36949de6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e9d5faa0caeae5abe434e96c511f8dc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml#a6e9d5faa0caeae5abe434e96c511f8dc">set_image</a> (const <a class="el" href="classCore_1_1Image.xhtml">Core::Image</a>&lt; double &gt; &amp;<a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml#a4e53256dc9cca1557cb104736adeaf64">image</a>)</td></tr>
<tr class="memdesc:a6e9d5faa0caeae5abe434e96c511f8dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specifies the image over which photometry will be performed.  <a href="classCore_1_1SubPixelCorrectedFlux.xhtml#a6e9d5faa0caeae5abe434e96c511f8dc">More...</a><br /></td></tr>
<tr class="separator:a6e9d5faa0caeae5abe434e96c511f8dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a946d0c821fff67bd6f4badfcd2c73d0b"><td class="memItemLeft" align="right" valign="top">std::valarray&lt; <a class="el" href="classCore_1_1Flux.xhtml">Core::Flux</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml#a946d0c821fff67bd6f4badfcd2c73d0b">operator()</a> (double x, double y, const <a class="el" href="classPSF_1_1PSF.xhtml">PSF::PSF</a> &amp;psf, double background=Core::NaN, double background_error=Core::NaN, bool prepare_subpix_scaling=false)</td></tr>
<tr class="memdesc:a946d0c821fff67bd6f4badfcd2c73d0b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Actually measure the flux in the current set of apertures centered on the given coordinates.  <a href="classCore_1_1SubPixelCorrectedFlux.xhtml#a946d0c821fff67bd6f4badfcd2c73d0b">More...</a><br /></td></tr>
<tr class="separator:a946d0c821fff67bd6f4badfcd2c73d0b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6a353dddefcb944ea9d55be1a6d2639"><td class="memItemLeft" align="right" valign="top">const Eigen::MatrixXd &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml#ac6a353dddefcb944ea9d55be1a6d2639">get_subpix_scaling</a> (size_t aperture_ind)</td></tr>
<tr class="memdesc:ac6a353dddefcb944ea9d55be1a6d2639"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the last calculated subpixel independent scaling for the aperture with the given index.  <a href="classCore_1_1SubPixelCorrectedFlux.xhtml#ac6a353dddefcb944ea9d55be1a6d2639">More...</a><br /></td></tr>
<tr class="separator:ac6a353dddefcb944ea9d55be1a6d2639"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94dc70a8513a11a58c7afae926a7430b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml#a94dc70a8513a11a58c7afae926a7430b">set_gain</a> (double gain)</td></tr>
<tr class="memdesc:a94dc70a8513a11a58c7afae926a7430b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the gain to assume when deriving the flux.  <a href="classCore_1_1SubPixelCorrectedFlux.xhtml#a94dc70a8513a11a58c7afae926a7430b">More...</a><br /></td></tr>
<tr class="separator:a94dc70a8513a11a58c7afae926a7430b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e53256dc9cca1557cb104736adeaf64"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classCore_1_1Image.xhtml">Core::Image</a>&lt; double &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml#a4e53256dc9cca1557cb104736adeaf64">image</a> ()</td></tr>
<tr class="memdesc:a4e53256dc9cca1557cb104736adeaf64"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the image on which the object is operating.  <a href="classCore_1_1SubPixelCorrectedFlux.xhtml#a4e53256dc9cca1557cb104736adeaf64">More...</a><br /></td></tr>
<tr class="separator:a4e53256dc9cca1557cb104736adeaf64"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-methods"></a>
Private Member Functions</h2></td></tr>
<tr class="memitem:a9b231f38fd3373d34733e3bbb7010914"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classCore_1_1FluxPair.xhtml">FluxPair</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml#a9b231f38fd3373d34733e3bbb7010914">pixel_fluxes</a> (double x, double y, const <a class="el" href="classPSF_1_1PSF.xhtml">PSF::PSF</a> &amp;psf, double r=Core::NaN, int fill_scaling=-1)</td></tr>
<tr class="memdesc:a9b231f38fd3373d34733e3bbb7010914"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the sum of the integrals of the PSF over each subpixel weighted and not weighted by the subpixel sensitivity.  <a href="classCore_1_1SubPixelCorrectedFlux.xhtml#a9b231f38fd3373d34733e3bbb7010914">More...</a><br /></td></tr>
<tr class="separator:a9b231f38fd3373d34733e3bbb7010914"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af249c604d01591fecc337d03c1e93745"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml#af249c604d01591fecc337d03c1e93745">classify_pixel</a> (double x, double y, double aperture) const</td></tr>
<tr class="memdesc:af249c604d01591fecc337d03c1e93745"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return &lt;0 if the pixel is entirely contained within the given aperture, &gt;0 if it is entirely outside of it and 0 if it is partially inside and partially outside.  <a href="classCore_1_1SubPixelCorrectedFlux.xhtml#af249c604d01591fecc337d03c1e93745">More...</a><br /></td></tr>
<tr class="separator:af249c604d01591fecc337d03c1e93745"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9433ff4a271bccbc8ca265bab5b155f2"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml#a9433ff4a271bccbc8ca265bab5b155f2">variance</a> (const <a class="el" href="classCore_1_1FluxPair.xhtml">FluxPair</a> &amp;fluxes, double measured_counts) const</td></tr>
<tr class="memdesc:a9433ff4a271bccbc8ca265bab5b155f2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Estimate the variance based on the fluxes and measured counts.  <a href="classCore_1_1SubPixelCorrectedFlux.xhtml#a9433ff4a271bccbc8ca265bab5b155f2">More...</a><br /></td></tr>
<tr class="separator:a9433ff4a271bccbc8ca265bab5b155f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80377e774555290a5a33934a43d5fa60"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml#a80377e774555290a5a33934a43d5fa60">in_image</a> (long x_i, long y_i) const</td></tr>
<tr class="memdesc:a80377e774555290a5a33934a43d5fa60"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return true iff the pixel with the given index is inside the image.  <a href="classCore_1_1SubPixelCorrectedFlux.xhtml#a80377e774555290a5a33934a43d5fa60">More...</a><br /></td></tr>
<tr class="separator:a80377e774555290a5a33934a43d5fa60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ed51618503e01b054d8fcec013c837e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml#a6ed51618503e01b054d8fcec013c837e">init_subpix_scaling</a> ()</td></tr>
<tr class="memdesc:a6ed51618503e01b054d8fcec013c837e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Make sure all members necessary to derive sub-pixel scaling matrices are properly initialized.  <a href="classCore_1_1SubPixelCorrectedFlux.xhtml#a6ed51618503e01b054d8fcec013c837e">More...</a><br /></td></tr>
<tr class="separator:a6ed51618503e01b054d8fcec013c837e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr class="memitem:a3d9e99c1a21d197133ad2e4e5d2517a2"><td class="memItemLeft" align="right" valign="top">std::list&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml#a3d9e99c1a21d197133ad2e4e5d2517a2">__apertures</a></td></tr>
<tr class="memdesc:a3d9e99c1a21d197133ad2e4e5d2517a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">The apertures over which to sum up the flux for each source.  <a href="classCore_1_1SubPixelCorrectedFlux.xhtml#a3d9e99c1a21d197133ad2e4e5d2517a2">More...</a><br /></td></tr>
<tr class="separator:a3d9e99c1a21d197133ad2e4e5d2517a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5eb1402ba6dbb6d82c50729ef398a9de"><td class="memItemLeft" align="right" valign="top">const SUBPIX_TYPE *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml#a5eb1402ba6dbb6d82c50729ef398a9de">__subpixel_map</a></td></tr>
<tr class="memdesc:a5eb1402ba6dbb6d82c50729ef398a9de"><td class="mdescLeft">&#160;</td><td class="mdescRight">The subpixel sensitivity map, normalized to average to 1.0.  <a href="classCore_1_1SubPixelCorrectedFlux.xhtml#a5eb1402ba6dbb6d82c50729ef398a9de">More...</a><br /></td></tr>
<tr class="separator:a5eb1402ba6dbb6d82c50729ef398a9de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68a5e1bf6e82e39560c78b66632eb67d"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classCore_1_1Image.xhtml">Core::Image</a>&lt; double &gt; *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml#a68a5e1bf6e82e39560c78b66632eb67d">__image</a></td></tr>
<tr class="memdesc:a68a5e1bf6e82e39560c78b66632eb67d"><td class="mdescLeft">&#160;</td><td class="mdescRight">The actual pixel values of the fits image.  <a href="classCore_1_1SubPixelCorrectedFlux.xhtml#a68a5e1bf6e82e39560c78b66632eb67d">More...</a><br /></td></tr>
<tr class="separator:a68a5e1bf6e82e39560c78b66632eb67d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3677959c572d737ef9296977ceadc298"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml#a3677959c572d737ef9296977ceadc298">__var_offset</a></td></tr>
<tr class="memdesc:a3677959c572d737ef9296977ceadc298"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constant variance to add to flux dependent variance.  <a href="classCore_1_1SubPixelCorrectedFlux.xhtml#a3677959c572d737ef9296977ceadc298">More...</a><br /></td></tr>
<tr class="separator:a3677959c572d737ef9296977ceadc298"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85fea3e014f9cba4aa3d77a28d65c8d8"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml#a85fea3e014f9cba4aa3d77a28d65c8d8">__gain</a></td></tr>
<tr class="memdesc:a85fea3e014f9cba4aa3d77a28d65c8d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">See gain argument to constructor.  <a href="classCore_1_1SubPixelCorrectedFlux.xhtml#a85fea3e014f9cba4aa3d77a28d65c8d8">More...</a><br /></td></tr>
<tr class="separator:a85fea3e014f9cba4aa3d77a28d65c8d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3970e8e495b25fae56688b0a6af28604"><td class="memItemLeft" align="right" valign="top">std::valarray&lt; Eigen::MatrixXd &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml#a3970e8e495b25fae56688b0a6af28604">__subpix_scaling</a></td></tr>
<tr class="memdesc:a3970e8e495b25fae56688b0a6af28604"><td class="mdescLeft">&#160;</td><td class="mdescRight">A set of sub-pixel structure independent matrices (one for each aperture), which can be used to apply a different sub-pixel sensitivity map to a previously extracted source flux.  <a href="classCore_1_1SubPixelCorrectedFlux.xhtml#a3970e8e495b25fae56688b0a6af28604">More...</a><br /></td></tr>
<tr class="separator:a3970e8e495b25fae56688b0a6af28604"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3b6c77507de42b045b4b5d8f4eaa800"><td class="memItemLeft" align="right" valign="top">std::valarray&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml#aa3b6c77507de42b045b4b5d8f4eaa800">__scaling_ind</a></td></tr>
<tr class="memdesc:aa3b6c77507de42b045b4b5d8f4eaa800"><td class="mdescLeft">&#160;</td><td class="mdescRight">The index within __subpix_scaling which needs to be filled next.  <a href="classCore_1_1SubPixelCorrectedFlux.xhtml#aa3b6c77507de42b045b4b5d8f4eaa800">More...</a><br /></td></tr>
<tr class="separator:aa3b6c77507de42b045b4b5d8f4eaa800"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d4097784c6499a564aaf9241bcb5940"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml#a5d4097784c6499a564aaf9241bcb5940">__photon_noise</a></td></tr>
<tr class="memdesc:a5d4097784c6499a564aaf9241bcb5940"><td class="mdescLeft">&#160;</td><td class="mdescRight">Whether to assume the presence of Poisson noise in pixel fluxes (disabled if pixel error estimates are available).  <a href="classCore_1_1SubPixelCorrectedFlux.xhtml#a5d4097784c6499a564aaf9241bcb5940">More...</a><br /></td></tr>
<tr class="separator:a5d4097784c6499a564aaf9241bcb5940"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;class SUBPIX_TYPE&gt;<br />
class Core::SubPixelCorrectedFlux&lt; SUBPIX_TYPE &gt;</h3>

<p>A class to do fixed aperture photometry, corrected for variable sensitivity of different parts of a pixel. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a8364693b2af0cebcbb4764cf7fe67542"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8364693b2af0cebcbb4764cf7fe67542">&#9670;&nbsp;</a></span>SubPixelCorrectedFlux() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class SUBPIX_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml">Core::SubPixelCorrectedFlux</a>&lt; SUBPIX_TYPE &gt;::<a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml">SubPixelCorrectedFlux</a> </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>error_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::list&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>apertures</em> = <code>std::list&lt;double&gt;()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>gain</em> = <code>1.5</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>assume_no_photon_noise</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create a flux measuring object that will use the given apertures. </p>
<p>The subpixel sensitivity map and the image must be specified separately before use. </p>

</div>
</div>
<a id="a2ad29b63c79188261692c1b0e442cdb3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2ad29b63c79188261692c1b0e442cdb3">&#9670;&nbsp;</a></span>SubPixelCorrectedFlux() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class SUBPIX_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml">Core::SubPixelCorrectedFlux</a>&lt; SUBPIX_TYPE &gt;::<a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml">SubPixelCorrectedFlux</a> </td>
          <td>(</td>
          <td class="paramtype">const SUBPIX_TYPE &amp;&#160;</td>
          <td class="paramname"><em>subpixel_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>error_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::list&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>apertures</em> = <code>std::list&lt;double&gt;()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>gain</em> = <code>1.5</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>assume_no_photon_noise</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create a flux measuring object that will use the given apertures and subpixel sensitivity map. </p>
<p>The image must be specified separately before use. </p>

</div>
</div>
<a id="a03993a9d0b6022ab9c0d8b1104ef0949"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a03993a9d0b6022ab9c0d8b1104ef0949">&#9670;&nbsp;</a></span>SubPixelCorrectedFlux() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class SUBPIX_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml">Core::SubPixelCorrectedFlux</a>&lt; SUBPIX_TYPE &gt;::<a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml">SubPixelCorrectedFlux</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classCore_1_1Image.xhtml">Core::Image</a>&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>image</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const SUBPIX_TYPE &amp;&#160;</td>
          <td class="paramname"><em>subpixel_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>error_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::list&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>apertures</em> = <code>std::list&lt;double&gt;()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>gain</em> = <code>1.5</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>assume_no_photon_noise</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create a flux measuring object that will use the given apertures, subpixel sensitivity map and image. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ae53790e832e8a5000d8faffa4897f1b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae53790e832e8a5000d8faffa4897f1b8">&#9670;&nbsp;</a></span>add_aperture()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class SUBPIX_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml">Core::SubPixelCorrectedFlux</a>&lt; SUBPIX_TYPE &gt;::add_aperture </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>aperture</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds another aperture to the current list of apertures used to measure flux over. </p>

</div>
</div>
<a id="af249c604d01591fecc337d03c1e93745"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af249c604d01591fecc337d03c1e93745">&#9670;&nbsp;</a></span>classify_pixel()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class SUBPIX_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml">Core::SubPixelCorrectedFlux</a>&lt; SUBPIX_TYPE &gt;::classify_pixel </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>aperture</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return &lt;0 if the pixel is entirely contained within the given aperture, &gt;0 if it is entirely outside of it and 0 if it is partially inside and partially outside. </p>

</div>
</div>
<a id="ac6a353dddefcb944ea9d55be1a6d2639"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6a353dddefcb944ea9d55be1a6d2639">&#9670;&nbsp;</a></span>get_subpix_scaling()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class SUBPIX_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const Eigen::MatrixXd&amp; <a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml">Core::SubPixelCorrectedFlux</a>&lt; SUBPIX_TYPE &gt;::get_subpix_scaling </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>aperture_ind</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the last calculated subpixel independent scaling for the aperture with the given index. </p>

</div>
</div>
<a id="a4e53256dc9cca1557cb104736adeaf64"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e53256dc9cca1557cb104736adeaf64">&#9670;&nbsp;</a></span>image()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class SUBPIX_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classCore_1_1Image.xhtml">Core::Image</a>&lt;double&gt;&amp; <a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml">Core::SubPixelCorrectedFlux</a>&lt; SUBPIX_TYPE &gt;::image </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the image on which the object is operating. </p>

</div>
</div>
<a id="a80377e774555290a5a33934a43d5fa60"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a80377e774555290a5a33934a43d5fa60">&#9670;&nbsp;</a></span>in_image()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class SUBPIX_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml">Core::SubPixelCorrectedFlux</a>&lt; SUBPIX_TYPE &gt;::in_image </td>
          <td>(</td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>x_i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>y_i</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return true iff the pixel with the given index is inside the image. </p>

</div>
</div>
<a id="a6ed51618503e01b054d8fcec013c837e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6ed51618503e01b054d8fcec013c837e">&#9670;&nbsp;</a></span>init_subpix_scaling()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class SUBPIX_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml">Core::SubPixelCorrectedFlux</a>&lt; SUBPIX_TYPE &gt;::init_subpix_scaling</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Make sure all members necessary to derive sub-pixel scaling matrices are properly initialized. </p>

</div>
</div>
<a id="acebcf94088d90a46fd9125222f3cf2b4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acebcf94088d90a46fd9125222f3cf2b4">&#9670;&nbsp;</a></span>number_apertures()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class SUBPIX_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t <a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml">Core::SubPixelCorrectedFlux</a>&lt; SUBPIX_TYPE &gt;::number_apertures </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The number of apertures for which flux measurements will be performed. </p>

</div>
</div>
<a id="a946d0c821fff67bd6f4badfcd2c73d0b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a946d0c821fff67bd6f4badfcd2c73d0b">&#9670;&nbsp;</a></span>operator()()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class SUBPIX_TYPE &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::valarray&lt; <a class="el" href="classCore_1_1Flux.xhtml">Core::Flux</a> &gt; <a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml">Core::SubPixelCorrectedFlux</a>&lt; SUBPIX_TYPE &gt;::operator() </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classPSF_1_1PSF.xhtml">PSF::PSF</a> &amp;&#160;</td>
          <td class="paramname"><em>psf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>background</em> = <code>Core::NaN</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>background_error</em> = <code>Core::NaN</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>prepare_subpix_scaling</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Actually measure the flux in the current set of apertures centered on the given coordinates. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>The horizontal offset of the aperture center relative to the left edge of the image. </td></tr>
    <tr><td class="paramname">y</td><td>The vertical offset of the aperture center relative to the bottom edge of the image. </td></tr>
    <tr><td class="paramname">psf</td><td>The PSF to assume. </td></tr>
    <tr><td class="paramname">background</td><td>If NaN, the PSF should include a background and the returned </td></tr>
    <tr><td class="paramname">background_error</td><td>An estimate for the error in the background. </td></tr>
    <tr><td class="paramname">prepare_subpix_scaling</td><td>If true, a set of sub-pixel structure independent matrices (one per aperture) is prepared, which can be used with a vector of sub-pixel sensitivities to derive the proper corrected flux for the same source on the same image with a different subpixel structure. These matrices can be accessed through the get_subpix_scaling method. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a9b231f38fd3373d34733e3bbb7010914"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9b231f38fd3373d34733e3bbb7010914">&#9670;&nbsp;</a></span>pixel_fluxes()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class SUBPIX_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classCore_1_1FluxPair.xhtml">FluxPair</a> <a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml">Core::SubPixelCorrectedFlux</a>&lt; SUBPIX_TYPE &gt;::pixel_fluxes </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classPSF_1_1PSF.xhtml">PSF::PSF</a> &amp;&#160;</td>
          <td class="paramname"><em>psf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>r</em> = <code>Core::NaN</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fill_scaling</em> = <code>-1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the sum of the integrals of the PSF over each subpixel weighted and not weighted by the subpixel sensitivity. </p>
<p>If __subpixel_map is NULL, the weighted flux it returns is 0. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>The left edge of the pixel relative to the PSF center. </td></tr>
    <tr><td class="paramname">y</td><td>The bottom edge of the pixel relative to the PSF center. </td></tr>
    <tr><td class="paramname">psf</td><td>The PSF to assume. </td></tr>
    <tr><td class="paramname">r</td><td>The radius of the aperture. </td></tr>
    <tr><td class="paramname">fill_scaling</td><td>If fill_scaling is non-negative and the entry in __scaling_ind corresponding to the aperture with the given index, the row in the corresponding __subpix_scaling matrix indexed by that entry is filled with the integral of the PSF over individual sub-pixels. The proper entries can then be calculated by dividing by (observed counts)*(raw_flux). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a94dc70a8513a11a58c7afae926a7430b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a94dc70a8513a11a58c7afae926a7430b">&#9670;&nbsp;</a></span>set_gain()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class SUBPIX_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml">Core::SubPixelCorrectedFlux</a>&lt; SUBPIX_TYPE &gt;::set_gain </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>gain</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the gain to assume when deriving the flux. </p>

</div>
</div>
<a id="a6e9d5faa0caeae5abe434e96c511f8dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e9d5faa0caeae5abe434e96c511f8dc">&#9670;&nbsp;</a></span>set_image()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class SUBPIX_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml">Core::SubPixelCorrectedFlux</a>&lt; SUBPIX_TYPE &gt;::set_image </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classCore_1_1Image.xhtml">Core::Image</a>&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>image</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Specifies the image over which photometry will be performed. </p>

</div>
</div>
<a id="a351035399b23644694b125df36949de6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a351035399b23644694b125df36949de6">&#9670;&nbsp;</a></span>set_subpixel_map()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class SUBPIX_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml">Core::SubPixelCorrectedFlux</a>&lt; SUBPIX_TYPE &gt;::set_subpixel_map </td>
          <td>(</td>
          <td class="paramtype">const SUBPIX_TYPE &amp;&#160;</td>
          <td class="paramname"><em>subpix_map</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the subpixel sensitivity map to use. </p>

</div>
</div>
<a id="a9433ff4a271bccbc8ca265bab5b155f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9433ff4a271bccbc8ca265bab5b155f2">&#9670;&nbsp;</a></span>variance()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class SUBPIX_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml">Core::SubPixelCorrectedFlux</a>&lt; SUBPIX_TYPE &gt;::variance </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classCore_1_1FluxPair.xhtml">FluxPair</a> &amp;&#160;</td>
          <td class="paramname"><em>fluxes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>measured_counts</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Estimate the variance based on the fluxes and measured counts. </p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="a3d9e99c1a21d197133ad2e4e5d2517a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d9e99c1a21d197133ad2e4e5d2517a2">&#9670;&nbsp;</a></span>__apertures</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class SUBPIX_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::list&lt;double&gt; <a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml">Core::SubPixelCorrectedFlux</a>&lt; SUBPIX_TYPE &gt;::__apertures</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The apertures over which to sum up the flux for each source. </p>

</div>
</div>
<a id="a85fea3e014f9cba4aa3d77a28d65c8d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a85fea3e014f9cba4aa3d77a28d65c8d8">&#9670;&nbsp;</a></span>__gain</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class SUBPIX_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml">Core::SubPixelCorrectedFlux</a>&lt; SUBPIX_TYPE &gt;::__gain</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>See gain argument to constructor. </p>

</div>
</div>
<a id="a68a5e1bf6e82e39560c78b66632eb67d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a68a5e1bf6e82e39560c78b66632eb67d">&#9670;&nbsp;</a></span>__image</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class SUBPIX_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classCore_1_1Image.xhtml">Core::Image</a>&lt;double&gt;* <a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml">Core::SubPixelCorrectedFlux</a>&lt; SUBPIX_TYPE &gt;::__image</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The actual pixel values of the fits image. </p>

</div>
</div>
<a id="a5d4097784c6499a564aaf9241bcb5940"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d4097784c6499a564aaf9241bcb5940">&#9670;&nbsp;</a></span>__photon_noise</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class SUBPIX_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml">Core::SubPixelCorrectedFlux</a>&lt; SUBPIX_TYPE &gt;::__photon_noise</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Whether to assume the presence of Poisson noise in pixel fluxes (disabled if pixel error estimates are available). </p>

</div>
</div>
<a id="aa3b6c77507de42b045b4b5d8f4eaa800"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa3b6c77507de42b045b4b5d8f4eaa800">&#9670;&nbsp;</a></span>__scaling_ind</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class SUBPIX_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::valarray&lt;int&gt; <a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml">Core::SubPixelCorrectedFlux</a>&lt; SUBPIX_TYPE &gt;::__scaling_ind</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The index within __subpix_scaling which needs to be filled next. </p>

</div>
</div>
<a id="a3970e8e495b25fae56688b0a6af28604"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3970e8e495b25fae56688b0a6af28604">&#9670;&nbsp;</a></span>__subpix_scaling</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class SUBPIX_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::valarray&lt;Eigen::MatrixXd&gt; <a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml">Core::SubPixelCorrectedFlux</a>&lt; SUBPIX_TYPE &gt;::__subpix_scaling</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>A set of sub-pixel structure independent matrices (one for each aperture), which can be used to apply a different sub-pixel sensitivity map to a previously extracted source flux. </p>

</div>
</div>
<a id="a5eb1402ba6dbb6d82c50729ef398a9de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5eb1402ba6dbb6d82c50729ef398a9de">&#9670;&nbsp;</a></span>__subpixel_map</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class SUBPIX_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const SUBPIX_TYPE* <a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml">Core::SubPixelCorrectedFlux</a>&lt; SUBPIX_TYPE &gt;::__subpixel_map</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The subpixel sensitivity map, normalized to average to 1.0. </p>

</div>
</div>
<a id="a3677959c572d737ef9296977ceadc298"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3677959c572d737ef9296977ceadc298">&#9670;&nbsp;</a></span>__var_offset</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class SUBPIX_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml">Core::SubPixelCorrectedFlux</a>&lt; SUBPIX_TYPE &gt;::__var_offset</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constant variance to add to flux dependent variance. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/home/kpenev/projects/git/AstroWISP/doc_src/Core/<a class="el" href="SubPixelCorrectedFlux_8h_source.xhtml">SubPixelCorrectedFlux.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><b>Core</b></li><li class="navelem"><a class="el" href="classCore_1_1SubPixelCorrectedFlux.xhtml">SubPixelCorrectedFlux</a></li>
    <li class="footer">Generated on Wed Jan 15 2025 09:48:00 for Sub-Pixel Photometry by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1 </li>
  </ul>
</div>
</body>
</html>
