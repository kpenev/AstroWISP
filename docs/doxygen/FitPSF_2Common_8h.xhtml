<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>My Project: /home/kpenev/projects/git/AstroWISP/doc_src/FitPSF/Common.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "ams.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.jsdelivr.net/npm/mathjax@2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">My Project
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('FitPSF_2Common_8h.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">Common.h File Reference<div class="ingroups"><a class="el" href="group__FitPSF.xhtml">FitPSF</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Defines some of the functions needed exclusively by the FitPSF tool.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &quot;<a class="el" href="FitPSF_2Config_8h_source.xhtml">Config.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="IOSources_8h_source.xhtml">IOSources.h</a>&quot;</code><br />
<code>#include &quot;../Core/SharedLibraryExportMacros.h&quot;</code><br />
<code>#include &quot;<a class="el" href="Background_2Source_8h_source.xhtml">../Background/Source.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="MeasureAnnulus_8h_source.xhtml">../Background/MeasureAnnulus.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="Zero_8h_source.xhtml">../Background/Zero.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="SourceLocation_8h_source.xhtml">../Core/SourceLocation.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="Core_2Image_8h_source.xhtml">../Core/Image.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="SubPixelMap_8h_source.xhtml">../Core/SubPixelMap.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="PSF_2PiecewiseBicubic_8h_source.xhtml">../PSF/PiecewiseBicubic.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="H5IODataTree_8h_source.xhtml">../IO/H5IODataTree.h</a>&quot;</code><br />
<code>#include &quot;Eigen/Dense&quot;</code><br />
<code>#include &lt;set&gt;</code><br />
<code>#include &lt;iostream&gt;</code><br />
</div><div class="textblock"><div class="dynheader">
Include dependency graph for Common.h:</div>
<div class="dyncontent">
<div class="center"><img src="FitPSF_2Common_8h__incl.png" border="0" usemap="#a_2home_2kpenev_2projects_2git_2AstroWISP_2doc__src_2FitPSF_2Common_8h" alt=""/></div>
<map name="a_2home_2kpenev_2projects_2git_2AstroWISP_2doc__src_2FitPSF_2Common_8h" id="a_2home_2kpenev_2projects_2git_2AstroWISP_2doc__src_2FitPSF_2Common_8h">
<area shape="rect" title="Defines some of the functions needed exclusively by the FitPSF tool." alt="" coords="3103,5,3289,69"/>
<area shape="rect" href="FitPSF_2Config_8h.xhtml" title="Declares the command line parser for the FitPSF tool." alt="" coords="1713,117,1796,147"/>
<area shape="rect" href="SharedLibraryExportMacros_8h_source.xhtml" title=" " alt="" coords="2535,693,2755,740"/>
<area shape="rect" title=" " alt="" coords="2068,616,2183,645"/>
<area shape="rect" title=" " alt="" coords="4141,616,4224,645"/>
<area shape="rect" href="IOSources_8h.xhtml" title="Declares Input/Output interface for the FitPSF tool." alt="" coords="2078,281,2189,310"/>
<area shape="rect" href="SourceLocation_8h.xhtml" title="Declares a class defining the minimum requirements for specifying the locations of sources." alt="" coords="2927,375,3126,405"/>
<area shape="rect" href="Background_2Source_8h.xhtml" title="Declares the base class for background extract(ion/ed) from an astronomical image." alt="" coords="3990,375,4178,405"/>
<area shape="rect" href="Core_2Image_8h.xhtml" title="Declares a base class for images to be processed." alt="" coords="3080,461,3211,491"/>
<area shape="rect" href="MeasureAnnulus_8h.xhtml" title="Declare a class for extracting source background from an annulus around each source excluding areas a..." alt="" coords="3671,117,3929,147"/>
<area shape="rect" href="Zero_8h.xhtml" title="Declare a background class for images from which the background has already been subtracted." alt="" coords="4363,195,4533,224"/>
<area shape="rect" href="SubPixelMap_8h.xhtml" title="Declares the base class for all sub&#45;pixel maps." alt="" coords="4091,461,4274,491"/>
<area shape="rect" href="PSF_2PiecewiseBicubic_8h.xhtml" title="Defines a continuously differentiable PSF where each cell is a bicubic function." alt="" coords="3552,375,3763,405"/>
<area shape="rect" href="H5IODataTree_8h.xhtml" title="A structure to hold any output data produced by subpixtools." alt="" coords="1288,195,1459,224"/>
<area shape="rect" title=" " alt="" coords="4648,117,4691,147"/>
<area shape="rect" href="Grid_8h.xhtml" title="Some useful typedef statements." alt="" coords="135,375,249,405"/>
<area shape="rect" href="Core_2Typedefs_8h.xhtml" title="Some useful typedef statements." alt="" coords="2075,539,2175,568"/>
<area shape="rect" href="Error_8h.xhtml" title="The hierarchy of exceptions for this project." alt="" coords="2414,539,2485,568"/>
<area shape="rect" href="PSF_2Typedefs_8h.xhtml" title="Some useful typedef statements." alt="" coords="1462,375,1610,405"/>
<area shape="rect" href="Annulus_8h.xhtml" title="Declare a class defining an annulus around each source to measure the background in." alt="" coords="449,461,645,491"/>
<area shape="rect" href="CommandLineConfig_8h.xhtml" title="Declare a class for managing the configuration with which tools are run." alt="" coords="1645,281,1864,310"/>
<area shape="rect" href="PSF_2CommandLineUtil_8h.xhtml" title="Declarations of utilities for command line parsing of PSF information." alt="" coords="243,195,455,224"/>
<area shape="rect" href="Background_2CommandLineUtil_8h.xhtml" title="Declarations of utilities for command line parsing backgrund information." alt="" coords="1061,367,1291,413"/>
<area shape="rect" href="Core_2CommandLineUtil_8h.xhtml" title="Declarations of utilities for command line parsing common to all tools." alt="" coords="2283,375,2498,405"/>
<area shape="rect" href="ParseCSV_8h.xhtml" title="Declarations of functions for parsing strings of comma separated values to lists." alt="" coords="1214,461,1375,491"/>
<area shape="rect" title=" " alt="" coords="886,702,951,731"/>
<area shape="rect" title=" " alt="" coords="527,702,588,731"/>
<area shape="rect" title=" " alt="" coords="1603,616,1645,645"/>
<area shape="rect" title=" " alt="" coords="547,616,626,645"/>
<area shape="rect" href="PhotColumns_8h.xhtml" title="Defines constants to denote the various columns that can be input or output by the various tools and ..." alt="" coords="905,616,1037,645"/>
<area shape="rect" title=" " alt="" coords="1397,702,1462,731"/>
<area shape="rect" title=" " alt="" coords="3433,616,3511,645"/>
<area shape="rect" title=" " alt="" coords="1653,461,1712,491"/>
<area shape="rect" href="NaN_8h.xhtml" title="Defines not&#45;a&#45;number and infinity." alt="" coords="3791,539,3910,568"/>
<area shape="rect" title=" " alt="" coords="3872,616,3931,645"/>
<area shape="rect" href="IO_2CommandLineUtil_8h.xhtml" title="Declarations of utilities for command line parsing of IO related options." alt="" coords="923,461,1087,491"/>
<area shape="rect" href="parse__grid_8h.xhtml" title="Define functions for converting between string and PSF::Grid." alt="" coords="121,281,263,310"/>
<area shape="rect" title=" " alt="" coords="2133,375,2208,405"/>
<area shape="rect" title=" " alt="" coords="2041,375,2109,405"/>
<area shape="rect" href="SourceID_8h.xhtml" title="The declaration of the SourceID class." alt="" coords="2598,461,2701,491"/>
<area shape="rect" href="Point_8h.xhtml" title="Defines a point class in two dimensions." alt="" coords="4451,461,4523,491"/>
<area shape="rect" title=" " alt="" coords="2712,539,2781,568"/>
<area shape="rect" title=" " alt="" coords="3009,539,3082,568"/>
<area shape="rect" title=" " alt="" coords="3259,539,3333,568"/>
<area shape="rect" href="MeasureExcludingSources_8h.xhtml" title="Declares a class for extracting the background around sources attempting to exclude nearby sources." alt="" coords="3837,195,4064,224"/>
<area shape="rect" href="Measure_8h.xhtml" title="Declares the minimum requirements for a background extractor class." alt="" coords="4359,281,4457,310"/>
<area shape="rect" href="Piecewise_8h.xhtml" title="Defines the PSF::Piecewise PSF model." alt="" coords="3285,461,3395,491"/>
<area shape="rect" href="PiecewiseBicubicCell_8h.xhtml" title="Defines a PSF cell with intensity given by a bi&#45;cubic polynomial." alt="" coords="3470,461,3661,491"/>
<area shape="rect" href="TranslateToAny_8h.xhtml" title="Defines a class that allows placing inhomogeneous types data in property trees." alt="" coords="378,616,523,645"/>
<area shape="rect" title=" " alt="" coords="1462,272,1621,319"/>
</map>
</div>
</div><div class="textblock"><div class="dynheader">
This graph shows which files directly or indirectly include this file:</div>
<div class="dyncontent">
<div class="center"><img src="FitPSF_2Common_8h__dep__incl.png" border="0" usemap="#a_2home_2kpenev_2projects_2git_2AstroWISP_2doc__src_2FitPSF_2Common_8hdep" alt=""/></div>
<map name="a_2home_2kpenev_2projects_2git_2AstroWISP_2doc__src_2FitPSF_2Common_8hdep" id="a_2home_2kpenev_2projects_2git_2AstroWISP_2doc__src_2FitPSF_2Common_8hdep">
<area shape="rect" title="Defines some of the functions needed exclusively by the FitPSF tool." alt="" coords="222,5,408,69"/>
<area shape="rect" href="FitPSF_2PiecewiseBicubic_8h.xhtml" title="The declarations of the functions related to fitting piecewise bicubic PSFs." alt="" coords="828,677,1048,741"/>
<area shape="rect" href="FitPSF_2SDKSource_8h_source.xhtml" title=" " alt="" coords="245,341,430,405"/>
<area shape="rect" href="FitPSF_2Source_8h.xhtml" title="Defines the base class for sources participating in PSF fitting." alt="" coords="530,117,716,181"/>
<area shape="rect" href="FitPSF_2CInterface_8cpp.xhtml" title="Define the C&#45;interface functions for the FitPSF library." alt="" coords="1045,789,1230,853"/>
<area shape="rect" href="SDKUtil_8h.xhtml" title="Declare functions used during elliptical Gaussian PSF fitting." alt="" coords="245,453,430,517"/>
<area shape="rect" href="PolynomialSDK_8h.xhtml" title="Declares a class for fitting elliptical gaussian PSFs as a smooth function of image position." alt="" coords="258,565,465,629"/>
<area shape="rect" href="SDKUtil_8cpp.xhtml" title="Define the functions from SDKUtil.h." alt="" coords="49,565,234,629"/>
<area shape="rect" href="FitPSF_2Image_8h.xhtml" title="Defines a class describing an image of Pixel pixels." alt="" coords="904,229,1089,293"/>
<area shape="rect" href="OverlapSource_8h.xhtml" title="Defines the overlap&#45;related features of PSF fitting sources." alt="" coords="831,341,1031,405"/>
<area shape="rect" href="Pixel_8cpp.xhtml" title="Define the backrgound excess functions and some methods of Pixel.h." alt="" coords="642,229,828,293"/>
<area shape="rect" href="SDKSourceBase_8h.xhtml" title="Declares a base class for sources participating in SDK fitting." alt="" coords="404,229,618,293"/>
<area shape="rect" href="LinearSource_8h.xhtml" title="Declares a class used for PSF fitting where pixel responses are linear functions of the shape paramet..." alt="" coords="836,453,1026,517"/>
<area shape="rect" href="LinearSource_8cpp.xhtml" title="Define some of the methods of LinearSource class." alt="" coords="489,565,696,629"/>
<area shape="rect" href="PiecewiseBicubicPSFSmoothing_8h_source.xhtml" title=" " alt="" coords="720,565,1049,629"/>
<area shape="rect" href="SDKSourceBase_8cpp.xhtml" title="Defines some of the methods of the SDKSourceBase class." alt="" coords="455,341,687,405"/>
</map>
</div>
</div>
<p><a href="FitPSF_2Common_8h_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a5432cdc9b255de958483cc386d5bba86"><td class="memItemLeft" align="right" valign="top">typedef std::list&lt; LinearSource * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="FitPSF_2Common_8h.xhtml#a5432cdc9b255de958483cc386d5bba86">FitPSF::LinearSourceList</a></td></tr>
<tr class="memdesc:a5432cdc9b255de958483cc386d5bba86"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience alias.  <a href="FitPSF_2Common_8h.xhtml#a5432cdc9b255de958483cc386d5bba86">More...</a><br /></td></tr>
<tr class="separator:a5432cdc9b255de958483cc386d5bba86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab82a21732b8a5824c90511e45a39c3b8"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classCore_1_1SubPixelMap.xhtml">Core::SubPixelMap</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="FitPSF_2Common_8h.xhtml#ab82a21732b8a5824c90511e45a39c3b8">FitPSF::GSLSubPixType</a></td></tr>
<tr class="memdesc:ab82a21732b8a5824c90511e45a39c3b8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience alias.  <a href="FitPSF_2Common_8h.xhtml#ab82a21732b8a5824c90511e45a39c3b8">More...</a><br /></td></tr>
<tr class="separator:ab82a21732b8a5824c90511e45a39c3b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:gaf322f512b63bfe334b817be88e6c7820"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__FitPSF.xhtml#gaf322f512b63bfe334b817be88e6c7820">FitPSF::SourceDropReason</a> { <br />
&#160;&#160;<a class="el" href="group__FitPSF.xhtml#ggaf322f512b63bfe334b817be88e6c7820a067d1fe9eb3de16e0568d6818dffb137">FitPSF::FEW_PIXELS</a>
, <a class="el" href="group__FitPSF.xhtml#ggaf322f512b63bfe334b817be88e6c7820a00d5564f730d22229a35181cd10761e2">FitPSF::MANY_PIXELS</a>
, <a class="el" href="group__FitPSF.xhtml#ggaf322f512b63bfe334b817be88e6c7820a26a3754bbbeb7176bdfe9d4d64c789b9">FitPSF::TOO_BIG</a>
, <a class="el" href="group__FitPSF.xhtml#ggaf322f512b63bfe334b817be88e6c7820ad7668d0f78318ce4146336e078b4e58c">FitPSF::OVERLAP</a>
, <br />
&#160;&#160;<a class="el" href="group__FitPSF.xhtml#ggaf322f512b63bfe334b817be88e6c7820a66fe89ee58e07202f19000046a2a0a7b">FitPSF::NON_POINT_SOURCE</a>
, <a class="el" href="group__FitPSF.xhtml#ggaf322f512b63bfe334b817be88e6c7820ac12aed992ffea323d364b8f183ecd071">FitPSF::BAD_BACKGROUND</a>
, <a class="el" href="group__FitPSF.xhtml#ggaf322f512b63bfe334b817be88e6c7820a7014b6c25370ae2167f1466cd5a0d21c">FitPSF::PAST_MAX_SOURCES</a>
, <a class="el" href="group__FitPSF.xhtml#ggaf322f512b63bfe334b817be88e6c7820ae68d3f01a5487e3f99815fc4b6d3a9c0">FitPSF::MANY_SATURATED</a>
, <br />
&#160;&#160;<a class="el" href="group__FitPSF.xhtml#ggaf322f512b63bfe334b817be88e6c7820a5c9becf693d8a26c091e0cd2befe8574">FitPSF::NUM_DROP_REASONS</a>
, <a class="el" href="group__FitPSF.xhtml#ggaf322f512b63bfe334b817be88e6c7820a7e5d682d2cee5bfa3b378fcb4f73e9dc">FitPSF::NOT_DROPPED</a> = NUM_DROP_REASONS
<br />
 }</td></tr>
<tr class="memdesc:gaf322f512b63bfe334b817be88e6c7820"><td class="mdescLeft">&#160;</td><td class="mdescRight">Define tags for reasons to exclude sources from the fit.  <a href="group__FitPSF.xhtml#gaf322f512b63bfe334b817be88e6c7820">More...</a><br /></td></tr>
<tr class="separator:gaf322f512b63bfe334b817be88e6c7820"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ae186fa7d2ecc5b465395fdd873a1f296"><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>FitPSF::operator&lt;&lt;</b> ( std::ostream &amp;os, const SourceDropReason &amp;reason)</td></tr>
<tr class="memdesc:ae186fa7d2ecc5b465395fdd873a1f296"><td class="mdescLeft">&#160;</td><td class="mdescRight">Human readable output of the reasons to drop sources.  <a href="Common_8cpp.xhtml#ae186fa7d2ecc5b465395fdd873a1f296">More...</a><br /></td></tr>
<tr class="separator:ae186fa7d2ecc5b465395fdd873a1f296"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f506458d5dccf37ce0f49edd2004d86"><td class="memTemplParams" colspan="2">template&lt;class SOURCE_TYPE &gt; </td></tr>
<tr class="memitem:a5f506458d5dccf37ce0f49edd2004d86"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="FitPSF_2Common_8h.xhtml#a5f506458d5dccf37ce0f49edd2004d86">FitPSF::check_fit_source</a> (SOURCE_TYPE &amp;last_source, const <a class="el" href="classBackground_1_1Source.xhtml">Background::Source</a> &amp;srcbg, double max_saturated_fraction, unsigned min_pixels_per_source, unsigned max_pixels_per_source, double max_circular_aperture, unsigned min_bg_pixels, bool ignore_overlaps)</td></tr>
<tr class="memdesc:a5f506458d5dccf37ce0f49edd2004d86"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks of whether a source should be used for PSF fitting.  <a href="FitPSF_2Common_8h.xhtml#a5f506458d5dccf37ce0f49edd2004d86">More...</a><br /></td></tr>
<tr class="separator:a5f506458d5dccf37ce0f49edd2004d86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85d42a1dc455617700fca43a63501136"><td class="memTemplParams" colspan="2">template&lt;class FIT_SOURCE_TYPE &gt; </td></tr>
<tr class="memitem:a85d42a1dc455617700fca43a63501136"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="FitPSF_2Common_8h.xhtml#a85d42a1dc455617700fca43a63501136">FitPSF::drop_unsuitable_fit_sources</a> (std::list&lt; FIT_SOURCE_TYPE * &gt; &amp;psf_fit_sources, typename std::list&lt; FIT_SOURCE_TYPE * &gt;::iterator check_start, std::list&lt; FIT_SOURCE_TYPE * &gt; &amp;dropped_sources, unsigned drop_statistics[])</td></tr>
<tr class="memdesc:a85d42a1dc455617700fca43a63501136"><td class="mdescLeft">&#160;</td><td class="mdescRight">Actually discard sources flagged as unsuitable during pixel selection.  <a href="FitPSF_2Common_8h.xhtml#a85d42a1dc455617700fca43a63501136">More...</a><br /></td></tr>
<tr class="separator:a85d42a1dc455617700fca43a63501136"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f6768fee5f3b8caca348e689a3a8097"><td class="memTemplParams" colspan="2"><a id="a5f6768fee5f3b8caca348e689a3a8097"></a>
template&lt;class FIT_SOURCE_TYPE &gt; </td></tr>
<tr class="memitem:a5f6768fee5f3b8caca348e689a3a8097"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>FitPSF::order_src_pointer</b> (const FIT_SOURCE_TYPE *a, const FIT_SOURCE_TYPE *b)</td></tr>
<tr class="separator:a5f6768fee5f3b8caca348e689a3a8097"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77c6c4738a354472292906cde7c05a59"><td class="memTemplParams" colspan="2">template&lt;class FIT_SOURCE_TYPE &gt; </td></tr>
<tr class="memitem:a77c6c4738a354472292906cde7c05a59"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="FitPSF_2Common_8h.xhtml#a77c6c4738a354472292906cde7c05a59">FitPSF::trim_fit_sources</a> (std::list&lt; FIT_SOURCE_TYPE * &gt; &amp;psf_fit_sources, unsigned max_sources, std::list&lt; FIT_SOURCE_TYPE * &gt; &amp;dropped_sources)</td></tr>
<tr class="memdesc:a77c6c4738a354472292906cde7c05a59"><td class="mdescLeft">&#160;</td><td class="mdescRight">Drop excess sources from PSF shape fitting.  <a href="FitPSF_2Common_8h.xhtml#a77c6c4738a354472292906cde7c05a59">More...</a><br /></td></tr>
<tr class="separator:a77c6c4738a354472292906cde7c05a59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a0c1fc04d429dbdabae388b3148a29a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><b>FitPSF::add_new_source</b> ( Image&lt; LinearSource &gt; &amp;image, const <a class="el" href="classCore_1_1SubPixelMap.xhtml">Core::SubPixelMap</a> *subpix_map, const <a class="el" href="classPSF_1_1PiecewiseBicubic.xhtml">PSF::PiecewiseBicubic</a> &amp;psf, double alpha, double max_circular_aperture, const std::string &amp;output_fname, bool cover_psf, const <a class="el" href="classCore_1_1SourceLocation.xhtml">Core::SourceLocation</a> &amp;location, const Eigen::VectorXd &amp;psf_terms, const <a class="el" href="classBackground_1_1Source.xhtml">Background::Source</a> &amp;srcbg, size_t source_assignment_id, LinearSourceList &amp;destination)</td></tr>
<tr class="memdesc:a4a0c1fc04d429dbdabae388b3148a29a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a newly constructed PiecewiseBidcubic source to a list.  <a href="Common_8cpp.xhtml#a4a0c1fc04d429dbdabae388b3148a29a">More...</a><br /></td></tr>
<tr class="separator:a4a0c1fc04d429dbdabae388b3148a29a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a9d73a1b58d240e9fcf24a6079279f1"><td class="memTemplParams" colspan="2">template&lt;class FIT_SOURCE_TYPE , class PSF_TYPE &gt; </td></tr>
<tr class="memitem:a3a9d73a1b58d240e9fcf24a6079279f1"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="FitPSF_2Common_8h.xhtml#a3a9d73a1b58d240e9fcf24a6079279f1">FitPSF::select_fit_sources</a> (Image&lt; FIT_SOURCE_TYPE &gt; &amp;image, const <a class="el" href="classCore_1_1SubPixelMap.xhtml">Core::SubPixelMap</a> *subpix_map, const IOSources &amp;input_source_list, const PSF_TYPE &amp;psf, double alpha, double max_saturated_fraction, unsigned min_pixels_per_source, unsigned max_pixels_per_source, <a class="el" href="classBackground_1_1Measure.xhtml">Background::Measure</a> &amp;bg, unsigned min_bg_pixels, unsigned max_sources, double max_circular_aperture, std::list&lt; FIT_SOURCE_TYPE * &gt; &amp;psf_fit_sources, std::list&lt; FIT_SOURCE_TYPE * &gt; &amp;dropped_sources, bool cover_psf=false, bool do_not_drop=false, bool ignore_overlaps=true)</td></tr>
<tr class="memdesc:a3a9d73a1b58d240e9fcf24a6079279f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select the sources to use for PSF fitting.  <a href="FitPSF_2Common_8h.xhtml#a3a9d73a1b58d240e9fcf24a6079279f1">More...</a><br /></td></tr>
<tr class="separator:a3a9d73a1b58d240e9fcf24a6079279f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a783aacdcc07a03202be9bba3731de75f"><td class="memTemplParams" colspan="2">template&lt;class FIT_SOURCE_TYPE , class PSF_TYPE &gt; </td></tr>
<tr class="memitem:a783aacdcc07a03202be9bba3731de75f"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="FitPSF_2Common_8h.xhtml#a783aacdcc07a03202be9bba3731de75f">FitPSF::get_section_fit_sources</a> (Image&lt; FIT_SOURCE_TYPE &gt; &amp;image, const Config &amp;options, const IOSources &amp;source_list, <a class="el" href="classBackground_1_1Measure.xhtml">Background::Measure</a> &amp;backgrounds, const <a class="el" href="classCore_1_1SubPixelMap.xhtml">Core::SubPixelMap</a> &amp;subpix_map, const PSF_TYPE &amp;psf, std::list&lt; FIT_SOURCE_TYPE * &gt; &amp;fit_sources, std::list&lt; FIT_SOURCE_TYPE * &gt; &amp;dropped_sources)</td></tr>
<tr class="memdesc:a783aacdcc07a03202be9bba3731de75f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find the source to use for PSF fitting for a single input image.  <a href="FitPSF_2Common_8h.xhtml#a783aacdcc07a03202be9bba3731de75f">More...</a><br /></td></tr>
<tr class="separator:a783aacdcc07a03202be9bba3731de75f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48a7978e311520cf43573b3ef5ec74c1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="FitPSF_2Common_8h.xhtml#a48a7978e311520cf43573b3ef5ec74c1">FitPSF::sourceid_not_hat</a> (const <a class="el" href="classCore_1_1SourceLocation.xhtml">Core::SourceLocation</a> *source)</td></tr>
<tr class="memdesc:a48a7978e311520cf43573b3ef5ec74c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">True if and only if the given source is not identified by a HAT ID.  <a href="FitPSF_2Common_8h.xhtml#a48a7978e311520cf43573b3ef5ec74c1">More...</a><br /></td></tr>
<tr class="separator:a48a7978e311520cf43573b3ef5ec74c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1dad75399f74c0531081f9c4a039dca5"><td class="memTemplParams" colspan="2">template&lt;class SOURCE_LIST_TYPE &gt; </td></tr>
<tr class="memitem:a1dad75399f74c0531081f9c4a039dca5"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="FitPSF_2Common_8h.xhtml#a1dad75399f74c0531081f9c4a039dca5">FitPSF::fill_output_data_tree_common</a> (const SOURCE_LIST_TYPE &amp;fit_result, <a class="el" href="classIO_1_1H5IODataTree.xhtml">IO::H5IODataTree</a> &amp;output_data_tree, double mag_1adu)</td></tr>
<tr class="memdesc:a1dad75399f74c0531081f9c4a039dca5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates an output data tree with information common to all PSF models.  <a href="FitPSF_2Common_8h.xhtml#a1dad75399f74c0531081f9c4a039dca5">More...</a><br /></td></tr>
<tr class="separator:a1dad75399f74c0531081f9c4a039dca5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa97cde81a2041ea839314183cf93bf7d"><td class="memTemplParams" colspan="2">template&lt;class SOURCE_TYPE &gt; </td></tr>
<tr class="memitem:aa97cde81a2041ea839314183cf93bf7d"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="FitPSF_2Common_8h.xhtml#aa97cde81a2041ea839314183cf93bf7d">FitPSF::compare_source_assignment_ids</a> (const SOURCE_TYPE *s1, const SOURCE_TYPE *s2)</td></tr>
<tr class="memdesc:aa97cde81a2041ea839314183cf93bf7d"><td class="mdescLeft">&#160;</td><td class="mdescRight">True if and only if the ID of s1 is less than the ID of s2.  <a href="FitPSF_2Common_8h.xhtml#aa97cde81a2041ea839314183cf93bf7d">More...</a><br /></td></tr>
<tr class="separator:aa97cde81a2041ea839314183cf93bf7d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a9307bb97f4f61a3f308f01b7467e9a12"><td class="memItemLeft" align="right" valign="top">const unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="FitPSF_2Common_8h.xhtml#a9307bb97f4f61a3f308f01b7467e9a12">FitPSF::ulong1</a> = 1</td></tr>
<tr class="memdesc:a9307bb97f4f61a3f308f01b7467e9a12"><td class="mdescLeft">&#160;</td><td class="mdescRight">Value of 1 for which we can treate a reference/pointer.  <a href="FitPSF_2Common_8h.xhtml#a9307bb97f4f61a3f308f01b7467e9a12">More...</a><br /></td></tr>
<tr class="separator:a9307bb97f4f61a3f308f01b7467e9a12"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Defines some of the functions needed exclusively by the FitPSF tool. </p>
</div><h2 class="groupheader">Typedef Documentation</h2>
<a id="ab82a21732b8a5824c90511e45a39c3b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab82a21732b8a5824c90511e45a39c3b8">&#9670;&nbsp;</a></span>GSLSubPixType</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classCore_1_1SubPixelMap.xhtml">Core::SubPixelMap</a> <a class="el" href="FitPSF_2Common_8h.xhtml#ab82a21732b8a5824c90511e45a39c3b8">FitPSF::GSLSubPixType</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convenience alias. </p>

</div>
</div>
<a id="a5432cdc9b255de958483cc386d5bba86"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5432cdc9b255de958483cc386d5bba86">&#9670;&nbsp;</a></span>LinearSourceList</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::list&lt;LinearSource *&gt; <a class="el" href="FitPSF_2Common_8h.xhtml#a5432cdc9b255de958483cc386d5bba86">FitPSF::LinearSourceList</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convenience alias. </p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="a4a0c1fc04d429dbdabae388b3148a29a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a0c1fc04d429dbdabae388b3148a29a">&#9670;&nbsp;</a></span>add_new_source()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::add_new_source </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classFitPSF_1_1Image.xhtml">Image</a>&lt; <a class="el" href="classFitPSF_1_1LinearSource.xhtml">LinearSource</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>image</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classCore_1_1SubPixelMap.xhtml">Core::SubPixelMap</a> *&#160;</td>
          <td class="paramname"><em>subpix_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classPSF_1_1PiecewiseBicubic.xhtml">PSF::PiecewiseBicubic</a> &amp;&#160;</td>
          <td class="paramname"><em>psf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>alpha</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>max_circular_aperture</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>output_fname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>cover_psf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classCore_1_1SourceLocation.xhtml">Core::SourceLocation</a> &amp;&#160;</td>
          <td class="paramname"><em>location</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::VectorXd &amp;&#160;</td>
          <td class="paramname"><em>psf_terms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classBackground_1_1Source.xhtml">Background::Source</a> &amp;&#160;</td>
          <td class="paramname"><em>srcbg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>source_assignment_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="FitPSF_2Common_8h.xhtml#a5432cdc9b255de958483cc386d5bba86">LinearSourceList</a> &amp;&#160;</td>
          <td class="paramname"><em>destination</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add a newly constructed PiecewiseBidcubic source to a list. </p>
<p>See select_fit_sources for descrption of undocumented arguments. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">image</td><td>See same name argument to <a class="el" href="FitPSF_2Common_8h.xhtml#a3a9d73a1b58d240e9fcf24a6079279f1" title="Select the sources to use for PSF fitting.">select_fit_sources()</a>. </td></tr>
    <tr><td class="paramname">subpix_map</td><td>See same name argument to <a class="el" href="FitPSF_2Common_8h.xhtml#a3a9d73a1b58d240e9fcf24a6079279f1" title="Select the sources to use for PSF fitting.">select_fit_sources()</a>. </td></tr>
    <tr><td class="paramname">psf</td><td>See same name argument to <a class="el" href="FitPSF_2Common_8h.xhtml#a3a9d73a1b58d240e9fcf24a6079279f1" title="Select the sources to use for PSF fitting.">select_fit_sources()</a>. </td></tr>
    <tr><td class="paramname">alpha</td><td>See same name argument to <a class="el" href="FitPSF_2Common_8h.xhtml#a3a9d73a1b58d240e9fcf24a6079279f1" title="Select the sources to use for PSF fitting.">select_fit_sources()</a>. </td></tr>
    <tr><td class="paramname">max_circular_aperture</td><td>See same name argument to <a class="el" href="FitPSF_2Common_8h.xhtml#a3a9d73a1b58d240e9fcf24a6079279f1" title="Select the sources to use for PSF fitting.">select_fit_sources()</a>. </td></tr>
    <tr><td class="paramname">output_fname</td><td>See same name argument to <a class="el" href="FitPSF_2Common_8h.xhtml#a3a9d73a1b58d240e9fcf24a6079279f1" title="Select the sources to use for PSF fitting.">select_fit_sources()</a>. </td></tr>
    <tr><td class="paramname">cover_psf</td><td>See same name argument to <a class="el" href="FitPSF_2Common_8h.xhtml#a3a9d73a1b58d240e9fcf24a6079279f1" title="Select the sources to use for PSF fitting.">select_fit_sources()</a>. </td></tr>
    <tr><td class="paramname">location</td><td>The location of the source to add. </td></tr>
    <tr><td class="paramname">psf_terms</td><td>The values of the PSF expansion terms for this source. </td></tr>
    <tr><td class="paramname">srcbg</td><td>The backgruond to assume under the source. </td></tr>
    <tr><td class="paramname">source_assignment_id</td><td>The source assignment ID of the new source. </td></tr>
    <tr><td class="paramname">destination</td><td>The list to which to add the new source. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a5f506458d5dccf37ce0f49edd2004d86"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5f506458d5dccf37ce0f49edd2004d86">&#9670;&nbsp;</a></span>check_fit_source()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class SOURCE_TYPE &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::check_fit_source </td>
          <td>(</td>
          <td class="paramtype">SOURCE_TYPE &amp;&#160;</td>
          <td class="paramname"><em>last_source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classBackground_1_1Source.xhtml">Background::Source</a> &amp;&#160;</td>
          <td class="paramname"><em>srcbg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>max_saturated_fraction</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>min_pixels_per_source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>max_pixels_per_source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>max_circular_aperture</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>min_bg_pixels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>ignore_overlaps</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Checks of whether a source should be used for PSF fitting. </p>
<p>See select_fit_sources for a description of the arguments. </p>

</div>
</div>
<a id="aa97cde81a2041ea839314183cf93bf7d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa97cde81a2041ea839314183cf93bf7d">&#9670;&nbsp;</a></span>compare_source_assignment_ids()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class SOURCE_TYPE &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool FitPSF::compare_source_assignment_ids </td>
          <td>(</td>
          <td class="paramtype">const SOURCE_TYPE *&#160;</td>
          <td class="paramname"><em>s1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const SOURCE_TYPE *&#160;</td>
          <td class="paramname"><em>s2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>True if and only if the ID of s1 is less than the ID of s2. </p>

</div>
</div>
<a id="a85d42a1dc455617700fca43a63501136"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a85d42a1dc455617700fca43a63501136">&#9670;&nbsp;</a></span>drop_unsuitable_fit_sources()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class FIT_SOURCE_TYPE &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::drop_unsuitable_fit_sources </td>
          <td>(</td>
          <td class="paramtype">std::list&lt; FIT_SOURCE_TYPE * &gt; &amp;&#160;</td>
          <td class="paramname"><em>psf_fit_sources</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">typename std::list&lt; FIT_SOURCE_TYPE * &gt;::iterator&#160;</td>
          <td class="paramname"><em>check_start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::list&lt; FIT_SOURCE_TYPE * &gt; &amp;&#160;</td>
          <td class="paramname"><em>dropped_sources</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>drop_statistics</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Actually discard sources flagged as unsuitable during pixel selection. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">psf_fit_sources</td><td>The list of sources to check. </td></tr>
    <tr><td class="paramname">check_start</td><td>The first newly extracted source in the above list. </td></tr>
    <tr><td class="paramname">dropped_sources</td><td>See select_fit_sources. </td></tr>
    <tr><td class="paramname">drop_statistics</td><td>An output array filled with how many sources were dropped for each drop reason. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a1dad75399f74c0531081f9c4a039dca5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1dad75399f74c0531081f9c4a039dca5">&#9670;&nbsp;</a></span>fill_output_data_tree_common()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class SOURCE_LIST_TYPE &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::fill_output_data_tree_common </td>
          <td>(</td>
          <td class="paramtype">const SOURCE_LIST_TYPE &amp;&#160;</td>
          <td class="paramname"><em>fit_result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classIO_1_1H5IODataTree.xhtml">IO::H5IODataTree</a> &amp;&#160;</td>
          <td class="paramname"><em>output_data_tree</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>mag_1adu</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates an output data tree with information common to all PSF models. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">fit_result</td><td>The sources fitted for PSF. </td></tr>
    <tr><td class="paramname">output_data_tree</td><td>The tree to fill. </td></tr>
    <tr><td class="paramname">mag_1adu</td><td>The magnitude that corresponds to a flux of 1ADU. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a783aacdcc07a03202be9bba3731de75f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a783aacdcc07a03202be9bba3731de75f">&#9670;&nbsp;</a></span>get_section_fit_sources()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class FIT_SOURCE_TYPE , class PSF_TYPE &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::get_section_fit_sources </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classFitPSF_1_1Image.xhtml">Image</a>&lt; FIT_SOURCE_TYPE &gt; &amp;&#160;</td>
          <td class="paramname"><em>image</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classFitPSF_1_1Config.xhtml">Config</a> &amp;&#160;</td>
          <td class="paramname"><em>options</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classFitPSF_1_1IOSources.xhtml">IOSources</a> &amp;&#160;</td>
          <td class="paramname"><em>source_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classBackground_1_1Measure.xhtml">Background::Measure</a> &amp;&#160;</td>
          <td class="paramname"><em>backgrounds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classCore_1_1SubPixelMap.xhtml">Core::SubPixelMap</a> &amp;&#160;</td>
          <td class="paramname"><em>subpix_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const PSF_TYPE &amp;&#160;</td>
          <td class="paramname"><em>psf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::list&lt; FIT_SOURCE_TYPE * &gt; &amp;&#160;</td>
          <td class="paramname"><em>fit_sources</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::list&lt; FIT_SOURCE_TYPE * &gt; &amp;&#160;</td>
          <td class="paramname"><em>dropped_sources</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Find the source to use for PSF fitting for a single input image. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">image</td><td>The image where fit pixels are being tracked. </td></tr>
    <tr><td class="paramname">options</td><td>The configuration with which to perform PSF fitting. </td></tr>
    <tr><td class="paramname">source_list</td><td>The sources in the image, location and all terms requried for PSF fitting. </td></tr>
    <tr><td class="paramname">backgrounds</td><td>The measured background for the image sources. </td></tr>
    <tr><td class="paramname">subpix_map</td><td>The sub-pixel sensitivity map to assume. </td></tr>
    <tr><td class="paramname">psf</td><td>See same name argument to select_fit_sources. </td></tr>
    <tr><td class="paramname">fit_sources</td><td>See same name argument to select_fit_sources. </td></tr>
    <tr><td class="paramname">dropped_sources</td><td>See same name argument to select_fit_sources. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ae186fa7d2ecc5b465395fdd873a1f296"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae186fa7d2ecc5b465395fdd873a1f296">&#9670;&nbsp;</a></span>operator&lt;&lt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream &amp; FitPSF::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="group__FitPSF.xhtml#gaf322f512b63bfe334b817be88e6c7820">SourceDropReason</a> &amp;&#160;</td>
          <td class="paramname"><em>reason</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Human readable output of the reasons to drop sources. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">os</td><td>The stream to write to. </td></tr>
    <tr><td class="paramname">reason</td><td>The reson for dropping the source to describe. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a3a9d73a1b58d240e9fcf24a6079279f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3a9d73a1b58d240e9fcf24a6079279f1">&#9670;&nbsp;</a></span>select_fit_sources()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class FIT_SOURCE_TYPE , class PSF_TYPE &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::select_fit_sources </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classFitPSF_1_1Image.xhtml">Image</a>&lt; FIT_SOURCE_TYPE &gt; &amp;&#160;</td>
          <td class="paramname"><em>image</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classCore_1_1SubPixelMap.xhtml">Core::SubPixelMap</a> *&#160;</td>
          <td class="paramname"><em>subpix_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classFitPSF_1_1IOSources.xhtml">IOSources</a> &amp;&#160;</td>
          <td class="paramname"><em>input_source_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const PSF_TYPE &amp;&#160;</td>
          <td class="paramname"><em>psf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>alpha</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>max_saturated_fraction</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>min_pixels_per_source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>max_pixels_per_source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classBackground_1_1Measure.xhtml">Background::Measure</a> &amp;&#160;</td>
          <td class="paramname"><em>bg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>min_bg_pixels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>max_sources</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>max_circular_aperture</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::list&lt; FIT_SOURCE_TYPE * &gt; &amp;&#160;</td>
          <td class="paramname"><em>psf_fit_sources</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::list&lt; FIT_SOURCE_TYPE * &gt; &amp;&#160;</td>
          <td class="paramname"><em>dropped_sources</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>cover_psf</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>do_not_drop</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>ignore_overlaps</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Select the sources to use for PSF fitting. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">image</td><td>The image being processed. Should be a reference to the exact same variable for all sources in a single image! </td></tr>
    <tr><td class="paramname">subpix_map</td><td>The sub-pixel sensitivity map to assume. Must not be destroyed while this object is in use. </td></tr>
    <tr><td class="paramname">input_source_list</td><td>The cental PSF coordinates of the sources in the image. </td></tr>
    <tr><td class="paramname">psf</td><td>The PSF to assume for the sources. Obviously parameters cannot be correctly set-up since those are being fitted, but should have the correct structure (i.e. grid for piecewis PSFs). </td></tr>
    <tr><td class="paramname">alpha</td><td>The minimum S/N threshold to considering a pixel above the background </td></tr>
    <tr><td class="paramname">max_saturated_fraction</td><td>The maximum fraction of saturated pixels for a source to be used. </td></tr>
    <tr><td class="paramname">min_pixels_per_source</td><td>The minimum number of pixels a source must have to be used. </td></tr>
    <tr><td class="paramname">max_pixels_per_source</td><td>The maximum number of pixels allowed before excluding a source. </td></tr>
    <tr><td class="paramname">bg</td><td>The background estimate of the sources. </td></tr>
    <tr><td class="paramname">min_bg_pixels</td><td>The minimum number of pixels required in the background determination. </td></tr>
    <tr><td class="paramname">max_sources</td><td>The largest number of sources allowed in the final list. </td></tr>
    <tr><td class="paramname">max_circular_aperture</td><td>If source pixels outside this radius are found, the source is excluded </td></tr>
    <tr><td class="paramname">psf_fit_sources</td><td>The output list of sources selected for PSF shape fitting. </td></tr>
    <tr><td class="paramname">dropped_sources</td><td>The output list of sources rejected from the shape fit. </td></tr>
    <tr><td class="paramname">cover_psf</td><td>If true, any pixel which even partially overlaps with the PSF gets included. Otherwise, pixels are assigned by signal to noise (optionally filling up a circular aperture). This must be false for </td></tr>
    <tr><td class="paramname">do_not_drop</td><td>Do not drop any sources from PSF fitting (only used for zero PSF fit at the moment). </td></tr>
    <tr><td class="paramname">ignore_overlaps</td><td>If false, any source which even partially overlaps with another is dropped from the fit. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a48a7978e311520cf43573b3ef5ec74c1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a48a7978e311520cf43573b3ef5ec74c1">&#9670;&nbsp;</a></span>sourceid_not_hat()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool FitPSF::sourceid_not_hat </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classCore_1_1SourceLocation.xhtml">Core::SourceLocation</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>True if and only if the given source is not identified by a HAT ID. </p>

</div>
</div>
<a id="a77c6c4738a354472292906cde7c05a59"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a77c6c4738a354472292906cde7c05a59">&#9670;&nbsp;</a></span>trim_fit_sources()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class FIT_SOURCE_TYPE &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::trim_fit_sources </td>
          <td>(</td>
          <td class="paramtype">std::list&lt; FIT_SOURCE_TYPE * &gt; &amp;&#160;</td>
          <td class="paramname"><em>psf_fit_sources</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>max_sources</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::list&lt; FIT_SOURCE_TYPE * &gt; &amp;&#160;</td>
          <td class="paramname"><em>dropped_sources</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Drop excess sources from PSF shape fitting. </p>
<p>See select_fit_sources for a description of the arguments. </p>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="a9307bb97f4f61a3f308f01b7467e9a12"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9307bb97f4f61a3f308f01b7467e9a12">&#9670;&nbsp;</a></span>ulong1</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const unsigned long FitPSF::ulong1 = 1</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Value of 1 for which we can treate a reference/pointer. </p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_65a8df4c49f610a40e9230d0067dc79d.xhtml">doc_src</a></li><li class="navelem"><a class="el" href="dir_da0161f9aa898feee64ca6d468d5d6fb.xhtml">FitPSF</a></li><li class="navelem"><a class="el" href="FitPSF_2Common_8h.xhtml">Common.h</a></li>
    <li class="footer">Generated on Wed Jan 15 2025 16:00:29 for My Project by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1 </li>
  </ul>
</div>
</body>
</html>
