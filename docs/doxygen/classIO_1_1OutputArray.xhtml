<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Sub-Pixel Photometry: IO::OutputArray&lt; UNIT_TYPE &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Sub-Pixel Photometry
   </div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.svg"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.svg" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.xhtml');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classIO_1_1OutputArray.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pri-methods">Private Member Functions</a> &#124;
<a href="#pri-attribs">Private Attributes</a> &#124;
<a href="classIO_1_1OutputArray-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">IO::OutputArray&lt; UNIT_TYPE &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Prepares to write an array of values from from boost::any.  
 <a href="classIO_1_1OutputArray.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="OutputArray_8h_source.xhtml">OutputArray.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for IO::OutputArray&lt; UNIT_TYPE &gt;:</div>
<div class="dyncontent">
<div class="center"><img src="classIO_1_1OutputArray__coll__graph.png" border="0" usemap="#aIO_1_1OutputArray_3_01UNIT__TYPE_01_4_coll__map" alt="Collaboration graph"/></div>
<map name="aIO_1_1OutputArray_3_01UNIT__TYPE_01_4_coll__map" id="aIO_1_1OutputArray_3_01UNIT__TYPE_01_4_coll__map">
<area shape="rect" title="Prepares to write an array of values from from boost::any." alt="" coords="5,5,188,333"/>
</map>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ab7313a2e174d566c10379ad8049f683d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1OutputArray.xhtml#ab7313a2e174d566c10379ad8049f683d">OutputArray</a> ()</td></tr>
<tr class="memdesc:ab7313a2e174d566c10379ad8049f683d"><td class="mdescLeft">&#160;</td><td class="mdescRight">To be filled later using <a class="el" href="classIO_1_1OutputArray.xhtml#a2feadc779aeea863db6777550d8b278e" title="Parses the given value into this.">parse()</a>.  <a href="classIO_1_1OutputArray.xhtml#ab7313a2e174d566c10379ad8049f683d">More...</a><br /></td></tr>
<tr class="separator:ab7313a2e174d566c10379ad8049f683d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44cff483000bdc1fd9d302d7d571e332"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1OutputArray.xhtml#a44cff483000bdc1fd9d302d7d571e332">OutputArray</a> (const boost::any &amp;value)</td></tr>
<tr class="memdesc:a44cff483000bdc1fd9d302d7d571e332"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attempts all possible casts on the given value.  <a href="classIO_1_1OutputArray.xhtml#a44cff483000bdc1fd9d302d7d571e332">More...</a><br /></td></tr>
<tr class="separator:a44cff483000bdc1fd9d302d7d571e332"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2feadc779aeea863db6777550d8b278e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1OutputArray.xhtml#a2feadc779aeea863db6777550d8b278e">parse</a> (const boost::any &amp;value)</td></tr>
<tr class="memdesc:a2feadc779aeea863db6777550d8b278e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parses the given value into this.  <a href="classIO_1_1OutputArray.xhtml#a2feadc779aeea863db6777550d8b278e">More...</a><br /></td></tr>
<tr class="separator:a2feadc779aeea863db6777550d8b278e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade9f9bdf27451941fc85c348b27babf2"><td class="memItemLeft" align="right" valign="top">const size_t &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1OutputArray.xhtml#ade9f9bdf27451941fc85c348b27babf2">size</a> () const</td></tr>
<tr class="memdesc:ade9f9bdf27451941fc85c348b27babf2"><td class="mdescLeft">&#160;</td><td class="mdescRight">The number of elements in the array.  <a href="classIO_1_1OutputArray.xhtml#ade9f9bdf27451941fc85c348b27babf2">More...</a><br /></td></tr>
<tr class="separator:ade9f9bdf27451941fc85c348b27babf2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa79a0c2c86e58be44cff142d0186a1aa"><td class="memItemLeft" align="right" valign="top">const UNIT_TYPE *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1OutputArray.xhtml#aa79a0c2c86e58be44cff142d0186a1aa">data</a> () const</td></tr>
<tr class="memdesc:aa79a0c2c86e58be44cff142d0186a1aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">A pointer to the first element in the array, the rest are contiguous.  <a href="classIO_1_1OutputArray.xhtml#aa79a0c2c86e58be44cff142d0186a1aa">More...</a><br /></td></tr>
<tr class="separator:aa79a0c2c86e58be44cff142d0186a1aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3754e1a46190eb31b597baad5ef66bb"><td class="memItemLeft" align="right" valign="top">const UNIT_TYPE &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1OutputArray.xhtml#ae3754e1a46190eb31b597baad5ef66bb">operator[]</a> (size_t index) const</td></tr>
<tr class="memdesc:ae3754e1a46190eb31b597baad5ef66bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constant reference to an array element.  <a href="classIO_1_1OutputArray.xhtml#ae3754e1a46190eb31b597baad5ef66bb">More...</a><br /></td></tr>
<tr class="separator:ae3754e1a46190eb31b597baad5ef66bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aafe365b9930a836d99f788424cc6b86e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1OutputArray.xhtml#aafe365b9930a836d99f788424cc6b86e">operator==</a> (const <a class="el" href="classIO_1_1OutputArray.xhtml">OutputArray</a>&lt; UNIT_TYPE &gt; &amp;rhs)</td></tr>
<tr class="memdesc:aafe365b9930a836d99f788424cc6b86e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares two arrays element by element (empty arrays compare equal).  <a href="classIO_1_1OutputArray.xhtml#aafe365b9930a836d99f788424cc6b86e">More...</a><br /></td></tr>
<tr class="separator:aafe365b9930a836d99f788424cc6b86e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad77db3867694cc1232ef2682a252492e"><td class="memItemLeft" align="right" valign="top"><a id="ad77db3867694cc1232ef2682a252492e"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>parse</b> (const boost::any &amp;value)</td></tr>
<tr class="separator:ad77db3867694cc1232ef2682a252492e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad77db3867694cc1232ef2682a252492e"><td class="memItemLeft" align="right" valign="top"><a id="ad77db3867694cc1232ef2682a252492e"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>parse</b> (const boost::any &amp;value)</td></tr>
<tr class="separator:ad77db3867694cc1232ef2682a252492e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-methods"></a>
Private Member Functions</h2></td></tr>
<tr class="memitem:ad15debf028d1b2ef312b15de33ac1bfc"><td class="memTemplParams" colspan="2">template&lt;class INPUT_ARRAY_TYPE &gt; </td></tr>
<tr class="memitem:ad15debf028d1b2ef312b15de33ac1bfc"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classIO_1_1OutputArray.xhtml#ad15debf028d1b2ef312b15de33ac1bfc">try_container_type</a> (const boost::any &amp;value)</td></tr>
<tr class="memdesc:ad15debf028d1b2ef312b15de33ac1bfc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Try reading the input data assuming it is in some type of container providing beging() and end() const_iterators.  <a href="classIO_1_1OutputArray.xhtml#ad15debf028d1b2ef312b15de33ac1bfc">More...</a><br /></td></tr>
<tr class="separator:ad15debf028d1b2ef312b15de33ac1bfc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebf5fa77cbdfa7a8bd43f1e86c23de87"><td class="memTemplParams" colspan="2">template&lt;class INPUT_ARRAY_TYPE &gt; </td></tr>
<tr class="memitem:aebf5fa77cbdfa7a8bd43f1e86c23de87"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classIO_1_1OutputArray.xhtml#aebf5fa77cbdfa7a8bd43f1e86c23de87">try_array_type</a> (const boost::any &amp;value)</td></tr>
<tr class="memdesc:aebf5fa77cbdfa7a8bd43f1e86c23de87"><td class="mdescLeft">&#160;</td><td class="mdescRight">Try reading the input data assuming it is in some type of container where entries are stored contigously in memory.  <a href="classIO_1_1OutputArray.xhtml#aebf5fa77cbdfa7a8bd43f1e86c23de87">More...</a><br /></td></tr>
<tr class="separator:aebf5fa77cbdfa7a8bd43f1e86c23de87"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr class="memitem:acbf5f9fe44cc907b1a4e35c84d386917"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1OutputArray.xhtml#acbf5f9fe44cc907b1a4e35c84d386917">__size</a></td></tr>
<tr class="memdesc:acbf5f9fe44cc907b1a4e35c84d386917"><td class="mdescLeft">&#160;</td><td class="mdescRight">The size of the array.  <a href="classIO_1_1OutputArray.xhtml#acbf5f9fe44cc907b1a4e35c84d386917">More...</a><br /></td></tr>
<tr class="separator:acbf5f9fe44cc907b1a4e35c84d386917"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace3a82e89dbe43fde7cad33f6c95a9f7"><td class="memItemLeft" align="right" valign="top">const UNIT_TYPE *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1OutputArray.xhtml#ace3a82e89dbe43fde7cad33f6c95a9f7">__data</a></td></tr>
<tr class="memdesc:ace3a82e89dbe43fde7cad33f6c95a9f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">The first element.  <a href="classIO_1_1OutputArray.xhtml#ace3a82e89dbe43fde7cad33f6c95a9f7">More...</a><br /></td></tr>
<tr class="separator:ace3a82e89dbe43fde7cad33f6c95a9f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad502fdd3e83c6eedafffc86efa69ed32"><td class="memItemLeft" align="right" valign="top">UNIT_TYPE *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classIO_1_1OutputArray.xhtml#ad502fdd3e83c6eedafffc86efa69ed32">__allocated_data</a></td></tr>
<tr class="memdesc:ad502fdd3e83c6eedafffc86efa69ed32"><td class="mdescLeft">&#160;</td><td class="mdescRight">Data allocated by this class.  <a href="classIO_1_1OutputArray.xhtml#ad502fdd3e83c6eedafffc86efa69ed32">More...</a><br /></td></tr>
<tr class="separator:ad502fdd3e83c6eedafffc86efa69ed32"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename UNIT_TYPE&gt;<br />
class IO::OutputArray&lt; UNIT_TYPE &gt;</h3>

<p>Prepares to write an array of values from from boost::any. </p>
<p>Each element of the array moust have UNIT_TYPE type, otherwise boost::bad_any_cast is thrown. The original data should have been either a std::vector&lt;UNIT_TYPE&gt; or an std::valarray&lt;UNIT_TYPE&gt;. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ab7313a2e174d566c10379ad8049f683d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab7313a2e174d566c10379ad8049f683d">&#9670;&nbsp;</a></span>OutputArray() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename UNIT_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classIO_1_1OutputArray.xhtml">IO::OutputArray</a>&lt; UNIT_TYPE &gt;::<a class="el" href="classIO_1_1OutputArray.xhtml">OutputArray</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>To be filled later using <a class="el" href="classIO_1_1OutputArray.xhtml#a2feadc779aeea863db6777550d8b278e" title="Parses the given value into this.">parse()</a>. </p>

</div>
</div>
<a id="a44cff483000bdc1fd9d302d7d571e332"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a44cff483000bdc1fd9d302d7d571e332">&#9670;&nbsp;</a></span>OutputArray() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename UNIT_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classIO_1_1OutputArray.xhtml">IO::OutputArray</a>&lt; UNIT_TYPE &gt;::<a class="el" href="classIO_1_1OutputArray.xhtml">OutputArray</a> </td>
          <td>(</td>
          <td class="paramtype">const boost::any &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Attempts all possible casts on the given value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The value(s) to initialize the array with. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="aa79a0c2c86e58be44cff142d0186a1aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa79a0c2c86e58be44cff142d0186a1aa">&#9670;&nbsp;</a></span>data()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename UNIT_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const UNIT_TYPE* <a class="el" href="classIO_1_1OutputArray.xhtml">IO::OutputArray</a>&lt; UNIT_TYPE &gt;::data </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>A pointer to the first element in the array, the rest are contiguous. </p>

</div>
</div>
<a id="aafe365b9930a836d99f788424cc6b86e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aafe365b9930a836d99f788424cc6b86e">&#9670;&nbsp;</a></span>operator==()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename UNIT_TYPE &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classIO_1_1OutputArray.xhtml">IO::OutputArray</a>&lt; UNIT_TYPE &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classIO_1_1OutputArray.xhtml">OutputArray</a>&lt; UNIT_TYPE &gt; &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compares two arrays element by element (empty arrays compare equal). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">rhs</td><td>The original array to copy. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ae3754e1a46190eb31b597baad5ef66bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae3754e1a46190eb31b597baad5ef66bb">&#9670;&nbsp;</a></span>operator[]()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename UNIT_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const UNIT_TYPE&amp; <a class="el" href="classIO_1_1OutputArray.xhtml">IO::OutputArray</a>&lt; UNIT_TYPE &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constant reference to an array element. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>The index within the array to return. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a2feadc779aeea863db6777550d8b278e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2feadc779aeea863db6777550d8b278e">&#9670;&nbsp;</a></span>parse()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename UNIT_TYPE &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classIO_1_1OutputArray.xhtml">IO::OutputArray</a>&lt; UNIT_TYPE &gt;::parse </td>
          <td>(</td>
          <td class="paramtype">const boost::any &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Parses the given value into this. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The value to fill the array with. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ade9f9bdf27451941fc85c348b27babf2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ade9f9bdf27451941fc85c348b27babf2">&#9670;&nbsp;</a></span>size()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename UNIT_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const size_t&amp; <a class="el" href="classIO_1_1OutputArray.xhtml">IO::OutputArray</a>&lt; UNIT_TYPE &gt;::size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The number of elements in the array. </p>

</div>
</div>
<a id="aebf5fa77cbdfa7a8bd43f1e86c23de87"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aebf5fa77cbdfa7a8bd43f1e86c23de87">&#9670;&nbsp;</a></span>try_array_type()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename UNIT_TYPE &gt; </div>
<div class="memtemplate">
template&lt;class INPUT_ARRAY_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classIO_1_1OutputArray.xhtml">IO::OutputArray</a>&lt; UNIT_TYPE &gt;::try_array_type </td>
          <td>(</td>
          <td class="paramtype">const boost::any &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Try reading the input data assuming it is in some type of container where entries are stored contigously in memory. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The value to try parsing. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ad15debf028d1b2ef312b15de33ac1bfc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad15debf028d1b2ef312b15de33ac1bfc">&#9670;&nbsp;</a></span>try_container_type()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename UNIT_TYPE &gt; </div>
<div class="memtemplate">
template&lt;class INPUT_ARRAY_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classIO_1_1OutputArray.xhtml">IO::OutputArray</a>&lt; UNIT_TYPE &gt;::try_container_type </td>
          <td>(</td>
          <td class="paramtype">const boost::any &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Try reading the input data assuming it is in some type of container providing beging() and end() const_iterators. </p>
<p>This has different linkage need to figure out what exactly. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The value to try parsing. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="ad502fdd3e83c6eedafffc86efa69ed32"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad502fdd3e83c6eedafffc86efa69ed32">&#9670;&nbsp;</a></span>__allocated_data</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename UNIT_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">UNIT_TYPE* <a class="el" href="classIO_1_1OutputArray.xhtml">IO::OutputArray</a>&lt; UNIT_TYPE &gt;::__allocated_data</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Data allocated by this class. </p>

</div>
</div>
<a id="ace3a82e89dbe43fde7cad33f6c95a9f7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ace3a82e89dbe43fde7cad33f6c95a9f7">&#9670;&nbsp;</a></span>__data</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename UNIT_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const UNIT_TYPE* <a class="el" href="classIO_1_1OutputArray.xhtml">IO::OutputArray</a>&lt; UNIT_TYPE &gt;::__data</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The first element. </p>

</div>
</div>
<a id="acbf5f9fe44cc907b1a4e35c84d386917"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acbf5f9fe44cc907b1a4e35c84d386917">&#9670;&nbsp;</a></span>__size</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename UNIT_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t <a class="el" href="classIO_1_1OutputArray.xhtml">IO::OutputArray</a>&lt; UNIT_TYPE &gt;::__size</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The size of the array. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/home/kpenev/projects/git/AstroWISP/doc_src/IO/<a class="el" href="OutputArray_8h_source.xhtml">OutputArray.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><b>IO</b></li><li class="navelem"><a class="el" href="classIO_1_1OutputArray.xhtml">OutputArray</a></li>
    <li class="footer">Generated on Wed Jan 15 2025 09:32:07 for Sub-Pixel Photometry by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1 </li>
  </ul>
</div>
</body>
</html>
