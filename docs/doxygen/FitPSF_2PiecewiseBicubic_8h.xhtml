<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Sub-Pixel Photometry: /home/kpenev/projects/git/AstroWISP/doc_src/FitPSF/PiecewiseBicubic.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "ams.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.jsdelivr.net/npm/mathjax@3/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Sub-Pixel Photometry
   </div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.svg"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.svg" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.xhtml');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('FitPSF_2PiecewiseBicubic_8h.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">PiecewiseBicubic.h File Reference<div class="ingroups"><a class="el" href="group__FitPSF.xhtml">FitPSF</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>The declarations of the functions related to fitting piecewise bicubic PSFs.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &quot;../Core/SharedLibraryExportMacros.h&quot;</code><br />
<code>#include &quot;<a class="el" href="FitPSF_2Common_8h_source.xhtml">Common.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="LinearSource_8h_source.xhtml">LinearSource.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="OverlapGroup_8h_source.xhtml">OverlapGroup.h</a>&quot;</code><br />
<code>#include &quot;PiecewiseBicubicPSFSmoothing.h&quot;</code><br />
<code>#include &quot;<a class="el" href="PSF_2PiecewiseBicubic_8h_source.xhtml">../PSF/PiecewiseBicubic.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="PiecewiseBicubicMap_8h_source.xhtml">../PSF/PiecewiseBicubicMap.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="SubPixelCorrectedFlux_8h_source.xhtml">../Core/SubPixelCorrectedFlux.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="SubPixelMap_8h_source.xhtml">../Core/SubPixelMap.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="Core_2Image_8h_source.xhtml">../Core/Image.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="Core_2Typedefs_8h_source.xhtml">../Core/Typedefs.h</a>&quot;</code><br />
<code>#include &quot;Eigen/Dense&quot;</code><br />
<code>#include &lt;ctime&gt;</code><br />
<code>#include &lt;fstream&gt;</code><br />
<code>#include &lt;set&gt;</code><br />
<code>#include &lt;cmath&gt;</code><br />
<code>#include &lt;vector&gt;</code><br />
<code>#include &lt;valarray&gt;</code><br />
</div><div class="textblock"><div class="dynheader">
Include dependency graph for PiecewiseBicubic.h:</div>
<div class="dyncontent">
<div class="center"><img src="FitPSF_2PiecewiseBicubic_8h__incl.png" border="0" usemap="#a_2home_2kpenev_2projects_2git_2AstroWISP_2doc__src_2FitPSF_2PiecewiseBicubic_8h" alt=""/></div>
<map name="a_2home_2kpenev_2projects_2git_2AstroWISP_2doc__src_2FitPSF_2PiecewiseBicubic_8h" id="a_2home_2kpenev_2projects_2git_2AstroWISP_2doc__src_2FitPSF_2PiecewiseBicubic_8h">
<area shape="rect" title="The declarations of the functions related to fitting piecewise bicubic PSFs." alt="" coords="3601,5,3821,69"/>
<area shape="rect" href="SharedLibraryExportMacros_8h_source.xhtml" title=" " alt="" coords="1651,599,1871,645"/>
<area shape="rect" href="FitPSF_2Common_8h.xhtml" title="Defines some of the functions needed exclusively by the FitPSF tool." alt="" coords="2077,195,2177,224"/>
<area shape="rect" title=" " alt="" coords="3754,607,3819,637"/>
<area shape="rect" title=" " alt="" coords="3427,521,3506,551"/>
<area shape="rect" href="Core_2Typedefs_8h.xhtml" title="Some useful typedef statements." alt="" coords="3142,444,3242,473"/>
<area shape="rect" title=" " alt="" coords="4382,607,4447,637"/>
<area shape="rect" title=" " alt="" coords="4788,521,4903,551"/>
<area shape="rect" href="Core_2Image_8h.xhtml" title="Declares a base class for images to be processed." alt="" coords="2903,367,3033,396"/>
<area shape="rect" href="SubPixelMap_8h.xhtml" title="Declares the base class for all sub&#45;pixel maps." alt="" coords="4270,444,4453,473"/>
<area shape="rect" href="PSF_2PiecewiseBicubic_8h.xhtml" title="Defines a continuously differentiable PSF where each cell is a bicubic function." alt="" coords="3197,281,3408,310"/>
<area shape="rect" title=" " alt="" coords="144,367,187,396"/>
<area shape="rect" href="LinearSource_8h.xhtml" title="Declares a class used for PSF fitting where pixel responses are linear functions of the shape paramet..." alt="" coords="3076,195,3207,224"/>
<area shape="rect" href="OverlapGroup_8h.xhtml" title="Defines a class for working with groups of overlapping sources." alt="" coords="111,117,246,147"/>
<area shape="rect" href="PiecewiseBicubicPSFSmoothing_8h_source.xhtml" title=" " alt="" coords="4811,117,5082,147"/>
<area shape="rect" href="PiecewiseBicubicMap_8h.xhtml" title="Declares a smoothly varying over an image piecewise bicubic PSF map class." alt="" coords="3391,195,3633,224"/>
<area shape="rect" href="SubPixelCorrectedFlux_8h.xhtml" title="Defile a class that corrects for non&#45;uniform subpixel sensitivity and partial pixels in the aperture." alt="" coords="3956,272,4164,319"/>
<area shape="rect" title=" " alt="" coords="5491,117,5551,147"/>
<area shape="rect" title=" " alt="" coords="5576,117,5651,147"/>
<area shape="rect" href="FitPSF_2Config_8h.xhtml" title="Declares the command line parser for the FitPSF tool." alt="" coords="1956,281,2039,310"/>
<area shape="rect" title=" " alt="" coords="4804,607,4887,637"/>
<area shape="rect" href="IOSources_8h.xhtml" title="Declares Input/Output interface for the FitPSF tool." alt="" coords="855,281,966,310"/>
<area shape="rect" href="SourceLocation_8h.xhtml" title="Declares a class defining the minimum requirements for specifying the locations of sources." alt="" coords="463,367,662,396"/>
<area shape="rect" href="Background_2Source_8h.xhtml" title="Declares the base class for background extract(ion/ed) from an astronomical image." alt="" coords="643,281,831,310"/>
<area shape="rect" href="MeasureAnnulus_8h.xhtml" title="Declare a class for extracting source background from an annulus around each source excluding areas a..." alt="" coords="2511,444,2769,473"/>
<area shape="rect" href="Zero_8h.xhtml" title="Declare a background class for images from which the background has already been subtracted." alt="" coords="347,281,517,310"/>
<area shape="rect" href="H5IODataTree_8h.xhtml" title="A structure to hold any output data produced by subpixtools." alt="" coords="3128,367,3299,396"/>
<area shape="rect" href="Grid_8h.xhtml" title="Some useful typedef statements." alt="" coords="1859,521,1973,551"/>
<area shape="rect" href="PSF_2Typedefs_8h.xhtml" title="Some useful typedef statements." alt="" coords="1639,444,1787,473"/>
<area shape="rect" href="Annulus_8h.xhtml" title="Declare a class defining an annulus around each source to measure the background in." alt="" coords="819,444,1015,473"/>
<area shape="rect" href="CommandLineConfig_8h.xhtml" title="Declare a class for managing the configuration with which tools are run." alt="" coords="1812,444,2031,473"/>
<area shape="rect" href="PSF_2CommandLineUtil_8h.xhtml" title="Declarations of utilities for command line parsing of PSF information." alt="" coords="1470,367,1682,396"/>
<area shape="rect" href="Error_8h.xhtml" title="The hierarchy of exceptions for this project." alt="" coords="3941,521,4011,551"/>
<area shape="rect" title=" " alt="" coords="1360,607,1421,637"/>
<area shape="rect" title=" " alt="" coords="3059,607,3101,637"/>
<area shape="rect" href="NaN_8h.xhtml" title="Defines not&#45;a&#45;number and infinity." alt="" coords="621,521,739,551"/>
<area shape="rect" href="parse__grid_8h.xhtml" title="Define functions for converting between string and PSF::Grid." alt="" coords="1421,444,1563,473"/>
<area shape="rect" href="PhotColumns_8h.xhtml" title="Defines constants to denote the various columns that can be input or output by the various tools and ..." alt="" coords="3118,521,3250,551"/>
<area shape="rect" href="SourceID_8h.xhtml" title="The declaration of the SourceID class." alt="" coords="1039,444,1142,473"/>
<area shape="rect" title=" " alt="" coords="1124,521,1193,551"/>
<area shape="rect" title=" " alt="" coords="2942,444,3015,473"/>
<area shape="rect" title=" " alt="" coords="2845,444,2918,473"/>
<area shape="rect" href="Piecewise_8h.xhtml" title="Defines the PSF::Piecewise PSF model." alt="" coords="3488,367,3597,396"/>
<area shape="rect" href="PiecewiseBicubicCell_8h.xhtml" title="Defines a PSF cell with intensity given by a bi&#45;cubic polynomial." alt="" coords="2513,367,2703,396"/>
<area shape="rect" href="PSF_8h.xhtml" title="Defines the base class of all PSF models." alt="" coords="4128,444,4195,473"/>
<area shape="rect" href="OverlapSource_8h.xhtml" title="Defines the overlap&#45;related features of PSF fitting sources." alt="" coords="1319,521,1462,551"/>
<area shape="rect" href="Flux_8h.xhtml" title="Declare a class for flux measurements." alt="" coords="2308,367,2375,396"/>
<area shape="rect" href="Pixel_8h.xhtml" title="Defines a class describing a single pixel participating in PSF/PRF fitting." alt="" coords="195,195,266,224"/>
<area shape="rect" href="Map_8h.xhtml" title="Declarations of the Map class and some related functions." alt="" coords="3533,281,3648,310"/>
<area shape="rect" href="FluxPair_8h.xhtml" title="Define a class for holding subpixel sensitivity weighted and non&#45;weighted fluxes." alt="" coords="2359,521,2454,551"/>
</map>
</div>
</div><div class="textblock"><div class="dynheader">
This graph shows which files directly or indirectly include this file:</div>
<div class="dyncontent">
<div class="center"><img src="FitPSF_2PiecewiseBicubic_8h__dep__incl.png" border="0" usemap="#a_2home_2kpenev_2projects_2git_2AstroWISP_2doc__src_2FitPSF_2PiecewiseBicubic_8hdep" alt=""/></div>
<map name="a_2home_2kpenev_2projects_2git_2AstroWISP_2doc__src_2FitPSF_2PiecewiseBicubic_8hdep" id="a_2home_2kpenev_2projects_2git_2AstroWISP_2doc__src_2FitPSF_2PiecewiseBicubic_8hdep">
<area shape="rect" title="The declarations of the functions related to fitting piecewise bicubic PSFs." alt="" coords="5,5,225,69"/>
<area shape="rect" href="FitPSF_2CInterface_8cpp.xhtml" title="Define the C&#45;interface functions for the FitPSF library." alt="" coords="23,117,208,181"/>
</map>
</div>
</div>
<p><a href="FitPSF_2PiecewiseBicubic_8h_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a3b874e6e467d332183786f4eb74e94b6"><td class="memItemLeft" align="right" valign="top">typedef std::list&lt; Pixel&lt; LinearSource &gt; * &gt;::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="FitPSF_2PiecewiseBicubic_8h.xhtml#a3b874e6e467d332183786f4eb74e94b6">FitPSF::ConstPixelIter</a></td></tr>
<tr class="memdesc:a3b874e6e467d332183786f4eb74e94b6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience alias for unmutable iterator over pixels.  <a href="FitPSF_2PiecewiseBicubic_8h.xhtml#a3b874e6e467d332183786f4eb74e94b6">More...</a><br /></td></tr>
<tr class="separator:a3b874e6e467d332183786f4eb74e94b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d074040a6210284336f76232fa5526c"><td class="memItemLeft" align="right" valign="top">typedef std::list&lt; Pixel&lt; LinearSource &gt; * &gt;::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="FitPSF_2PiecewiseBicubic_8h.xhtml#a9d074040a6210284336f76232fa5526c">FitPSF::PixelIter</a></td></tr>
<tr class="memdesc:a9d074040a6210284336f76232fa5526c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience alias for mutable iterator over pixels.  <a href="FitPSF_2PiecewiseBicubic_8h.xhtml#a9d074040a6210284336f76232fa5526c">More...</a><br /></td></tr>
<tr class="separator:a9d074040a6210284336f76232fa5526c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6889732e1d26315f2d20c44e524a7f22"><td class="memItemLeft" align="right" valign="top">typedef std::list&lt; OverlapGroup&lt; LinearSource, <a class="el" href="classPSF_1_1PiecewiseBicubic.xhtml">PSF::PiecewiseBicubic</a> &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="FitPSF_2PiecewiseBicubic_8h.xhtml#a6889732e1d26315f2d20c44e524a7f22">FitPSF::OverlapGroupList</a></td></tr>
<tr class="memdesc:a6889732e1d26315f2d20c44e524a7f22"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience alias for a list of groups of overlapping sources.  <a href="FitPSF_2PiecewiseBicubic_8h.xhtml#a6889732e1d26315f2d20c44e524a7f22">More...</a><br /></td></tr>
<tr class="separator:a6889732e1d26315f2d20c44e524a7f22"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ae10535364c8d80c355335d42c9fd1a76"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><b>FitPSF::fill_parameter_sets</b> ( const std::vector&lt; double &gt; &amp;x_grid, const std::vector&lt; double &gt; &amp;y_grid, std::vector&lt; std::valarray&lt; double &gt; &gt; &amp;parameter_sets)</td></tr>
<tr class="memdesc:ae10535364c8d80c355335d42c9fd1a76"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generates the vector of bicubic cell parameter sets corresponding to single PSF parameter=1 while all others=0.  <a href="PiecewiseBicubic_8cpp.xhtml#ae10535364c8d80c355335d42c9fd1a76">More...</a><br /></td></tr>
<tr class="separator:ae10535364c8d80c355335d42c9fd1a76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c2b2011ab96f64fa2c567d46dd1b69a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><b>FitPSF::select_basis_vectors</b> ( const std::vector&lt; std::valarray&lt; double &gt; &gt; &amp;parameter_sets, const <a class="el" href="classPSF_1_1PiecewiseBicubic.xhtml">PSF::PiecewiseBicubic</a> &amp;psf, Eigen::MatrixXd &amp;basis)</td></tr>
<tr class="memdesc:a3c2b2011ab96f64fa2c567d46dd1b69a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Selects basis vectors in which the PSF will be decomposed, as well as the full PSF integral vector.  <a href="PiecewiseBicubic_8cpp.xhtml#a3c2b2011ab96f64fa2c567d46dd1b69a">More...</a><br /></td></tr>
<tr class="separator:a3c2b2011ab96f64fa2c567d46dd1b69a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d34489edbac7dedfcb5254149160f4d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="FitPSF_2PiecewiseBicubic_8h.xhtml#a5d34489edbac7dedfcb5254149160f4d">FitPSF::fill_basis_paramater_sets</a> (const std::vector&lt; std::valarray&lt; double &gt; &gt; &amp;parameter_sets, Eigen::MatrixXd &amp;basis, std::vector&lt; std::valarray&lt; double &gt; &gt; &amp;basis_parameter_sets)</td></tr>
<tr class="memdesc:a5d34489edbac7dedfcb5254149160f4d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generates parameter sets which correspond to the basis vectors (and full PSF integral vector) instead of to single parameters.  <a href="FitPSF_2PiecewiseBicubic_8h.xhtml#a5d34489edbac7dedfcb5254149160f4d">More...</a><br /></td></tr>
<tr class="separator:a5d34489edbac7dedfcb5254149160f4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada17fb6f9984283c7450a04e9d4aefb2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="FitPSF_2PiecewiseBicubic_8h.xhtml#ada17fb6f9984283c7450a04e9d4aefb2">FitPSF::prepare_linear_regression</a> (LinearSourceList &amp;fit_sources, const std::vector&lt; std::valarray&lt; double &gt; &gt; &amp;parameter_sets, const Eigen::VectorXd &amp;pixel_excesses, Eigen::MatrixXd &amp;pixel_integral_matrix, Eigen::VectorXd &amp;rhs_offset, Eigen::MatrixXd &amp;symmetrized_pix_integral_matrix, Eigen::VectorXd &amp;modified_pixel_excesses, Eigen::VectorXd &amp;modified_rhs_offset)</td></tr>
<tr class="memdesc:ada17fb6f9984283c7450a04e9d4aefb2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fills in the 3 output matrices and the output vector as appropriate.  <a href="FitPSF_2PiecewiseBicubic_8h.xhtml#ada17fb6f9984283c7450a04e9d4aefb2">More...</a><br /></td></tr>
<tr class="separator:ada17fb6f9984283c7450a04e9d4aefb2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06ef0c026ea91fc19a01138c5c2c451c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><b>FitPSF::fill_poly_coef_matrix</b> ( const LinearSourceList &amp;fit_sources, Eigen::MatrixXd &amp;poly_coef_matrix)</td></tr>
<tr class="memdesc:a06ef0c026ea91fc19a01138c5c2c451c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fills a stack of matrices, containing the outer product of the PSF terms for each source.  <a href="PiecewiseBicubic_8cpp.xhtml#a06ef0c026ea91fc19a01138c5c2c451c">More...</a><br /></td></tr>
<tr class="separator:a06ef0c026ea91fc19a01138c5c2c451c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38cca22b4781c97a0d4700a68ca8f249"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><b>FitPSF::fill_matrix_to_invert</b> ( const LinearSourceList &amp;fit_sources, const Eigen::MatrixXd &amp;symmetrized_pix_integral_matrix, const Eigen::MatrixXd &amp;poly_coef_matrix, Eigen::MatrixXd &amp;matrix_to_invert)</td></tr>
<tr class="memdesc:a38cca22b4781c97a0d4700a68ca8f249"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fills the matrix defining the equations of the linear regression for the full psf expansion.  <a href="PiecewiseBicubic_8cpp.xhtml#a38cca22b4781c97a0d4700a68ca8f249">More...</a><br /></td></tr>
<tr class="separator:a38cca22b4781c97a0d4700a68ca8f249"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad2fc9ef9b6d40a0952034122c04cb88"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="FitPSF_2PiecewiseBicubic_8h.xhtml#aad2fc9ef9b6d40a0952034122c04cb88">FitPSF::fill_pixel_excesses</a> (LinearSourceList &amp;fit_sources, Eigen::VectorXd &amp;rhs, bool single_source=false)</td></tr>
<tr class="memdesc:aad2fc9ef9b6d40a0952034122c04cb88"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates the RHS vector for the PSF fitting from the pixel values of the fit sources.  <a href="FitPSF_2PiecewiseBicubic_8h.xhtml#aad2fc9ef9b6d40a0952034122c04cb88">More...</a><br /></td></tr>
<tr class="separator:aad2fc9ef9b6d40a0952034122c04cb88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47bf815a0f384970068fa551a7602f9d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><b>FitPSF::fill_flux_scaled_modified_rhs</b> ( const LinearSourceList &amp;fit_sources, const Eigen::VectorXd &amp;modified_pixel_excesses, const Eigen::VectorXd &amp;modified_rhs_offset, Eigen::VectorXd &amp;flux_scaled_modified_rhs)</td></tr>
<tr class="memdesc:a47bf815a0f384970068fa551a7602f9d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fills a vector with the final RHS that should be used for the linear regression of the PSF parameter expansion fit.  <a href="PiecewiseBicubic_8cpp.xhtml#a47bf815a0f384970068fa551a7602f9d">More...</a><br /></td></tr>
<tr class="separator:a47bf815a0f384970068fa551a7602f9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b3f6b04caf7a8bfc2bf487a4f3d9461"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><b>FitPSF::estimate_initial_amplitudes</b> ( LinearSourceList &amp;fit_sources, double gain)</td></tr>
<tr class="memdesc:a7b3f6b04caf7a8bfc2bf487a4f3d9461"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides initial guesses for the amplitudes of the input sources.  <a href="PiecewiseBicubic_8cpp.xhtml#a7b3f6b04caf7a8bfc2bf487a4f3d9461">More...</a><br /></td></tr>
<tr class="separator:a7b3f6b04caf7a8bfc2bf487a4f3d9461"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1da5946d37d565eaf1bde087efb45f9a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><b>FitPSF::estimate_initial_amplitudes</b> ( LinearSourceList &amp;fit_sources, const <a class="el" href="classCore_1_1SubPixelMap.xhtml">Core::SubPixelMap</a> &amp;subpix_map, const <a class="el" href="classCore_1_1Image.xhtml">Core::Image</a>&lt; double &gt; &amp;observed_image, double gain, double aperture)</td></tr>
<tr class="memdesc:a1da5946d37d565eaf1bde087efb45f9a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides initial guesses for the amplitudes of the input sources.  <a href="PiecewiseBicubic_8cpp.xhtml#a1da5946d37d565eaf1bde087efb45f9a">More...</a><br /></td></tr>
<tr class="separator:a1da5946d37d565eaf1bde087efb45f9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a9b91a3bea25086cbd9995fadb3ec6b"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="FitPSF_2PiecewiseBicubic_8h.xhtml#a4a9b91a3bea25086cbd9995fadb3ec6b">FitPSF::update_fluxes</a> (LinearSourceList &amp;fit_sources, const Eigen::VectorXd &amp;best_fit)</td></tr>
<tr class="memdesc:a4a9b91a3bea25086cbd9995fadb3ec6b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Updates the fluxes of the fit sources with new best estimates derived by fitting each source's background excesses.  <a href="FitPSF_2PiecewiseBicubic_8h.xhtml#a4a9b91a3bea25086cbd9995fadb3ec6b">More...</a><br /></td></tr>
<tr class="separator:a4a9b91a3bea25086cbd9995fadb3ec6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac91ac750539747a8dca73b658b39d657"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="FitPSF_2PiecewiseBicubic_8h.xhtml#ac91ac750539747a8dca73b658b39d657">FitPSF::fit_piecewise_bicubic_psf_step</a> (LinearSourceList &amp;fit_sources, const Eigen::MatrixXd &amp;symmetrized_pix_integral_matrix, const Eigen::MatrixXd &amp;poly_coef_matrix, const Eigen::MatrixXd &amp;pixel_integral_matrix, const Eigen::VectorXd &amp;pixel_excesses, const Eigen::VectorXd &amp;rhs_offset, const Eigen::VectorXd &amp;modified_pixel_excesses, const Eigen::VectorXd &amp;modified_rhs_offset, const PiecewiseBicubicPSFSmoothing &amp;smoothing, Eigen::VectorXd &amp;best_fit)</td></tr>
<tr class="memdesc:ac91ac750539747a8dca73b658b39d657"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a single PSF parameter fit, amplitude fit iteration.  <a href="FitPSF_2PiecewiseBicubic_8h.xhtml#ac91ac750539747a8dca73b658b39d657">More...</a><br /></td></tr>
<tr class="separator:ac91ac750539747a8dca73b658b39d657"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b7a2c7621fb212e6590e60c32847e75"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><b>FitPSF::count_pixels</b> ( const LinearSourceList &amp;fit_sources, size_t *max_source_pixels=NULL)</td></tr>
<tr class="memdesc:a8b7a2c7621fb212e6590e60c32847e75"><td class="mdescLeft">&#160;</td><td class="mdescRight">Counts the total number of shape fitting pixels in all the given sources.  <a href="PiecewiseBicubic_8cpp.xhtml#a8b7a2c7621fb212e6590e60c32847e75">More...</a><br /></td></tr>
<tr class="separator:a8b7a2c7621fb212e6590e60c32847e75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28d3743d0e3869d521ea01c5e17fbb6a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><b>FitPSF::fit_piecewise_bicubic_psf</b> ( LinearSourceList &amp;fit_sources, LinearSourceList &amp;dropped_sources, double gain, const std::vector&lt; double &gt; &amp;x_grid, const std::vector&lt; double &gt; &amp;y_grid, const <a class="el" href="classCore_1_1SubPixelMap.xhtml">Core::SubPixelMap</a> &amp;subpix_map, double max_abs_amplitude_change, double max_rel_amplitude_change, double max_chi2, double pixel_rejection, double min_convergence_rate, int max_iterations, double smoothing_penalty, Eigen::VectorXd &amp;best_fit_poly_coef)</td></tr>
<tr class="memdesc:a28d3743d0e3869d521ea01c5e17fbb6a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fits for the polynomials giving the values, x, y and xy derivatives describing a piecewise bicubic PSF smoothly varying over the image.  <a href="PiecewiseBicubic_8cpp.xhtml#a28d3743d0e3869d521ea01c5e17fbb6a">More...</a><br /></td></tr>
<tr class="separator:a28d3743d0e3869d521ea01c5e17fbb6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:affdd2a42b876e91e63592bdb7dd09365"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><b>FitPSF::fit_piecewise_bicubic_psf</b> ( LinearSourceList &amp;fit_sources, LinearSourceList &amp;dropped_sources, const <a class="el" href="classPSF_1_1PiecewiseBicubicMap.xhtml">PSF::PiecewiseBicubicMap</a> &amp;psf_map, const std::vector&lt; double &gt; &amp;x_grid, const std::vector&lt; double &gt; &amp;y_grid, const <a class="el" href="classCore_1_1SubPixelMap.xhtml">Core::SubPixelMap</a> &amp;subpix_map, double max_abs_amplitude_change, double max_rel_amplitude_change, double max_chi2, double pixel_rejection, double min_convergence_rate, int max_iterations, double smoothing_penalty, Eigen::VectorXd &amp;best_fit_poly_coef, double gain)</td></tr>
<tr class="memdesc:affdd2a42b876e91e63592bdb7dd09365"><td class="mdescLeft">&#160;</td><td class="mdescRight">Same as above, but uses an initial PSF map to derive initial flux estimates.  <a href="PiecewiseBicubic_8cpp.xhtml#affdd2a42b876e91e63592bdb7dd09365">More...</a><br /></td></tr>
<tr class="separator:affdd2a42b876e91e63592bdb7dd09365"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a216e02e75d2663e4fd89b41c8a182f92"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="FitPSF_2PiecewiseBicubic_8h.xhtml#a216e02e75d2663e4fd89b41c8a182f92">FitPSF::fit_group</a> (OverlapGroup&lt; LinearSource, <a class="el" href="classPSF_1_1PiecewiseBicubic.xhtml">PSF::PiecewiseBicubic</a> &gt; &amp;group, const <a class="el" href="classCore_1_1SubPixelMap.xhtml">Core::SubPixelMap</a> &amp;subpix_map, const <a class="el" href="classPSF_1_1PiecewiseBicubicMap.xhtml">PSF::PiecewiseBicubicMap</a> &amp;psf_map)</td></tr>
<tr class="memdesc:a216e02e75d2663e4fd89b41c8a182f92"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs the combined amplitude fitting for a group of sources.  <a href="FitPSF_2PiecewiseBicubic_8h.xhtml#a216e02e75d2663e4fd89b41c8a182f92">More...</a><br /></td></tr>
<tr class="separator:a216e02e75d2663e4fd89b41c8a182f92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef4c0f86a7072eae200ceb4807d502fc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><b>FitPSF::fit_dropped_sources</b> ( LinearSourceList &amp;dropped_sources, const Eigen::VectorXd &amp;best_fit_poly_coef)</td></tr>
<tr class="memdesc:aef4c0f86a7072eae200ceb4807d502fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fits for the amplitudes of sources initially dropped from PSF fitting.  <a href="PiecewiseBicubic_8cpp.xhtml#aef4c0f86a7072eae200ceb4807d502fc">More...</a><br /></td></tr>
<tr class="separator:aef4c0f86a7072eae200ceb4807d502fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a923bbfe73bf3ef904b0878b6850b942d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><b>FitPSF::output_best_fit_psf</b> ( const Eigen::VectorXd &amp;best_fit_poly_coef, const std::vector&lt; double &gt; &amp;x_grid, const std::vector&lt; double &gt; &amp;y_grid, const std::string &amp;fname)</td></tr>
<tr class="memdesc:a923bbfe73bf3ef904b0878b6850b942d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generates a file containing all the information necessary in order to reproduce the best fit PSF for any image position.  <a href="PiecewiseBicubic_8cpp.xhtml#a923bbfe73bf3ef904b0878b6850b942d">More...</a><br /></td></tr>
<tr class="separator:a923bbfe73bf3ef904b0878b6850b942d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>The declarations of the functions related to fitting piecewise bicubic PSFs. </p>
<p>The following variable names are used for the quentities defined in the <a class="el" href="PiecewiseBicubicFitPSF_main_page.xhtml">description of the algorithm</a>.</p>
<ul>
<li>\(\mathbf{\tilde{M}^i}\) - pix_integral_matrix</li>
<li>The stack of \((\mathbf{\kappa}^i)^T\,\mathbf{\kappa}\) - poly_coef_matrix</li>
<li>\(\mathbf{\tilde{\Lambda}}\) - symmetrized_pix_integral_matrix</li>
<li>\(\mathbf{\Lambda}\) - matrix_to_invert</li>
<li>\(\mathbf{r}\) - rhs</li>
<li>\(\mathbf{\tilde{r}}\) - modified_rhs</li>
<li>\(\mathbf{r&#39;}\) - flux_scaled_modified_rhs</li>
</ul>
<p>The last four quantities are re-computed after changing the source amplitudes. </p>
</div><h2 class="groupheader">Typedef Documentation</h2>
<a id="a3b874e6e467d332183786f4eb74e94b6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3b874e6e467d332183786f4eb74e94b6">&#9670;&nbsp;</a></span>ConstPixelIter</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::list&lt; Pixel&lt;LinearSource&gt;* &gt;::const_iterator <a class="el" href="FitPSF_2PiecewiseBicubic_8h.xhtml#a3b874e6e467d332183786f4eb74e94b6">FitPSF::ConstPixelIter</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convenience alias for unmutable iterator over pixels. </p>

</div>
</div>
<a id="a6889732e1d26315f2d20c44e524a7f22"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6889732e1d26315f2d20c44e524a7f22">&#9670;&nbsp;</a></span>OverlapGroupList</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::list&lt; OverlapGroup&lt;LinearSource, <a class="el" href="classPSF_1_1PiecewiseBicubic.xhtml">PSF::PiecewiseBicubic</a>&gt; &gt; <a class="el" href="FitPSF_2PiecewiseBicubic_8h.xhtml#a6889732e1d26315f2d20c44e524a7f22">FitPSF::OverlapGroupList</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convenience alias for a list of groups of overlapping sources. </p>

</div>
</div>
<a id="a9d074040a6210284336f76232fa5526c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9d074040a6210284336f76232fa5526c">&#9670;&nbsp;</a></span>PixelIter</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::list&lt; Pixel&lt;LinearSource&gt;* &gt;::const_iterator <a class="el" href="FitPSF_2PiecewiseBicubic_8h.xhtml#a9d074040a6210284336f76232fa5526c">FitPSF::PixelIter</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convenience alias for mutable iterator over pixels. </p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="a8b7a2c7621fb212e6590e60c32847e75"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b7a2c7621fb212e6590e60c32847e75">&#9670;&nbsp;</a></span>count_pixels()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t FitPSF::count_pixels </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="FitPSF_2Common_8h.xhtml#a5432cdc9b255de958483cc386d5bba86">LinearSourceList</a> &amp;&#160;</td>
          <td class="paramname"><em>fit_sources</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t *&#160;</td>
          <td class="paramname"><em>max_source_pixels</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Counts the total number of shape fitting pixels in all the given sources. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">fit_sources</td><td>The list of sources whose pixel counts should be summed up. </td></tr>
    <tr><td class="paramname">max_source_pixels</td><td>If non-NULL the location pointed to by this argument is set to the number of shape fit pixels in the source with the largest number of such. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a1da5946d37d565eaf1bde087efb45f9a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1da5946d37d565eaf1bde087efb45f9a">&#9670;&nbsp;</a></span>estimate_initial_amplitudes() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::estimate_initial_amplitudes </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="FitPSF_2Common_8h.xhtml#a5432cdc9b255de958483cc386d5bba86">LinearSourceList</a> &amp;&#160;</td>
          <td class="paramname"><em>fit_sources</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classCore_1_1SubPixelMap.xhtml">Core::SubPixelMap</a> &amp;&#160;</td>
          <td class="paramname"><em>subpix_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classCore_1_1Image.xhtml">Core::Image</a>&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>observed_image</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>gain</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>aperture</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Provides initial guesses for the amplitudes of the input sources. </p>
<p>Amplitudes are estimated by aperture photometry with a flat PSF but the actual sub-pixel map. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">fit_sources</td><td>The input list of sources. On output has the amplitudes set to their estimated values. </td></tr>
    <tr><td class="paramname">subpix_map</td><td>The sub-pixel sensitivity map. </td></tr>
    <tr><td class="paramname">observed_image</td><td>The image on which PSF fitting is performed. </td></tr>
    <tr><td class="paramname">gain</td><td>The gain of the input image. </td></tr>
    <tr><td class="paramname">aperture</td><td>The aperture to use. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a7b3f6b04caf7a8bfc2bf487a4f3d9461"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b3f6b04caf7a8bfc2bf487a4f3d9461">&#9670;&nbsp;</a></span>estimate_initial_amplitudes() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::estimate_initial_amplitudes </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="FitPSF_2Common_8h.xhtml#a5432cdc9b255de958483cc386d5bba86">LinearSourceList</a> &amp;&#160;</td>
          <td class="paramname"><em>fit_sources</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>gain</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Provides initial guesses for the amplitudes of the input sources. </p>
<p>Amplitudes are estimated by summing up all pixel values. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">fit_sources</td><td>The input list of sources. On output has the amplitudes set to their estimated values. </td></tr>
    <tr><td class="paramname">gain</td><td>The gain of the input image. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a5d34489edbac7dedfcb5254149160f4d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d34489edbac7dedfcb5254149160f4d">&#9670;&nbsp;</a></span>fill_basis_paramater_sets()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::fill_basis_paramater_sets </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; std::valarray&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>parameter_sets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Eigen::MatrixXd &amp;&#160;</td>
          <td class="paramname"><em>basis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::valarray&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>basis_parameter_sets</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Generates parameter sets which correspond to the basis vectors (and full PSF integral vector) instead of to single parameters. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">parameter_sets</td><td>The sets of parameters returned by fill_parameter_sets(). </td></tr>
    <tr><td class="paramname">basis</td><td>The matrix of basis vectors filled by select_basis_vectors. </td></tr>
    <tr><td class="paramname">basis_parameter_sets</td><td>The destination to fill with the new parameter sets. Should have the correct size on input, but the individual entries are automatically resized. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a47bf815a0f384970068fa551a7602f9d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47bf815a0f384970068fa551a7602f9d">&#9670;&nbsp;</a></span>fill_flux_scaled_modified_rhs()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::fill_flux_scaled_modified_rhs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="FitPSF_2Common_8h.xhtml#a5432cdc9b255de958483cc386d5bba86">LinearSourceList</a> &amp;&#160;</td>
          <td class="paramname"><em>fit_sources</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::VectorXd &amp;&#160;</td>
          <td class="paramname"><em>modified_pixel_excesses</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::VectorXd &amp;&#160;</td>
          <td class="paramname"><em>modified_rhs_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Eigen::VectorXd &amp;&#160;</td>
          <td class="paramname"><em>flux_scaled_modified_rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Fills a vector with the final RHS that should be used for the linear regression of the PSF parameter expansion fit. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">fit_sources</td><td>The input list of sources. </td></tr>
    <tr><td class="paramname">modified_pixel_excesses</td><td>See the argument with the same name in prepare_linear_regression. </td></tr>
    <tr><td class="paramname">modified_rhs_offset</td><td>See the argument with the same name in prepare_linear_regression. </td></tr>
    <tr><td class="paramname">flux_scaled_modified_rhs</td><td>The location to fill with the result. Should have the correct dimensions and be zero on input. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a38cca22b4781c97a0d4700a68ca8f249"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a38cca22b4781c97a0d4700a68ca8f249">&#9670;&nbsp;</a></span>fill_matrix_to_invert()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::fill_matrix_to_invert </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="FitPSF_2Common_8h.xhtml#a5432cdc9b255de958483cc386d5bba86">LinearSourceList</a> &amp;&#160;</td>
          <td class="paramname"><em>fit_sources</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::MatrixXd &amp;&#160;</td>
          <td class="paramname"><em>symmetrized_pix_integral_matrix</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::MatrixXd &amp;&#160;</td>
          <td class="paramname"><em>poly_coef_matrix</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Eigen::MatrixXd &amp;&#160;</td>
          <td class="paramname"><em>matrix_to_invert</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Fills the matrix defining the equations of the linear regression for the full psf expansion. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">fit_sources</td><td>The input list of sources. </td></tr>
    <tr><td class="paramname">symmetrized_pix_integral_matrix</td><td>See the argument with the same name in prepare_linear_regression. </td></tr>
    <tr><td class="paramname">poly_coef_matrix</td><td>The result produced by fill_poly_coef_matrix. </td></tr>
    <tr><td class="paramname">matrix_to_invert</td><td>The location to fill with the result. Should have the correct </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ae10535364c8d80c355335d42c9fd1a76"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae10535364c8d80c355335d42c9fd1a76">&#9670;&nbsp;</a></span>fill_parameter_sets()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::fill_parameter_sets </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>x_grid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>y_grid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::valarray&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>parameter_sets</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Generates the vector of bicubic cell parameter sets corresponding to single PSF parameter=1 while all others=0. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x_grid</td><td>The vertical grid boundaries defining the PSF cells. </td></tr>
    <tr><td class="paramname">y_grid</td><td>The horizontal grid boundaries defining the PSF cells. </td></tr>
    <tr><td class="paramname">parameter_sets</td><td>The location to fill. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aad2fc9ef9b6d40a0952034122c04cb88"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aad2fc9ef9b6d40a0952034122c04cb88">&#9670;&nbsp;</a></span>fill_pixel_excesses()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::fill_pixel_excesses </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="FitPSF_2Common_8h.xhtml#a5432cdc9b255de958483cc386d5bba86">LinearSourceList</a> &amp;&#160;</td>
          <td class="paramname"><em>fit_sources</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Eigen::VectorXd &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>single_source</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates the RHS vector for the PSF fitting from the pixel values of the fit sources. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">fit_sources</td><td>The input list of sources. Modified due to pixel iterations. </td></tr>
    <tr><td class="paramname">rhs</td><td>The vector to fill. Should already have the correct size. </td></tr>
    <tr><td class="paramname">single_source</td><td>If passed, only the first source in the list is used. This is useful when defining the RHS for groups of overlapping sources, which all share a common set of image pixels </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a06ef0c026ea91fc19a01138c5c2c451c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a06ef0c026ea91fc19a01138c5c2c451c">&#9670;&nbsp;</a></span>fill_poly_coef_matrix()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::fill_poly_coef_matrix </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="FitPSF_2Common_8h.xhtml#a5432cdc9b255de958483cc386d5bba86">LinearSourceList</a> &amp;&#160;</td>
          <td class="paramname"><em>fit_sources</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Eigen::MatrixXd &amp;&#160;</td>
          <td class="paramname"><em>poly_coef_matrix</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Fills a stack of matrices, containing the outer product of the PSF terms for each source. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">fit_sources</td><td>The input list of sources. </td></tr>
    <tr><td class="paramname">poly_coef_matrix</td><td>The location to fill with the result. Should have the correct dimensions on input. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aef4c0f86a7072eae200ceb4807d502fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aef4c0f86a7072eae200ceb4807d502fc">&#9670;&nbsp;</a></span>fit_dropped_sources()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::fit_dropped_sources </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="FitPSF_2Common_8h.xhtml#a5432cdc9b255de958483cc386d5bba86">LinearSourceList</a> &amp;&#160;</td>
          <td class="paramname"><em>dropped_sources</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::VectorXd &amp;&#160;</td>
          <td class="paramname"><em>best_fit_poly_coef</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Fits for the amplitudes of sources initially dropped from PSF fitting. </p>
<p>Fills in the flux, its error estimate and \(\chi^2\). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dropped_sources</td><td>The list of dropped sources. </td></tr>
    <tr><td class="paramname">best_fit_poly_coef</td><td>the best fit polynomial coefficients produced by fit_piecewise_bicubic_psf() </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a216e02e75d2663e4fd89b41c8a182f92"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a216e02e75d2663e4fd89b41c8a182f92">&#9670;&nbsp;</a></span>fit_group()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::fit_group </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classFitPSF_1_1OverlapGroup.xhtml">OverlapGroup</a>&lt; <a class="el" href="classFitPSF_1_1LinearSource.xhtml">LinearSource</a>, <a class="el" href="classPSF_1_1PiecewiseBicubic.xhtml">PSF::PiecewiseBicubic</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>group</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classCore_1_1SubPixelMap.xhtml">Core::SubPixelMap</a> &amp;&#160;</td>
          <td class="paramname"><em>subpix_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classPSF_1_1PiecewiseBicubicMap.xhtml">PSF::PiecewiseBicubicMap</a> &amp;&#160;</td>
          <td class="paramname"><em>psf_map</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs the combined amplitude fitting for a group of sources. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">group</td><td>The group to fit. </td></tr>
    <tr><td class="paramname">subpix_map</td><td>The sub-pixel sensitivity map. </td></tr>
    <tr><td class="paramname">psf_map</td><td>The best fit PSF map. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="affdd2a42b876e91e63592bdb7dd09365"></a>
<h2 class="memtitle"><span class="permalink"><a href="#affdd2a42b876e91e63592bdb7dd09365">&#9670;&nbsp;</a></span>fit_piecewise_bicubic_psf() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool FitPSF::fit_piecewise_bicubic_psf </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="FitPSF_2Common_8h.xhtml#a5432cdc9b255de958483cc386d5bba86">LinearSourceList</a> &amp;&#160;</td>
          <td class="paramname"><em>fit_sources</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="FitPSF_2Common_8h.xhtml#a5432cdc9b255de958483cc386d5bba86">LinearSourceList</a> &amp;&#160;</td>
          <td class="paramname"><em>dropped_sources</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classPSF_1_1PiecewiseBicubicMap.xhtml">PSF::PiecewiseBicubicMap</a> &amp;&#160;</td>
          <td class="paramname"><em>psf_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>x_grid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>y_grid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classCore_1_1SubPixelMap.xhtml">Core::SubPixelMap</a> &amp;&#160;</td>
          <td class="paramname"><em>subpix_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>max_abs_amplitude_change</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>max_rel_amplitude_change</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>max_chi2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>pixel_rejection</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>min_convergence_rate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>max_iterations</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>smoothing_penalty</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Eigen::VectorXd &amp;&#160;</td>
          <td class="paramname"><em>best_fit_poly_coef</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>gain</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Same as above, but uses an initial PSF map to derive initial flux estimates. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">fit_sources</td><td>The input list of sources (need to be modified to perform the fit) and on output has the amplitudes set correctly for the best fit. </td></tr>
    <tr><td class="paramname">dropped_sources</td><td>The list of sources dropped from the fit (need to be modified to set the amplitudes correctly for the best fit). </td></tr>
    <tr><td class="paramname">psf_map</td><td>The PSF map to use in order to derive initial flux estimates. </td></tr>
    <tr><td class="paramname">x_grid</td><td>The vertical grid boundaries defining the PSF cells. </td></tr>
    <tr><td class="paramname">y_grid</td><td>The horizontal grid boundaries defining the PSF cells. </td></tr>
    <tr><td class="paramname">subpix_map</td><td>The sub-pixel sensitivity map. </td></tr>
    <tr><td class="paramname">max_abs_amplitude_change</td><td>The maximum sum squared of amplitude changes allowed after a PSF/Amplitude fit iteration in order to consider the solution converged. </td></tr>
    <tr><td class="paramname">max_rel_amplitude_change</td><td>The maximum fraction the sum squared of the amplitude changes can be of the length of the vector of amplitudes after a PSF/Amplitude fit iteration in order to consider the solution converged. </td></tr>
    <tr><td class="paramname">max_chi2</td><td>Sources with reduced \(\chi^2\) bigger than this are removed from the fit. </td></tr>
    <tr><td class="paramname">pixel_rejection</td><td>Pixels whose residuals after fitting is too large are not included in the fit. This parameter determines how large the residual cut-off is. See the help of --pix-rej command line option for details. </td></tr>
    <tr><td class="paramname">min_convergence_rate</td><td>The minimum rate of convergence to require before giving up. </td></tr>
    <tr><td class="paramname">max_iterations</td><td>The maximum number of iterations before giving up (use a negative value to disable this limit). </td></tr>
    <tr><td class="paramname">smoothing_penalty</td><td>Smoothing penalty (see help for details). </td></tr>
    <tr><td class="paramname">best_fit_poly_coef</td><td>On output contains the best fit polynomial coefficients. Resized as necessary. </td></tr>
    <tr><td class="paramname">gain</td><td>The gain of the input image. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a28d3743d0e3869d521ea01c5e17fbb6a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a28d3743d0e3869d521ea01c5e17fbb6a">&#9670;&nbsp;</a></span>fit_piecewise_bicubic_psf() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool FitPSF::fit_piecewise_bicubic_psf </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="FitPSF_2Common_8h.xhtml#a5432cdc9b255de958483cc386d5bba86">LinearSourceList</a> &amp;&#160;</td>
          <td class="paramname"><em>fit_sources</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="FitPSF_2Common_8h.xhtml#a5432cdc9b255de958483cc386d5bba86">LinearSourceList</a> &amp;&#160;</td>
          <td class="paramname"><em>dropped_sources</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>gain</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>x_grid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>y_grid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classCore_1_1SubPixelMap.xhtml">Core::SubPixelMap</a> &amp;&#160;</td>
          <td class="paramname"><em>subpix_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>max_abs_amplitude_change</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>max_rel_amplitude_change</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>max_chi2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>pixel_rejection</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>min_convergence_rate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>max_iterations</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>smoothing_penalty</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Eigen::VectorXd &amp;&#160;</td>
          <td class="paramname"><em>best_fit_poly_coef</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Fits for the polynomials giving the values, x, y and xy derivatives describing a piecewise bicubic PSF smoothly varying over the image. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">fit_sources</td><td>The input list of sources (need to be modified to perform the fit) and on output has the amplitudes set correctly for the best fit. </td></tr>
    <tr><td class="paramname">dropped_sources</td><td>The list of sources dropped from the fit (need to be modified to set the amplitudes correctly for the best fit). </td></tr>
    <tr><td class="paramname">gain</td><td>The gain of the input image. </td></tr>
    <tr><td class="paramname">x_grid</td><td>The vertical grid boundaries defining the PSF cells. </td></tr>
    <tr><td class="paramname">y_grid</td><td>The horizontal grid boundaries defining the PSF cells. </td></tr>
    <tr><td class="paramname">subpix_map</td><td>The sub-pixel sensitivity map. </td></tr>
    <tr><td class="paramname">max_abs_amplitude_change</td><td>The maximum sum squared of amplitude changes allowed after a PSF/Amplitude fit iteration in order to consider the solution converged. </td></tr>
    <tr><td class="paramname">max_rel_amplitude_change</td><td>The maximum fraction the sum squared of the amplitude changes can be of the length of the vector of amplitudes after a PSF/Amplitude fit iteration in order to consider the solution converged. </td></tr>
    <tr><td class="paramname">max_chi2</td><td>Sources with reduced \(\chi^2\) bigger than this are removed from the fit. </td></tr>
    <tr><td class="paramname">pixel_rejection</td><td>Pixels whose residuals after fitting is too large are not included in the fit. This parameter determines how large the residual cut-off is. See the help of --pix-rej command line option for details. </td></tr>
    <tr><td class="paramname">min_convergence_rate</td><td>The minimum rate of convergence to require before giving up. </td></tr>
    <tr><td class="paramname">max_iterations</td><td>The maximum number of iterations before giving up (use a negative value to disable this limit). </td></tr>
    <tr><td class="paramname">smoothing_penalty</td><td>Smoothing penalty (see help for details). </td></tr>
    <tr><td class="paramname">best_fit_poly_coef</td><td>On output contains the best fit polynomial coefficients. Resized as necessary. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ac91ac750539747a8dca73b658b39d657"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac91ac750539747a8dca73b658b39d657">&#9670;&nbsp;</a></span>fit_piecewise_bicubic_psf_step()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double FitPSF::fit_piecewise_bicubic_psf_step </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="FitPSF_2Common_8h.xhtml#a5432cdc9b255de958483cc386d5bba86">LinearSourceList</a> &amp;&#160;</td>
          <td class="paramname"><em>fit_sources</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::MatrixXd &amp;&#160;</td>
          <td class="paramname"><em>symmetrized_pix_integral_matrix</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::MatrixXd &amp;&#160;</td>
          <td class="paramname"><em>poly_coef_matrix</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::MatrixXd &amp;&#160;</td>
          <td class="paramname"><em>pixel_integral_matrix</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::VectorXd &amp;&#160;</td>
          <td class="paramname"><em>pixel_excesses</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::VectorXd &amp;&#160;</td>
          <td class="paramname"><em>rhs_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::VectorXd &amp;&#160;</td>
          <td class="paramname"><em>modified_pixel_excesses</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::VectorXd &amp;&#160;</td>
          <td class="paramname"><em>modified_rhs_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classFitPSF_1_1PiecewiseBicubicPSFSmoothing.xhtml">PiecewiseBicubicPSFSmoothing</a> &amp;&#160;</td>
          <td class="paramname"><em>smoothing</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Eigen::VectorXd &amp;&#160;</td>
          <td class="paramname"><em>best_fit</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs a single PSF parameter fit, amplitude fit iteration. </p>
<dl class="section return"><dt>Returns</dt><dd>the sum root square change of the source fluxes. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">fit_sources</td><td>The list of sources to fit. On output their fluxes are updated to the new best fit value. </td></tr>
    <tr><td class="paramname">symmetrized_pix_integral_matrix</td><td>See prepare_linear_regression. </td></tr>
    <tr><td class="paramname">poly_coef_matrix</td><td>See fill_poly_coef_matrix. </td></tr>
    <tr><td class="paramname">pixel_integral_matrix</td><td>See prepare_linear_regression. </td></tr>
    <tr><td class="paramname">pixel_excesses</td><td>See prepare_linear_regression. </td></tr>
    <tr><td class="paramname">rhs_offset</td><td>See prepare_linear_regression. </td></tr>
    <tr><td class="paramname">modified_pixel_excesses</td><td>See prepare_linear_regression. </td></tr>
    <tr><td class="paramname">modified_rhs_offset</td><td>See prepare_linear_regression. </td></tr>
    <tr><td class="paramname">smoothing</td><td>Correction to the final matrix enforcing smoothing. </td></tr>
    <tr><td class="paramname">best_fit</td><td>Updated to a new estimate of the polynomial expansion coefficients for the PSF parameters. Should have the correct dimensions on input. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a923bbfe73bf3ef904b0878b6850b942d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a923bbfe73bf3ef904b0878b6850b942d">&#9670;&nbsp;</a></span>output_best_fit_psf()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::output_best_fit_psf </td>
          <td>(</td>
          <td class="paramtype">const Eigen::VectorXd &amp;&#160;</td>
          <td class="paramname"><em>best_fit_poly_coef</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>x_grid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>y_grid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>fname</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Generates a file containing all the information necessary in order to reproduce the best fit PSF for any image position. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">best_fit_poly_coef</td><td>The best fit polynomial coefficients giving the expansion of all PSF parameters as a function of image position. </td></tr>
    <tr><td class="paramname">x_grid</td><td>The vertical grid boundaries defining the PSF cells. </td></tr>
    <tr><td class="paramname">y_grid</td><td>The horizontal grid boundaries defining the PSF cells. </td></tr>
    <tr><td class="paramname">fname</td><td>The name to use for the file. Overwritten if already exists. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ada17fb6f9984283c7450a04e9d4aefb2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ada17fb6f9984283c7450a04e9d4aefb2">&#9670;&nbsp;</a></span>prepare_linear_regression()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::prepare_linear_regression </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="FitPSF_2Common_8h.xhtml#a5432cdc9b255de958483cc386d5bba86">LinearSourceList</a> &amp;&#160;</td>
          <td class="paramname"><em>fit_sources</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::valarray&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>parameter_sets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::VectorXd &amp;&#160;</td>
          <td class="paramname"><em>pixel_excesses</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Eigen::MatrixXd &amp;&#160;</td>
          <td class="paramname"><em>pixel_integral_matrix</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Eigen::VectorXd &amp;&#160;</td>
          <td class="paramname"><em>rhs_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Eigen::MatrixXd &amp;&#160;</td>
          <td class="paramname"><em>symmetrized_pix_integral_matrix</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Eigen::VectorXd &amp;&#160;</td>
          <td class="paramname"><em>modified_pixel_excesses</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Eigen::VectorXd &amp;&#160;</td>
          <td class="paramname"><em>modified_rhs_offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Fills in the 3 output matrices and the output vector as appropriate. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">fit_sources</td><td>The input list of sources. Modified because of pixel iterations. </td></tr>
    <tr><td class="paramname">parameter_sets</td><td>The sets of parameters returned by fill_parameter_sets(). </td></tr>
    <tr><td class="paramname">pixel_excesses</td><td>The vector of background excess values of the source pixels. </td></tr>
    <tr><td class="paramname">pixel_integral_matrix</td><td>A stack of matrices, one for each source, with each row consisting of the integrals over the same source pixel but with only one basis vector contributing ( \(\mathbf{\tilde{M}^i}\) in the documentation). Should have the correct dimensions on input. </td></tr>
    <tr><td class="paramname">rhs_offset</td><td>\(\mathbf{\Delta}\) in the documentation. Should already have </td></tr>
    <tr><td class="paramname">symmetrized_pix_integral_matrix</td><td>A stack of \((\mathbf{\tilde{M}^i})^T\mathbf{\tilde{M}^i}\) ( \(\mathbf{\tilde{\Lambda}}\) in the documentation). Should have </td></tr>
    <tr><td class="paramname">modified_pixel_excesses</td><td>Derived from pixel_excesses by applying \(\left(\mathbf{\tilde{M}^i}\right)^T\) on each source's pixels. Should have the correct dimensions on input. </td></tr>
    <tr><td class="paramname">modified_rhs_offset</td><td>\(\mathbf{\tilde{\Delta}}\) in the documentation. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a3c2b2011ab96f64fa2c567d46dd1b69a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c2b2011ab96f64fa2c567d46dd1b69a">&#9670;&nbsp;</a></span>select_basis_vectors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FitPSF::select_basis_vectors </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; std::valarray&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>parameter_sets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classPSF_1_1PiecewiseBicubic.xhtml">PSF::PiecewiseBicubic</a> &amp;&#160;</td>
          <td class="paramname"><em>psf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Eigen::MatrixXd &amp;&#160;</td>
          <td class="paramname"><em>basis</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Selects basis vectors in which the PSF will be decomposed, as well as the full PSF integral vector. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">parameter_sets</td><td>The sets of parameters returned by fill_parameter_sets(). </td></tr>
    <tr><td class="paramname">psf</td><td>A PSF with the correct grid of cells. </td></tr>
    <tr><td class="paramname">basis</td><td>The matrix to fill. The first column will be \(\mathbf{I}/I^2\), and subsequent columns will be the basis vectors. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a4a9b91a3bea25086cbd9995fadb3ec6b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a9b91a3bea25086cbd9995fadb3ec6b">&#9670;&nbsp;</a></span>update_fluxes()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double FitPSF::update_fluxes </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="FitPSF_2Common_8h.xhtml#a5432cdc9b255de958483cc386d5bba86">LinearSourceList</a> &amp;&#160;</td>
          <td class="paramname"><em>fit_sources</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::VectorXd &amp;&#160;</td>
          <td class="paramname"><em>best_fit</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Updates the fluxes of the fit sources with new best estimates derived by fitting each source's background excesses. </p>
<dl class="section return"><dt>Returns</dt><dd>the root sum square change of the fluxes. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">fit_sources</td><td>The list of sources for which to update the flux. </td></tr>
    <tr><td class="paramname">best_fit</td><td>The current best fit polynomial expansion coefficients for the PSF parameters. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_65a8df4c49f610a40e9230d0067dc79d.xhtml">doc_src</a></li><li class="navelem"><a class="el" href="dir_da0161f9aa898feee64ca6d468d5d6fb.xhtml">FitPSF</a></li><li class="navelem"><a class="el" href="FitPSF_2PiecewiseBicubic_8h.xhtml">PiecewiseBicubic.h</a></li>
    <li class="footer">Generated on Wed Jan 15 2025 09:47:59 for Sub-Pixel Photometry by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1 </li>
  </ul>
</div>
</body>
</html>
